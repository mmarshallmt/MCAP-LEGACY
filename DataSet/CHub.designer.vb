'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34003
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MCAPDev")>  _
Partial Public Class CHubDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertchubFlyerAddress(instance As chubFlyerAddress)
    End Sub
  Partial Private Sub UpdatechubFlyerAddress(instance As chubFlyerAddress)
    End Sub
  Partial Private Sub DeletechubFlyerAddress(instance As chubFlyerAddress)
    End Sub
  Partial Private Sub InsertchubFlyer(instance As chubFlyer)
    End Sub
  Partial Private Sub UpdatechubFlyer(instance As chubFlyer)
    End Sub
  Partial Private Sub DeletechubFlyer(instance As chubFlyer)
    End Sub
  Partial Private Sub InsertchubFlyerTile(instance As chubFlyerTile)
    End Sub
  Partial Private Sub UpdatechubFlyerTile(instance As chubFlyerTile)
    End Sub
  Partial Private Sub DeletechubFlyerTile(instance As chubFlyerTile)
    End Sub
  Partial Private Sub InsertchubTile(instance As chubTile)
    End Sub
  Partial Private Sub UpdatechubTile(instance As chubTile)
    End Sub
  Partial Private Sub DeletechubTile(instance As chubTile)
    End Sub
  Partial Private Sub InsertPage(instance As Page)
    End Sub
  Partial Private Sub UpdatePage(instance As Page)
    End Sub
  Partial Private Sub DeletePage(instance As Page)
    End Sub
  Partial Private Sub InsertVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub UpdateVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub DeleteVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub InsertchubPageTile(instance As chubPageTile)
    End Sub
  Partial Private Sub UpdatechubPageTile(instance As chubPageTile)
    End Sub
  Partial Private Sub DeletechubPageTile(instance As chubPageTile)
    End Sub
  Partial Private Sub InsertchubFlyerPage(instance As chubFlyerPage)
    End Sub
  Partial Private Sub UpdatechubFlyerPage(instance As chubFlyerPage)
    End Sub
  Partial Private Sub DeletechubFlyerPage(instance As chubFlyerPage)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.MCAP.My.MySettings.Default.MCAPConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property chubFlyerAddresses() As System.Data.Linq.Table(Of chubFlyerAddress)
		Get
			Return Me.GetTable(Of chubFlyerAddress)
		End Get
	End Property
	
	Public ReadOnly Property chubFlyers() As System.Data.Linq.Table(Of chubFlyer)
		Get
			Return Me.GetTable(Of chubFlyer)
		End Get
	End Property
	
	Public ReadOnly Property chubFlyerTiles() As System.Data.Linq.Table(Of chubFlyerTile)
		Get
			Return Me.GetTable(Of chubFlyerTile)
		End Get
	End Property
	
	Public ReadOnly Property chubTiles() As System.Data.Linq.Table(Of chubTile)
		Get
			Return Me.GetTable(Of chubTile)
		End Get
	End Property
	
	Public ReadOnly Property Pages() As System.Data.Linq.Table(Of Page)
		Get
			Return Me.GetTable(Of Page)
		End Get
	End Property
	
	Public ReadOnly Property Vehicles() As System.Data.Linq.Table(Of Vehicle)
		Get
			Return Me.GetTable(Of Vehicle)
		End Get
	End Property
	
	Public ReadOnly Property chubPageTiles() As System.Data.Linq.Table(Of chubPageTile)
		Get
			Return Me.GetTable(Of chubPageTile)
		End Get
	End Property
	
	Public ReadOnly Property chubFlyerPages() As System.Data.Linq.Table(Of chubFlyerPage)
		Get
			Return Me.GetTable(Of chubFlyerPage)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.mt_proc_GetNewId")>  _
	Public Function mt_proc_GetNewId(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Field", DbType:="VarChar(50)")> ByVal field As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rv", DbType:="VarChar(15)")> ByRef rv As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), field, rv)
		rv = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubFlyerAddress")>  _
Partial Public Class chubFlyerAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlyerId As Integer
	
	Private _AddressId As Integer
	
	Private _VehicleId As System.Nullable(Of Integer)
	
	Private _chubFlyer As EntityRef(Of chubFlyer)
	
	Private _Vehicle As EntityRef(Of Vehicle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlyerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerIdChanged()
    End Sub
    Partial Private Sub OnAddressIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIdChanged()
    End Sub
    Partial Private Sub OnVehicleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVehicleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyer = CType(Nothing, EntityRef(Of chubFlyer))
		Me._Vehicle = CType(Nothing, EntityRef(Of Vehicle))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FlyerId() As Integer
		Get
			Return Me._FlyerId
		End Get
		Set
			If ((Me._FlyerId = value)  _
						= false) Then
				If Me._chubFlyer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlyerIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerId = value
				Me.SendPropertyChanged("FlyerId")
				Me.OnFlyerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AddressId() As Integer
		Get
			Return Me._AddressId
		End Get
		Set
			If ((Me._AddressId = value)  _
						= false) Then
				Me.OnAddressIdChanging(value)
				Me.SendPropertyChanging
				Me._AddressId = value
				Me.SendPropertyChanged("AddressId")
				Me.OnAddressIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleId", DbType:="Int")>  _
	Public Property VehicleId() As System.Nullable(Of Integer)
		Get
			Return Me._VehicleId
		End Get
		Set
			If (Me._VehicleId.Equals(value) = false) Then
				If Me._Vehicle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVehicleIdChanging(value)
				Me.SendPropertyChanging
				Me._VehicleId = value
				Me.SendPropertyChanged("VehicleId")
				Me.OnVehicleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerAddress", Storage:="_chubFlyer", ThisKey:="FlyerId", OtherKey:="FlyerId", IsForeignKey:=true)>  _
	Public Property chubFlyer() As chubFlyer
		Get
			Return Me._chubFlyer.Entity
		End Get
		Set
			Dim previousValue As chubFlyer = Me._chubFlyer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._chubFlyer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._chubFlyer.Entity = Nothing
					previousValue.chubFlyerAddresses.Remove(Me)
				End If
				Me._chubFlyer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerAddresses.Add(Me)
					Me._FlyerId = value.FlyerId
				Else
					Me._FlyerId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("chubFlyer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehicle_chubFlyerAddress", Storage:="_Vehicle", ThisKey:="VehicleId", OtherKey:="VehicleId", IsForeignKey:=true)>  _
	Public Property Vehicle() As Vehicle
		Get
			Return Me._Vehicle.Entity
		End Get
		Set
			Dim previousValue As Vehicle = Me._Vehicle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehicle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehicle.Entity = Nothing
					previousValue.chubFlyerAddresses.Remove(Me)
				End If
				Me._Vehicle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerAddresses.Add(Me)
					Me._VehicleId = value.VehicleId
				Else
					Me._VehicleId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Vehicle")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubFlyer")>  _
Partial Public Class chubFlyer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlyerId As Integer
	
	Private _RetId As Integer
	
	Private _WishabiId As Integer
	
	Private _FlyerRunId As Integer
	
	Private _FlyerTypeId As Integer
	
	Private _MerchantId As Integer
	
	Private _Pages As Integer
	
	Private _Width As Integer
	
	Private _Height As Integer
	
	Private _FlyerTypeName As String
	
	Private _NameIdentifier As String
	
	Private _Path As String
	
	Private _BreakDt As Date
	
	Private _ValidFrom As Date
	
	Private _ValidTo As Date
	
	Private _ImageHost As String
	
	Private _EnvelopeId As System.Nullable(Of Integer)
	
	Private _chubFlyerAddresses As EntitySet(Of chubFlyerAddress)
	
	Private _chubFlyerTiles As EntitySet(Of chubFlyerTile)
	
	Private _chubFlyerPages As EntitySet(Of chubFlyerPage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlyerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerIdChanged()
    End Sub
    Partial Private Sub OnRetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRetIdChanged()
    End Sub
    Partial Private Sub OnWishabiIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnWishabiIdChanged()
    End Sub
    Partial Private Sub OnFlyerRunIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerRunIdChanged()
    End Sub
    Partial Private Sub OnFlyerTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerTypeIdChanged()
    End Sub
    Partial Private Sub OnMerchantIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMerchantIdChanged()
    End Sub
    Partial Private Sub OnPagesChanging(value As Integer)
    End Sub
    Partial Private Sub OnPagesChanged()
    End Sub
    Partial Private Sub OnWidthChanging(value As Integer)
    End Sub
    Partial Private Sub OnWidthChanged()
    End Sub
    Partial Private Sub OnHeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnFlyerTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlyerTypeNameChanged()
    End Sub
    Partial Private Sub OnNameIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnNameIdentifierChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnBreakDtChanging(value As Date)
    End Sub
    Partial Private Sub OnBreakDtChanged()
    End Sub
    Partial Private Sub OnValidFromChanging(value As Date)
    End Sub
    Partial Private Sub OnValidFromChanged()
    End Sub
    Partial Private Sub OnValidToChanging(value As Date)
    End Sub
    Partial Private Sub OnValidToChanged()
    End Sub
    Partial Private Sub OnImageHostChanging(value As String)
    End Sub
    Partial Private Sub OnImageHostChanged()
    End Sub
    Partial Private Sub OnEnvelopeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEnvelopeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyerAddresses = New EntitySet(Of chubFlyerAddress)(AddressOf Me.attach_chubFlyerAddresses, AddressOf Me.detach_chubFlyerAddresses)
		Me._chubFlyerTiles = New EntitySet(Of chubFlyerTile)(AddressOf Me.attach_chubFlyerTiles, AddressOf Me.detach_chubFlyerTiles)
		Me._chubFlyerPages = New EntitySet(Of chubFlyerPage)(AddressOf Me.attach_chubFlyerPages, AddressOf Me.detach_chubFlyerPages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FlyerId() As Integer
		Get
			Return Me._FlyerId
		End Get
		Set
			If ((Me._FlyerId = value)  _
						= false) Then
				Me.OnFlyerIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerId = value
				Me.SendPropertyChanged("FlyerId")
				Me.OnFlyerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetId", DbType:="Int NOT NULL")>  _
	Public Property RetId() As Integer
		Get
			Return Me._RetId
		End Get
		Set
			If ((Me._RetId = value)  _
						= false) Then
				Me.OnRetIdChanging(value)
				Me.SendPropertyChanging
				Me._RetId = value
				Me.SendPropertyChanged("RetId")
				Me.OnRetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WishabiId", DbType:="Int NOT NULL")>  _
	Public Property WishabiId() As Integer
		Get
			Return Me._WishabiId
		End Get
		Set
			If ((Me._WishabiId = value)  _
						= false) Then
				Me.OnWishabiIdChanging(value)
				Me.SendPropertyChanging
				Me._WishabiId = value
				Me.SendPropertyChanged("WishabiId")
				Me.OnWishabiIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerRunId", DbType:="Int NOT NULL")>  _
	Public Property FlyerRunId() As Integer
		Get
			Return Me._FlyerRunId
		End Get
		Set
			If ((Me._FlyerRunId = value)  _
						= false) Then
				Me.OnFlyerRunIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerRunId = value
				Me.SendPropertyChanged("FlyerRunId")
				Me.OnFlyerRunIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerTypeId", DbType:="Int NOT NULL")>  _
	Public Property FlyerTypeId() As Integer
		Get
			Return Me._FlyerTypeId
		End Get
		Set
			If ((Me._FlyerTypeId = value)  _
						= false) Then
				Me.OnFlyerTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerTypeId = value
				Me.SendPropertyChanged("FlyerTypeId")
				Me.OnFlyerTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantId", DbType:="Int NOT NULL")>  _
	Public Property MerchantId() As Integer
		Get
			Return Me._MerchantId
		End Get
		Set
			If ((Me._MerchantId = value)  _
						= false) Then
				Me.OnMerchantIdChanging(value)
				Me.SendPropertyChanging
				Me._MerchantId = value
				Me.SendPropertyChanged("MerchantId")
				Me.OnMerchantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pages", DbType:="Int NOT NULL")>  _
	Public Property Pages() As Integer
		Get
			Return Me._Pages
		End Get
		Set
			If ((Me._Pages = value)  _
						= false) Then
				Me.OnPagesChanging(value)
				Me.SendPropertyChanging
				Me._Pages = value
				Me.SendPropertyChanged("Pages")
				Me.OnPagesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Width", DbType:="Int NOT NULL")>  _
	Public Property Width() As Integer
		Get
			Return Me._Width
		End Get
		Set
			If ((Me._Width = value)  _
						= false) Then
				Me.OnWidthChanging(value)
				Me.SendPropertyChanging
				Me._Width = value
				Me.SendPropertyChanged("Width")
				Me.OnWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Height", DbType:="Int NOT NULL")>  _
	Public Property Height() As Integer
		Get
			Return Me._Height
		End Get
		Set
			If ((Me._Height = value)  _
						= false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerTypeName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FlyerTypeName() As String
		Get
			Return Me._FlyerTypeName
		End Get
		Set
			If (String.Equals(Me._FlyerTypeName, value) = false) Then
				Me.OnFlyerTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._FlyerTypeName = value
				Me.SendPropertyChanged("FlyerTypeName")
				Me.OnFlyerTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameIdentifier", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NameIdentifier() As String
		Get
			Return Me._NameIdentifier
		End Get
		Set
			If (String.Equals(Me._NameIdentifier, value) = false) Then
				Me.OnNameIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._NameIdentifier = value
				Me.SendPropertyChanged("NameIdentifier")
				Me.OnNameIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Path() As String
		Get
			Return Me._Path
		End Get
		Set
			If (String.Equals(Me._Path, value) = false) Then
				Me.OnPathChanging(value)
				Me.SendPropertyChanging
				Me._Path = value
				Me.SendPropertyChanged("Path")
				Me.OnPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BreakDt", DbType:="DateTime NOT NULL")>  _
	Public Property BreakDt() As Date
		Get
			Return Me._BreakDt
		End Get
		Set
			If ((Me._BreakDt = value)  _
						= false) Then
				Me.OnBreakDtChanging(value)
				Me.SendPropertyChanging
				Me._BreakDt = value
				Me.SendPropertyChanged("BreakDt")
				Me.OnBreakDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidFrom", DbType:="DateTime NOT NULL")>  _
	Public Property ValidFrom() As Date
		Get
			Return Me._ValidFrom
		End Get
		Set
			If ((Me._ValidFrom = value)  _
						= false) Then
				Me.OnValidFromChanging(value)
				Me.SendPropertyChanging
				Me._ValidFrom = value
				Me.SendPropertyChanged("ValidFrom")
				Me.OnValidFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidTo", DbType:="DateTime NOT NULL")>  _
	Public Property ValidTo() As Date
		Get
			Return Me._ValidTo
		End Get
		Set
			If ((Me._ValidTo = value)  _
						= false) Then
				Me.OnValidToChanging(value)
				Me.SendPropertyChanging
				Me._ValidTo = value
				Me.SendPropertyChanged("ValidTo")
				Me.OnValidToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageHost", DbType:="VarChar(100)")>  _
	Public Property ImageHost() As String
		Get
			Return Me._ImageHost
		End Get
		Set
			If (String.Equals(Me._ImageHost, value) = false) Then
				Me.OnImageHostChanging(value)
				Me.SendPropertyChanging
				Me._ImageHost = value
				Me.SendPropertyChanged("ImageHost")
				Me.OnImageHostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvelopeId", DbType:="Int")>  _
	Public Property EnvelopeId() As System.Nullable(Of Integer)
		Get
			Return Me._EnvelopeId
		End Get
		Set
			If (Me._EnvelopeId.Equals(value) = false) Then
				Me.OnEnvelopeIdChanging(value)
				Me.SendPropertyChanging
				Me._EnvelopeId = value
				Me.SendPropertyChanged("EnvelopeId")
				Me.OnEnvelopeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerAddress", Storage:="_chubFlyerAddresses", ThisKey:="FlyerId", OtherKey:="FlyerId")>  _
	Public Property chubFlyerAddresses() As EntitySet(Of chubFlyerAddress)
		Get
			Return Me._chubFlyerAddresses
		End Get
		Set
			Me._chubFlyerAddresses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerTile", Storage:="_chubFlyerTiles", ThisKey:="FlyerId", OtherKey:="FlyerId")>  _
	Public Property chubFlyerTiles() As EntitySet(Of chubFlyerTile)
		Get
			Return Me._chubFlyerTiles
		End Get
		Set
			Me._chubFlyerTiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerPage", Storage:="_chubFlyerPages", ThisKey:="FlyerId", OtherKey:="FlyerId")>  _
	Public Property chubFlyerPages() As EntitySet(Of chubFlyerPage)
		Get
			Return Me._chubFlyerPages
		End Get
		Set
			Me._chubFlyerPages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_chubFlyerAddresses(ByVal entity As chubFlyerAddress)
		Me.SendPropertyChanging
		entity.chubFlyer = Me
	End Sub
	
	Private Sub detach_chubFlyerAddresses(ByVal entity As chubFlyerAddress)
		Me.SendPropertyChanging
		entity.chubFlyer = Nothing
	End Sub
	
	Private Sub attach_chubFlyerTiles(ByVal entity As chubFlyerTile)
		Me.SendPropertyChanging
		entity.chubFlyer = Me
	End Sub
	
	Private Sub detach_chubFlyerTiles(ByVal entity As chubFlyerTile)
		Me.SendPropertyChanging
		entity.chubFlyer = Nothing
	End Sub
	
	Private Sub attach_chubFlyerPages(ByVal entity As chubFlyerPage)
		Me.SendPropertyChanging
		entity.chubFlyer = Me
	End Sub
	
	Private Sub detach_chubFlyerPages(ByVal entity As chubFlyerPage)
		Me.SendPropertyChanging
		entity.chubFlyer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubFlyerTile")>  _
Partial Public Class chubFlyerTile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlyerId As Integer
	
	Private _TileId As Integer
	
	Private _PositionTop As Integer
	
	Private _PositionLeft As Integer
	
	Private _ArbitraryId As Integer
	
	Private _chubFlyer As EntityRef(Of chubFlyer)
	
	Private _chubTile As EntityRef(Of chubTile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlyerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerIdChanged()
    End Sub
    Partial Private Sub OnTileIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTileIdChanged()
    End Sub
    Partial Private Sub OnPositionTopChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionTopChanged()
    End Sub
    Partial Private Sub OnPositionLeftChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionLeftChanged()
    End Sub
    Partial Private Sub OnArbitraryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArbitraryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyer = CType(Nothing, EntityRef(Of chubFlyer))
		Me._chubTile = CType(Nothing, EntityRef(Of chubTile))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerId", DbType:="Int NOT NULL")>  _
	Public Property FlyerId() As Integer
		Get
			Return Me._FlyerId
		End Get
		Set
			If ((Me._FlyerId = value)  _
						= false) Then
				If Me._chubFlyer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlyerIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerId = value
				Me.SendPropertyChanged("FlyerId")
				Me.OnFlyerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TileId", DbType:="Int NOT NULL")>  _
	Public Property TileId() As Integer
		Get
			Return Me._TileId
		End Get
		Set
			If ((Me._TileId = value)  _
						= false) Then
				If Me._chubTile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTileIdChanging(value)
				Me.SendPropertyChanging
				Me._TileId = value
				Me.SendPropertyChanged("TileId")
				Me.OnTileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionTop", DbType:="Int NOT NULL")>  _
	Public Property PositionTop() As Integer
		Get
			Return Me._PositionTop
		End Get
		Set
			If ((Me._PositionTop = value)  _
						= false) Then
				Me.OnPositionTopChanging(value)
				Me.SendPropertyChanging
				Me._PositionTop = value
				Me.SendPropertyChanged("PositionTop")
				Me.OnPositionTopChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionLeft", DbType:="Int NOT NULL")>  _
	Public Property PositionLeft() As Integer
		Get
			Return Me._PositionLeft
		End Get
		Set
			If ((Me._PositionLeft = value)  _
						= false) Then
				Me.OnPositionLeftChanging(value)
				Me.SendPropertyChanging
				Me._PositionLeft = value
				Me.SendPropertyChanged("PositionLeft")
				Me.OnPositionLeftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArbitraryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ArbitraryId() As Integer
		Get
			Return Me._ArbitraryId
		End Get
		Set
			If ((Me._ArbitraryId = value)  _
						= false) Then
				Me.OnArbitraryIdChanging(value)
				Me.SendPropertyChanging
				Me._ArbitraryId = value
				Me.SendPropertyChanged("ArbitraryId")
				Me.OnArbitraryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerTile", Storage:="_chubFlyer", ThisKey:="FlyerId", OtherKey:="FlyerId", IsForeignKey:=true)>  _
	Public Property chubFlyer() As chubFlyer
		Get
			Return Me._chubFlyer.Entity
		End Get
		Set
			Dim previousValue As chubFlyer = Me._chubFlyer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._chubFlyer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._chubFlyer.Entity = Nothing
					previousValue.chubFlyerTiles.Remove(Me)
				End If
				Me._chubFlyer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerTiles.Add(Me)
					Me._FlyerId = value.FlyerId
				Else
					Me._FlyerId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("chubFlyer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubTile_chubFlyerTile", Storage:="_chubTile", ThisKey:="TileId", OtherKey:="TileId", IsForeignKey:=true)>  _
	Public Property chubTile() As chubTile
		Get
			Return Me._chubTile.Entity
		End Get
		Set
			Dim previousValue As chubTile = Me._chubTile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._chubTile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._chubTile.Entity = Nothing
					previousValue.chubFlyerTiles.Remove(Me)
				End If
				Me._chubTile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerTiles.Add(Me)
					Me._TileId = value.TileId
				Else
					Me._TileId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("chubTile")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubTile")>  _
Partial Public Class chubTile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TileId As Integer
	
	Private _Url As String
	
	Private _Sha1Hash As String
	
	Private _Height As Integer
	
	Private _Width As Integer
	
	Private _RetrievedDt As Date
	
	Private _Etag As String
	
	Private _chubFlyerTiles As EntitySet(Of chubFlyerTile)
	
	Private _chubPageTiles As EntitySet(Of chubPageTile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTileIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTileIdChanged()
    End Sub
    Partial Private Sub OnUrlChanging(value As String)
    End Sub
    Partial Private Sub OnUrlChanged()
    End Sub
    Partial Private Sub OnSha1HashChanging(value As String)
    End Sub
    Partial Private Sub OnSha1HashChanged()
    End Sub
    Partial Private Sub OnHeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnWidthChanging(value As Integer)
    End Sub
    Partial Private Sub OnWidthChanged()
    End Sub
    Partial Private Sub OnRetrievedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRetrievedDtChanged()
    End Sub
    Partial Private Sub OnEtagChanging(value As String)
    End Sub
    Partial Private Sub OnEtagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyerTiles = New EntitySet(Of chubFlyerTile)(AddressOf Me.attach_chubFlyerTiles, AddressOf Me.detach_chubFlyerTiles)
		Me._chubPageTiles = New EntitySet(Of chubPageTile)(AddressOf Me.attach_chubPageTiles, AddressOf Me.detach_chubPageTiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TileId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TileId() As Integer
		Get
			Return Me._TileId
		End Get
		Set
			If ((Me._TileId = value)  _
						= false) Then
				Me.OnTileIdChanging(value)
				Me.SendPropertyChanging
				Me._TileId = value
				Me.SendPropertyChanged("TileId")
				Me.OnTileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Url", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Url() As String
		Get
			Return Me._Url
		End Get
		Set
			If (String.Equals(Me._Url, value) = false) Then
				Me.OnUrlChanging(value)
				Me.SendPropertyChanging
				Me._Url = value
				Me.SendPropertyChanged("Url")
				Me.OnUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sha1Hash", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Sha1Hash() As String
		Get
			Return Me._Sha1Hash
		End Get
		Set
			If (String.Equals(Me._Sha1Hash, value) = false) Then
				Me.OnSha1HashChanging(value)
				Me.SendPropertyChanging
				Me._Sha1Hash = value
				Me.SendPropertyChanged("Sha1Hash")
				Me.OnSha1HashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Height", DbType:="Int NOT NULL")>  _
	Public Property Height() As Integer
		Get
			Return Me._Height
		End Get
		Set
			If ((Me._Height = value)  _
						= false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Width", DbType:="Int NOT NULL")>  _
	Public Property Width() As Integer
		Get
			Return Me._Width
		End Get
		Set
			If ((Me._Width = value)  _
						= false) Then
				Me.OnWidthChanging(value)
				Me.SendPropertyChanging
				Me._Width = value
				Me.SendPropertyChanged("Width")
				Me.OnWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetrievedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RetrievedDt() As Date
		Get
			Return Me._RetrievedDt
		End Get
		Set
			If ((Me._RetrievedDt = value)  _
						= false) Then
				Me.OnRetrievedDtChanging(value)
				Me.SendPropertyChanging
				Me._RetrievedDt = value
				Me.SendPropertyChanged("RetrievedDt")
				Me.OnRetrievedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Etag", DbType:="VarChar(42)")>  _
	Public Property Etag() As String
		Get
			Return Me._Etag
		End Get
		Set
			If (String.Equals(Me._Etag, value) = false) Then
				Me.OnEtagChanging(value)
				Me.SendPropertyChanging
				Me._Etag = value
				Me.SendPropertyChanged("Etag")
				Me.OnEtagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubTile_chubFlyerTile", Storage:="_chubFlyerTiles", ThisKey:="TileId", OtherKey:="TileId")>  _
	Public Property chubFlyerTiles() As EntitySet(Of chubFlyerTile)
		Get
			Return Me._chubFlyerTiles
		End Get
		Set
			Me._chubFlyerTiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubTile_chubPageTile", Storage:="_chubPageTiles", ThisKey:="TileId", OtherKey:="TileId")>  _
	Public Property chubPageTiles() As EntitySet(Of chubPageTile)
		Get
			Return Me._chubPageTiles
		End Get
		Set
			Me._chubPageTiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_chubFlyerTiles(ByVal entity As chubFlyerTile)
		Me.SendPropertyChanging
		entity.chubTile = Me
	End Sub
	
	Private Sub detach_chubFlyerTiles(ByVal entity As chubFlyerTile)
		Me.SendPropertyChanging
		entity.chubTile = Nothing
	End Sub
	
	Private Sub attach_chubPageTiles(ByVal entity As chubPageTile)
		Me.SendPropertyChanging
		entity.chubTile = Me
	End Sub
	
	Private Sub detach_chubPageTiles(ByVal entity As chubPageTile)
		Me.SendPropertyChanging
		entity.chubTile = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Page")>  _
Partial Public Class Page
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PageId As Integer
	
	Private _VehicleId As System.Nullable(Of Integer)
	
	Private _ImageName As String
	
	Private _PageTypeId As String
	
	Private _ReceivedOrder As System.Nullable(Of Integer)
	
	Private _PageName As String
	
	Private _PixelHieght As System.Nullable(Of Integer)
	
	Private _PixelWidth As System.Nullable(Of Integer)
	
	Private _SizeID As System.Nullable(Of Integer)
	
	Private _FormName As String
	
	Private _chubPageTiles As EntitySet(Of chubPageTile)
	
	Private _chubFlyerPages As EntitySet(Of chubFlyerPage)
	
	Private _Vehicle As EntityRef(Of Vehicle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPageIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageIdChanged()
    End Sub
    Partial Private Sub OnVehicleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVehicleIdChanged()
    End Sub
    Partial Private Sub OnImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnImageNameChanged()
    End Sub
    Partial Private Sub OnPageTypeIdChanging(value As String)
    End Sub
    Partial Private Sub OnPageTypeIdChanged()
    End Sub
    Partial Private Sub OnReceivedOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReceivedOrderChanged()
    End Sub
    Partial Private Sub OnPageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPageNameChanged()
    End Sub
    Partial Private Sub OnPixelHieghtChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPixelHieghtChanged()
    End Sub
    Partial Private Sub OnPixelWidthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPixelWidthChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnFormNameChanging(value As String)
    End Sub
    Partial Private Sub OnFormNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubPageTiles = New EntitySet(Of chubPageTile)(AddressOf Me.attach_chubPageTiles, AddressOf Me.detach_chubPageTiles)
		Me._chubFlyerPages = New EntitySet(Of chubFlyerPage)(AddressOf Me.attach_chubFlyerPages, AddressOf Me.detach_chubFlyerPages)
		Me._Vehicle = CType(Nothing, EntityRef(Of Vehicle))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PageId() As Integer
		Get
			Return Me._PageId
		End Get
		Set
			If ((Me._PageId = value)  _
						= false) Then
				Me.OnPageIdChanging(value)
				Me.SendPropertyChanging
				Me._PageId = value
				Me.SendPropertyChanged("PageId")
				Me.OnPageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleId", DbType:="Int")>  _
	Public Property VehicleId() As System.Nullable(Of Integer)
		Get
			Return Me._VehicleId
		End Get
		Set
			If (Me._VehicleId.Equals(value) = false) Then
				If Me._Vehicle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVehicleIdChanging(value)
				Me.SendPropertyChanging
				Me._VehicleId = value
				Me.SendPropertyChanged("VehicleId")
				Me.OnVehicleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageName", DbType:="VarChar(50)")>  _
	Public Property ImageName() As String
		Get
			Return Me._ImageName
		End Get
		Set
			If (String.Equals(Me._ImageName, value) = false) Then
				Me.OnImageNameChanging(value)
				Me.SendPropertyChanging
				Me._ImageName = value
				Me.SendPropertyChanged("ImageName")
				Me.OnImageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTypeId", DbType:="VarChar(50)")>  _
	Public Property PageTypeId() As String
		Get
			Return Me._PageTypeId
		End Get
		Set
			If (String.Equals(Me._PageTypeId, value) = false) Then
				Me.OnPageTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._PageTypeId = value
				Me.SendPropertyChanged("PageTypeId")
				Me.OnPageTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReceivedOrder", DbType:="Int")>  _
	Public Property ReceivedOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedOrder
		End Get
		Set
			If (Me._ReceivedOrder.Equals(value) = false) Then
				Me.OnReceivedOrderChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedOrder = value
				Me.SendPropertyChanged("ReceivedOrder")
				Me.OnReceivedOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageName", DbType:="VarChar(50)")>  _
	Public Property PageName() As String
		Get
			Return Me._PageName
		End Get
		Set
			If (String.Equals(Me._PageName, value) = false) Then
				Me.OnPageNameChanging(value)
				Me.SendPropertyChanging
				Me._PageName = value
				Me.SendPropertyChanged("PageName")
				Me.OnPageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PixelHieght", DbType:="Int")>  _
	Public Property PixelHieght() As System.Nullable(Of Integer)
		Get
			Return Me._PixelHieght
		End Get
		Set
			If (Me._PixelHieght.Equals(value) = false) Then
				Me.OnPixelHieghtChanging(value)
				Me.SendPropertyChanging
				Me._PixelHieght = value
				Me.SendPropertyChanged("PixelHieght")
				Me.OnPixelHieghtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PixelWidth", DbType:="Int")>  _
	Public Property PixelWidth() As System.Nullable(Of Integer)
		Get
			Return Me._PixelWidth
		End Get
		Set
			If (Me._PixelWidth.Equals(value) = false) Then
				Me.OnPixelWidthChanging(value)
				Me.SendPropertyChanging
				Me._PixelWidth = value
				Me.SendPropertyChanged("PixelWidth")
				Me.OnPixelWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int")>  _
	Public Property SizeID() As System.Nullable(Of Integer)
		Get
			Return Me._SizeID
		End Get
		Set
			If (Me._SizeID.Equals(value) = false) Then
				Me.OnSizeIDChanging(value)
				Me.SendPropertyChanging
				Me._SizeID = value
				Me.SendPropertyChanged("SizeID")
				Me.OnSizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormName", DbType:="VarChar(100)")>  _
	Public Property FormName() As String
		Get
			Return Me._FormName
		End Get
		Set
			If (String.Equals(Me._FormName, value) = false) Then
				Me.OnFormNameChanging(value)
				Me.SendPropertyChanging
				Me._FormName = value
				Me.SendPropertyChanged("FormName")
				Me.OnFormNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Page_chubPageTile", Storage:="_chubPageTiles", ThisKey:="PageId", OtherKey:="PageId")>  _
	Public Property chubPageTiles() As EntitySet(Of chubPageTile)
		Get
			Return Me._chubPageTiles
		End Get
		Set
			Me._chubPageTiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Page_chubFlyerPage", Storage:="_chubFlyerPages", ThisKey:="PageId", OtherKey:="PageId")>  _
	Public Property chubFlyerPages() As EntitySet(Of chubFlyerPage)
		Get
			Return Me._chubFlyerPages
		End Get
		Set
			Me._chubFlyerPages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehicle_Page", Storage:="_Vehicle", ThisKey:="VehicleId", OtherKey:="VehicleId", IsForeignKey:=true)>  _
	Public Property Vehicle() As Vehicle
		Get
			Return Me._Vehicle.Entity
		End Get
		Set
			Dim previousValue As Vehicle = Me._Vehicle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehicle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehicle.Entity = Nothing
					previousValue.Pages.Remove(Me)
				End If
				Me._Vehicle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Pages.Add(Me)
					Me._VehicleId = value.VehicleId
				Else
					Me._VehicleId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Vehicle")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_chubPageTiles(ByVal entity As chubPageTile)
		Me.SendPropertyChanging
		entity.Page = Me
	End Sub
	
	Private Sub detach_chubPageTiles(ByVal entity As chubPageTile)
		Me.SendPropertyChanging
		entity.Page = Nothing
	End Sub
	
	Private Sub attach_chubFlyerPages(ByVal entity As chubFlyerPage)
		Me.SendPropertyChanging
		entity.Page = Me
	End Sub
	
	Private Sub detach_chubFlyerPages(ByVal entity As chubFlyerPage)
		Me.SendPropertyChanging
		entity.Page = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vehicle")>  _
Partial Public Class Vehicle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VehicleId As Integer
	
	Private _EnvelopeId As System.Nullable(Of Integer)
	
	Private _RetId As System.Nullable(Of Integer)
	
	Private _MktId As System.Nullable(Of Integer)
	
	Private _BreakDt As System.Nullable(Of Date)
	
	Private _StartDt As System.Nullable(Of Date)
	
	Private _EndDt As System.Nullable(Of Date)
	
	Private _TypeId As System.Nullable(Of Integer)
	
	Private _LanguageId As System.Nullable(Of Integer)
	
	Private _EventId As System.Nullable(Of Integer)
	
	Private _ThemeId As System.Nullable(Of Integer)
	
	Private _MediaId As System.Nullable(Of Integer)
	
	Private _PublicationId As System.Nullable(Of Integer)
	
	Private _FlashInd As System.Nullable(Of Byte)
	
	Private _CreateDt As System.Nullable(Of Date)
	
	Private _CreatedById As System.Nullable(Of Integer)
	
	Private _ScanDt As System.Nullable(Of Date)
	
	Private _ScannedById As System.Nullable(Of Integer)
	
	Private _QCDt As System.Nullable(Of Date)
	
	Private _QCedById As System.Nullable(Of Integer)
	
	Private _FamilyId As System.Nullable(Of Integer)
	
	Private _CouponInd As System.Nullable(Of Byte)
	
	Private _CreateSizedDt As System.Nullable(Of Date)
	
	Private _Priority As System.Nullable(Of Integer)
	
	Private _CheckInPageCount As System.Nullable(Of Integer)
	
	Private _StatusID As System.Nullable(Of Integer)
	
	Private _SenderId As System.Nullable(Of Integer)
	
	Private _PullDt As System.Nullable(Of Date)
	
	Private _PulledById As System.Nullable(Of Integer)
	
	Private _PullPageCount As System.Nullable(Of Integer)
	
	Private _Weight As System.Nullable(Of Double)
	
	Private _PullQCedById As System.Nullable(Of Integer)
	
	Private _PullQCDt As System.Nullable(Of Date)
	
	Private _FormName As String
	
	Private _CheckInOccurrences As System.Nullable(Of Integer)
	
	Private _NationalInd As System.Nullable(Of Byte)
	
	Private _ftpStatusId As System.Nullable(Of Integer)
	
	Private _ftpDt As System.Nullable(Of Date)
	
	Private _IndexDt As System.Nullable(Of Date)
	
	Private _IndexedById As System.Nullable(Of Integer)
	
	Private _RemoteEntryImageFTPStatusId As System.Nullable(Of Integer)
	
	Private _RemoteEntryImageFTPDt As System.Nullable(Of Date)
	
	Private _RemoteEntryImageForceFTPRetransfer As System.Nullable(Of Byte)
	
	Private _RemoteEntryImageFTPQueueInsertDt As System.Nullable(Of Date)
	
	Private _SPReviewStatusId As System.Nullable(Of Integer)
	
	Private _EntryInd As System.Nullable(Of Byte)
	
	Private _ParentVehicleId As System.Nullable(Of Integer)
	
	Private _BodyText As String
	
	Private _BodyHTML As String
	
	Private _SiteId As System.Nullable(Of Integer)
	
	Private _Subject As String
	
	Private _ReQCDt As System.Nullable(Of Date)
	
	Private _ReQCedById As System.Nullable(Of Integer)
	
	Private _FilterMatches As String
	
	Private _chubFlyerAddresses As EntitySet(Of chubFlyerAddress)
	
	Private _Pages As EntitySet(Of Page)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVehicleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVehicleIdChanged()
    End Sub
    Partial Private Sub OnEnvelopeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEnvelopeIdChanged()
    End Sub
    Partial Private Sub OnRetIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetIdChanged()
    End Sub
    Partial Private Sub OnMktIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMktIdChanged()
    End Sub
    Partial Private Sub OnBreakDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBreakDtChanged()
    End Sub
    Partial Private Sub OnStartDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDtChanged()
    End Sub
    Partial Private Sub OnEndDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDtChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnLanguageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLanguageIdChanged()
    End Sub
    Partial Private Sub OnEventIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEventIdChanged()
    End Sub
    Partial Private Sub OnThemeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnThemeIdChanged()
    End Sub
    Partial Private Sub OnMediaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMediaIdChanged()
    End Sub
    Partial Private Sub OnPublicationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPublicationIdChanged()
    End Sub
    Partial Private Sub OnFlashIndChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnFlashIndChanged()
    End Sub
    Partial Private Sub OnCreateDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDtChanged()
    End Sub
    Partial Private Sub OnCreatedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatedByIdChanged()
    End Sub
    Partial Private Sub OnScanDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnScanDtChanged()
    End Sub
    Partial Private Sub OnScannedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnScannedByIdChanged()
    End Sub
    Partial Private Sub OnQCDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnQCDtChanged()
    End Sub
    Partial Private Sub OnQCedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQCedByIdChanged()
    End Sub
    Partial Private Sub OnFamilyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFamilyIdChanged()
    End Sub
    Partial Private Sub OnCouponIndChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnCouponIndChanged()
    End Sub
    Partial Private Sub OnCreateSizedDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateSizedDtChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnCheckInPageCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCheckInPageCountChanged()
    End Sub
    Partial Private Sub OnStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusIDChanged()
    End Sub
    Partial Private Sub OnSenderIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSenderIdChanged()
    End Sub
    Partial Private Sub OnPullDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPullDtChanged()
    End Sub
    Partial Private Sub OnPulledByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPulledByIdChanged()
    End Sub
    Partial Private Sub OnPullPageCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPullPageCountChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnPullQCedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPullQCedByIdChanged()
    End Sub
    Partial Private Sub OnPullQCDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPullQCDtChanged()
    End Sub
    Partial Private Sub OnFormNameChanging(value As String)
    End Sub
    Partial Private Sub OnFormNameChanged()
    End Sub
    Partial Private Sub OnCheckInOccurrencesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCheckInOccurrencesChanged()
    End Sub
    Partial Private Sub OnNationalIndChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnNationalIndChanged()
    End Sub
    Partial Private Sub OnftpStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnftpStatusIdChanged()
    End Sub
    Partial Private Sub OnftpDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnftpDtChanged()
    End Sub
    Partial Private Sub OnIndexDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnIndexDtChanged()
    End Sub
    Partial Private Sub OnIndexedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIndexedByIdChanged()
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPStatusIdChanged()
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPDtChanged()
    End Sub
    Partial Private Sub OnRemoteEntryImageForceFTPRetransferChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnRemoteEntryImageForceFTPRetransferChanged()
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPQueueInsertDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRemoteEntryImageFTPQueueInsertDtChanged()
    End Sub
    Partial Private Sub OnSPReviewStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSPReviewStatusIdChanged()
    End Sub
    Partial Private Sub OnEntryIndChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnEntryIndChanged()
    End Sub
    Partial Private Sub OnParentVehicleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentVehicleIdChanged()
    End Sub
    Partial Private Sub OnBodyTextChanging(value As String)
    End Sub
    Partial Private Sub OnBodyTextChanged()
    End Sub
    Partial Private Sub OnBodyHTMLChanging(value As String)
    End Sub
    Partial Private Sub OnBodyHTMLChanged()
    End Sub
    Partial Private Sub OnSiteIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteIdChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnReQCDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReQCDtChanged()
    End Sub
    Partial Private Sub OnReQCedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReQCedByIdChanged()
    End Sub
    Partial Private Sub OnFilterMatchesChanging(value As String)
    End Sub
    Partial Private Sub OnFilterMatchesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyerAddresses = New EntitySet(Of chubFlyerAddress)(AddressOf Me.attach_chubFlyerAddresses, AddressOf Me.detach_chubFlyerAddresses)
		Me._Pages = New EntitySet(Of Page)(AddressOf Me.attach_Pages, AddressOf Me.detach_Pages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VehicleId() As Integer
		Get
			Return Me._VehicleId
		End Get
		Set
			If ((Me._VehicleId = value)  _
						= false) Then
				Me.OnVehicleIdChanging(value)
				Me.SendPropertyChanging
				Me._VehicleId = value
				Me.SendPropertyChanged("VehicleId")
				Me.OnVehicleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvelopeId", DbType:="Int")>  _
	Public Property EnvelopeId() As System.Nullable(Of Integer)
		Get
			Return Me._EnvelopeId
		End Get
		Set
			If (Me._EnvelopeId.Equals(value) = false) Then
				Me.OnEnvelopeIdChanging(value)
				Me.SendPropertyChanging
				Me._EnvelopeId = value
				Me.SendPropertyChanged("EnvelopeId")
				Me.OnEnvelopeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetId", DbType:="Int")>  _
	Public Property RetId() As System.Nullable(Of Integer)
		Get
			Return Me._RetId
		End Get
		Set
			If (Me._RetId.Equals(value) = false) Then
				Me.OnRetIdChanging(value)
				Me.SendPropertyChanging
				Me._RetId = value
				Me.SendPropertyChanged("RetId")
				Me.OnRetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MktId", DbType:="Int")>  _
	Public Property MktId() As System.Nullable(Of Integer)
		Get
			Return Me._MktId
		End Get
		Set
			If (Me._MktId.Equals(value) = false) Then
				Me.OnMktIdChanging(value)
				Me.SendPropertyChanging
				Me._MktId = value
				Me.SendPropertyChanged("MktId")
				Me.OnMktIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BreakDt", DbType:="DateTime")>  _
	Public Property BreakDt() As System.Nullable(Of Date)
		Get
			Return Me._BreakDt
		End Get
		Set
			If (Me._BreakDt.Equals(value) = false) Then
				Me.OnBreakDtChanging(value)
				Me.SendPropertyChanging
				Me._BreakDt = value
				Me.SendPropertyChanged("BreakDt")
				Me.OnBreakDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDt", DbType:="DateTime")>  _
	Public Property StartDt() As System.Nullable(Of Date)
		Get
			Return Me._StartDt
		End Get
		Set
			If (Me._StartDt.Equals(value) = false) Then
				Me.OnStartDtChanging(value)
				Me.SendPropertyChanging
				Me._StartDt = value
				Me.SendPropertyChanged("StartDt")
				Me.OnStartDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDt", DbType:="DateTime")>  _
	Public Property EndDt() As System.Nullable(Of Date)
		Get
			Return Me._EndDt
		End Get
		Set
			If (Me._EndDt.Equals(value) = false) Then
				Me.OnEndDtChanging(value)
				Me.SendPropertyChanging
				Me._EndDt = value
				Me.SendPropertyChanged("EndDt")
				Me.OnEndDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
	Public Property TypeId() As System.Nullable(Of Integer)
		Get
			Return Me._TypeId
		End Get
		Set
			If (Me._TypeId.Equals(value) = false) Then
				Me.OnTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeId = value
				Me.SendPropertyChanged("TypeId")
				Me.OnTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LanguageId", DbType:="Int")>  _
	Public Property LanguageId() As System.Nullable(Of Integer)
		Get
			Return Me._LanguageId
		End Get
		Set
			If (Me._LanguageId.Equals(value) = false) Then
				Me.OnLanguageIdChanging(value)
				Me.SendPropertyChanging
				Me._LanguageId = value
				Me.SendPropertyChanged("LanguageId")
				Me.OnLanguageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventId", DbType:="Int")>  _
	Public Property EventId() As System.Nullable(Of Integer)
		Get
			Return Me._EventId
		End Get
		Set
			If (Me._EventId.Equals(value) = false) Then
				Me.OnEventIdChanging(value)
				Me.SendPropertyChanging
				Me._EventId = value
				Me.SendPropertyChanged("EventId")
				Me.OnEventIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThemeId", DbType:="Int")>  _
	Public Property ThemeId() As System.Nullable(Of Integer)
		Get
			Return Me._ThemeId
		End Get
		Set
			If (Me._ThemeId.Equals(value) = false) Then
				Me.OnThemeIdChanging(value)
				Me.SendPropertyChanging
				Me._ThemeId = value
				Me.SendPropertyChanged("ThemeId")
				Me.OnThemeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MediaId", DbType:="Int")>  _
	Public Property MediaId() As System.Nullable(Of Integer)
		Get
			Return Me._MediaId
		End Get
		Set
			If (Me._MediaId.Equals(value) = false) Then
				Me.OnMediaIdChanging(value)
				Me.SendPropertyChanging
				Me._MediaId = value
				Me.SendPropertyChanged("MediaId")
				Me.OnMediaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublicationId", DbType:="Int")>  _
	Public Property PublicationId() As System.Nullable(Of Integer)
		Get
			Return Me._PublicationId
		End Get
		Set
			If (Me._PublicationId.Equals(value) = false) Then
				Me.OnPublicationIdChanging(value)
				Me.SendPropertyChanging
				Me._PublicationId = value
				Me.SendPropertyChanged("PublicationId")
				Me.OnPublicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlashInd", DbType:="TinyInt")>  _
	Public Property FlashInd() As System.Nullable(Of Byte)
		Get
			Return Me._FlashInd
		End Get
		Set
			If (Me._FlashInd.Equals(value) = false) Then
				Me.OnFlashIndChanging(value)
				Me.SendPropertyChanging
				Me._FlashInd = value
				Me.SendPropertyChanged("FlashInd")
				Me.OnFlashIndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDt", DbType:="DateTime")>  _
	Public Property CreateDt() As System.Nullable(Of Date)
		Get
			Return Me._CreateDt
		End Get
		Set
			If (Me._CreateDt.Equals(value) = false) Then
				Me.OnCreateDtChanging(value)
				Me.SendPropertyChanging
				Me._CreateDt = value
				Me.SendPropertyChanged("CreateDt")
				Me.OnCreateDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedById", DbType:="Int")>  _
	Public Property CreatedById() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedById
		End Get
		Set
			If (Me._CreatedById.Equals(value) = false) Then
				Me.OnCreatedByIdChanging(value)
				Me.SendPropertyChanging
				Me._CreatedById = value
				Me.SendPropertyChanged("CreatedById")
				Me.OnCreatedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanDt", DbType:="DateTime")>  _
	Public Property ScanDt() As System.Nullable(Of Date)
		Get
			Return Me._ScanDt
		End Get
		Set
			If (Me._ScanDt.Equals(value) = false) Then
				Me.OnScanDtChanging(value)
				Me.SendPropertyChanging
				Me._ScanDt = value
				Me.SendPropertyChanged("ScanDt")
				Me.OnScanDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScannedById", DbType:="Int")>  _
	Public Property ScannedById() As System.Nullable(Of Integer)
		Get
			Return Me._ScannedById
		End Get
		Set
			If (Me._ScannedById.Equals(value) = false) Then
				Me.OnScannedByIdChanging(value)
				Me.SendPropertyChanging
				Me._ScannedById = value
				Me.SendPropertyChanged("ScannedById")
				Me.OnScannedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCDt", DbType:="DateTime")>  _
	Public Property QCDt() As System.Nullable(Of Date)
		Get
			Return Me._QCDt
		End Get
		Set
			If (Me._QCDt.Equals(value) = false) Then
				Me.OnQCDtChanging(value)
				Me.SendPropertyChanging
				Me._QCDt = value
				Me.SendPropertyChanged("QCDt")
				Me.OnQCDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCedById", DbType:="Int")>  _
	Public Property QCedById() As System.Nullable(Of Integer)
		Get
			Return Me._QCedById
		End Get
		Set
			If (Me._QCedById.Equals(value) = false) Then
				Me.OnQCedByIdChanging(value)
				Me.SendPropertyChanging
				Me._QCedById = value
				Me.SendPropertyChanged("QCedById")
				Me.OnQCedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyId", DbType:="Int")>  _
	Public Property FamilyId() As System.Nullable(Of Integer)
		Get
			Return Me._FamilyId
		End Get
		Set
			If (Me._FamilyId.Equals(value) = false) Then
				Me.OnFamilyIdChanging(value)
				Me.SendPropertyChanging
				Me._FamilyId = value
				Me.SendPropertyChanged("FamilyId")
				Me.OnFamilyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponInd", DbType:="TinyInt")>  _
	Public Property CouponInd() As System.Nullable(Of Byte)
		Get
			Return Me._CouponInd
		End Get
		Set
			If (Me._CouponInd.Equals(value) = false) Then
				Me.OnCouponIndChanging(value)
				Me.SendPropertyChanging
				Me._CouponInd = value
				Me.SendPropertyChanged("CouponInd")
				Me.OnCouponIndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateSizedDt", DbType:="DateTime")>  _
	Public Property CreateSizedDt() As System.Nullable(Of Date)
		Get
			Return Me._CreateSizedDt
		End Get
		Set
			If (Me._CreateSizedDt.Equals(value) = false) Then
				Me.OnCreateSizedDtChanging(value)
				Me.SendPropertyChanging
				Me._CreateSizedDt = value
				Me.SendPropertyChanged("CreateSizedDt")
				Me.OnCreateSizedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckInPageCount", DbType:="Int")>  _
	Public Property CheckInPageCount() As System.Nullable(Of Integer)
		Get
			Return Me._CheckInPageCount
		End Get
		Set
			If (Me._CheckInPageCount.Equals(value) = false) Then
				Me.OnCheckInPageCountChanging(value)
				Me.SendPropertyChanging
				Me._CheckInPageCount = value
				Me.SendPropertyChanged("CheckInPageCount")
				Me.OnCheckInPageCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusID", DbType:="Int")>  _
	Public Property StatusID() As System.Nullable(Of Integer)
		Get
			Return Me._StatusID
		End Get
		Set
			If (Me._StatusID.Equals(value) = false) Then
				Me.OnStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._StatusID = value
				Me.SendPropertyChanged("StatusID")
				Me.OnStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SenderId", DbType:="Int")>  _
	Public Property SenderId() As System.Nullable(Of Integer)
		Get
			Return Me._SenderId
		End Get
		Set
			If (Me._SenderId.Equals(value) = false) Then
				Me.OnSenderIdChanging(value)
				Me.SendPropertyChanging
				Me._SenderId = value
				Me.SendPropertyChanged("SenderId")
				Me.OnSenderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PullDt", DbType:="DateTime")>  _
	Public Property PullDt() As System.Nullable(Of Date)
		Get
			Return Me._PullDt
		End Get
		Set
			If (Me._PullDt.Equals(value) = false) Then
				Me.OnPullDtChanging(value)
				Me.SendPropertyChanging
				Me._PullDt = value
				Me.SendPropertyChanged("PullDt")
				Me.OnPullDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PulledById", DbType:="Int")>  _
	Public Property PulledById() As System.Nullable(Of Integer)
		Get
			Return Me._PulledById
		End Get
		Set
			If (Me._PulledById.Equals(value) = false) Then
				Me.OnPulledByIdChanging(value)
				Me.SendPropertyChanging
				Me._PulledById = value
				Me.SendPropertyChanged("PulledById")
				Me.OnPulledByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PullPageCount", DbType:="Int")>  _
	Public Property PullPageCount() As System.Nullable(Of Integer)
		Get
			Return Me._PullPageCount
		End Get
		Set
			If (Me._PullPageCount.Equals(value) = false) Then
				Me.OnPullPageCountChanging(value)
				Me.SendPropertyChanging
				Me._PullPageCount = value
				Me.SendPropertyChanged("PullPageCount")
				Me.OnPullPageCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Float")>  _
	Public Property Weight() As System.Nullable(Of Double)
		Get
			Return Me._Weight
		End Get
		Set
			If (Me._Weight.Equals(value) = false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PullQCedById", DbType:="Int")>  _
	Public Property PullQCedById() As System.Nullable(Of Integer)
		Get
			Return Me._PullQCedById
		End Get
		Set
			If (Me._PullQCedById.Equals(value) = false) Then
				Me.OnPullQCedByIdChanging(value)
				Me.SendPropertyChanging
				Me._PullQCedById = value
				Me.SendPropertyChanged("PullQCedById")
				Me.OnPullQCedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PullQCDt", DbType:="DateTime")>  _
	Public Property PullQCDt() As System.Nullable(Of Date)
		Get
			Return Me._PullQCDt
		End Get
		Set
			If (Me._PullQCDt.Equals(value) = false) Then
				Me.OnPullQCDtChanging(value)
				Me.SendPropertyChanging
				Me._PullQCDt = value
				Me.SendPropertyChanged("PullQCDt")
				Me.OnPullQCDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormName", DbType:="VarChar(100)")>  _
	Public Property FormName() As String
		Get
			Return Me._FormName
		End Get
		Set
			If (String.Equals(Me._FormName, value) = false) Then
				Me.OnFormNameChanging(value)
				Me.SendPropertyChanging
				Me._FormName = value
				Me.SendPropertyChanged("FormName")
				Me.OnFormNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckInOccurrences", DbType:="Int")>  _
	Public Property CheckInOccurrences() As System.Nullable(Of Integer)
		Get
			Return Me._CheckInOccurrences
		End Get
		Set
			If (Me._CheckInOccurrences.Equals(value) = false) Then
				Me.OnCheckInOccurrencesChanging(value)
				Me.SendPropertyChanging
				Me._CheckInOccurrences = value
				Me.SendPropertyChanged("CheckInOccurrences")
				Me.OnCheckInOccurrencesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NationalInd", DbType:="TinyInt")>  _
	Public Property NationalInd() As System.Nullable(Of Byte)
		Get
			Return Me._NationalInd
		End Get
		Set
			If (Me._NationalInd.Equals(value) = false) Then
				Me.OnNationalIndChanging(value)
				Me.SendPropertyChanging
				Me._NationalInd = value
				Me.SendPropertyChanged("NationalInd")
				Me.OnNationalIndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ftpStatusId", DbType:="Int")>  _
	Public Property ftpStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._ftpStatusId
		End Get
		Set
			If (Me._ftpStatusId.Equals(value) = false) Then
				Me.OnftpStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._ftpStatusId = value
				Me.SendPropertyChanged("ftpStatusId")
				Me.OnftpStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ftpDt", DbType:="DateTime")>  _
	Public Property ftpDt() As System.Nullable(Of Date)
		Get
			Return Me._ftpDt
		End Get
		Set
			If (Me._ftpDt.Equals(value) = false) Then
				Me.OnftpDtChanging(value)
				Me.SendPropertyChanging
				Me._ftpDt = value
				Me.SendPropertyChanged("ftpDt")
				Me.OnftpDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndexDt", DbType:="DateTime")>  _
	Public Property IndexDt() As System.Nullable(Of Date)
		Get
			Return Me._IndexDt
		End Get
		Set
			If (Me._IndexDt.Equals(value) = false) Then
				Me.OnIndexDtChanging(value)
				Me.SendPropertyChanging
				Me._IndexDt = value
				Me.SendPropertyChanged("IndexDt")
				Me.OnIndexDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndexedById", DbType:="Int")>  _
	Public Property IndexedById() As System.Nullable(Of Integer)
		Get
			Return Me._IndexedById
		End Get
		Set
			If (Me._IndexedById.Equals(value) = false) Then
				Me.OnIndexedByIdChanging(value)
				Me.SendPropertyChanging
				Me._IndexedById = value
				Me.SendPropertyChanged("IndexedById")
				Me.OnIndexedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteEntryImageFTPStatusId", DbType:="Int")>  _
	Public Property RemoteEntryImageFTPStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._RemoteEntryImageFTPStatusId
		End Get
		Set
			If (Me._RemoteEntryImageFTPStatusId.Equals(value) = false) Then
				Me.OnRemoteEntryImageFTPStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._RemoteEntryImageFTPStatusId = value
				Me.SendPropertyChanged("RemoteEntryImageFTPStatusId")
				Me.OnRemoteEntryImageFTPStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteEntryImageFTPDt", DbType:="DateTime")>  _
	Public Property RemoteEntryImageFTPDt() As System.Nullable(Of Date)
		Get
			Return Me._RemoteEntryImageFTPDt
		End Get
		Set
			If (Me._RemoteEntryImageFTPDt.Equals(value) = false) Then
				Me.OnRemoteEntryImageFTPDtChanging(value)
				Me.SendPropertyChanging
				Me._RemoteEntryImageFTPDt = value
				Me.SendPropertyChanged("RemoteEntryImageFTPDt")
				Me.OnRemoteEntryImageFTPDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteEntryImageForceFTPRetransfer", DbType:="TinyInt")>  _
	Public Property RemoteEntryImageForceFTPRetransfer() As System.Nullable(Of Byte)
		Get
			Return Me._RemoteEntryImageForceFTPRetransfer
		End Get
		Set
			If (Me._RemoteEntryImageForceFTPRetransfer.Equals(value) = false) Then
				Me.OnRemoteEntryImageForceFTPRetransferChanging(value)
				Me.SendPropertyChanging
				Me._RemoteEntryImageForceFTPRetransfer = value
				Me.SendPropertyChanged("RemoteEntryImageForceFTPRetransfer")
				Me.OnRemoteEntryImageForceFTPRetransferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteEntryImageFTPQueueInsertDt", DbType:="DateTime")>  _
	Public Property RemoteEntryImageFTPQueueInsertDt() As System.Nullable(Of Date)
		Get
			Return Me._RemoteEntryImageFTPQueueInsertDt
		End Get
		Set
			If (Me._RemoteEntryImageFTPQueueInsertDt.Equals(value) = false) Then
				Me.OnRemoteEntryImageFTPQueueInsertDtChanging(value)
				Me.SendPropertyChanging
				Me._RemoteEntryImageFTPQueueInsertDt = value
				Me.SendPropertyChanged("RemoteEntryImageFTPQueueInsertDt")
				Me.OnRemoteEntryImageFTPQueueInsertDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPReviewStatusId", DbType:="Int")>  _
	Public Property SPReviewStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._SPReviewStatusId
		End Get
		Set
			If (Me._SPReviewStatusId.Equals(value) = false) Then
				Me.OnSPReviewStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._SPReviewStatusId = value
				Me.SendPropertyChanged("SPReviewStatusId")
				Me.OnSPReviewStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntryInd", DbType:="TinyInt")>  _
	Public Property EntryInd() As System.Nullable(Of Byte)
		Get
			Return Me._EntryInd
		End Get
		Set
			If (Me._EntryInd.Equals(value) = false) Then
				Me.OnEntryIndChanging(value)
				Me.SendPropertyChanging
				Me._EntryInd = value
				Me.SendPropertyChanged("EntryInd")
				Me.OnEntryIndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentVehicleId", DbType:="Int")>  _
	Public Property ParentVehicleId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentVehicleId
		End Get
		Set
			If (Me._ParentVehicleId.Equals(value) = false) Then
				Me.OnParentVehicleIdChanging(value)
				Me.SendPropertyChanging
				Me._ParentVehicleId = value
				Me.SendPropertyChanged("ParentVehicleId")
				Me.OnParentVehicleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyText", DbType:="VarChar(MAX)")>  _
	Public Property BodyText() As String
		Get
			Return Me._BodyText
		End Get
		Set
			If (String.Equals(Me._BodyText, value) = false) Then
				Me.OnBodyTextChanging(value)
				Me.SendPropertyChanging
				Me._BodyText = value
				Me.SendPropertyChanged("BodyText")
				Me.OnBodyTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyHTML", DbType:="VarChar(MAX)")>  _
	Public Property BodyHTML() As String
		Get
			Return Me._BodyHTML
		End Get
		Set
			If (String.Equals(Me._BodyHTML, value) = false) Then
				Me.OnBodyHTMLChanging(value)
				Me.SendPropertyChanging
				Me._BodyHTML = value
				Me.SendPropertyChanged("BodyHTML")
				Me.OnBodyHTMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteId", DbType:="Int")>  _
	Public Property SiteId() As System.Nullable(Of Integer)
		Get
			Return Me._SiteId
		End Get
		Set
			If (Me._SiteId.Equals(value) = false) Then
				Me.OnSiteIdChanging(value)
				Me.SendPropertyChanging
				Me._SiteId = value
				Me.SendPropertyChanged("SiteId")
				Me.OnSiteIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="VarChar(500)")>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReQCDt", DbType:="DateTime")>  _
	Public Property ReQCDt() As System.Nullable(Of Date)
		Get
			Return Me._ReQCDt
		End Get
		Set
			If (Me._ReQCDt.Equals(value) = false) Then
				Me.OnReQCDtChanging(value)
				Me.SendPropertyChanging
				Me._ReQCDt = value
				Me.SendPropertyChanged("ReQCDt")
				Me.OnReQCDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReQCedById", DbType:="Int")>  _
	Public Property ReQCedById() As System.Nullable(Of Integer)
		Get
			Return Me._ReQCedById
		End Get
		Set
			If (Me._ReQCedById.Equals(value) = false) Then
				Me.OnReQCedByIdChanging(value)
				Me.SendPropertyChanging
				Me._ReQCedById = value
				Me.SendPropertyChanged("ReQCedById")
				Me.OnReQCedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FilterMatches", DbType:="VarChar(100)")>  _
	Public Property FilterMatches() As String
		Get
			Return Me._FilterMatches
		End Get
		Set
			If (String.Equals(Me._FilterMatches, value) = false) Then
				Me.OnFilterMatchesChanging(value)
				Me.SendPropertyChanging
				Me._FilterMatches = value
				Me.SendPropertyChanged("FilterMatches")
				Me.OnFilterMatchesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehicle_chubFlyerAddress", Storage:="_chubFlyerAddresses", ThisKey:="VehicleId", OtherKey:="VehicleId")>  _
	Public Property chubFlyerAddresses() As EntitySet(Of chubFlyerAddress)
		Get
			Return Me._chubFlyerAddresses
		End Get
		Set
			Me._chubFlyerAddresses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehicle_Page", Storage:="_Pages", ThisKey:="VehicleId", OtherKey:="VehicleId")>  _
	Public Property Pages() As EntitySet(Of Page)
		Get
			Return Me._Pages
		End Get
		Set
			Me._Pages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_chubFlyerAddresses(ByVal entity As chubFlyerAddress)
		Me.SendPropertyChanging
		entity.Vehicle = Me
	End Sub
	
	Private Sub detach_chubFlyerAddresses(ByVal entity As chubFlyerAddress)
		Me.SendPropertyChanging
		entity.Vehicle = Nothing
	End Sub
	
	Private Sub attach_Pages(ByVal entity As Page)
		Me.SendPropertyChanging
		entity.Vehicle = Me
	End Sub
	
	Private Sub detach_Pages(ByVal entity As Page)
		Me.SendPropertyChanging
		entity.Vehicle = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubPageTile")>  _
Partial Public Class chubPageTile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PageId As Integer
	
	Private _TileId As Integer
	
	Private _PositionLeft As Integer
	
	Private _PositionTop As Integer
	
	Private _arbitraryId As Integer
	
	Private _Page As EntityRef(Of Page)
	
	Private _chubTile As EntityRef(Of chubTile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPageIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageIdChanged()
    End Sub
    Partial Private Sub OnTileIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTileIdChanged()
    End Sub
    Partial Private Sub OnPositionLeftChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionLeftChanged()
    End Sub
    Partial Private Sub OnPositionTopChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionTopChanged()
    End Sub
    Partial Private Sub OnarbitraryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnarbitraryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Page = CType(Nothing, EntityRef(Of Page))
		Me._chubTile = CType(Nothing, EntityRef(Of chubTile))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageId", DbType:="Int NOT NULL")>  _
	Public Property PageId() As Integer
		Get
			Return Me._PageId
		End Get
		Set
			If ((Me._PageId = value)  _
						= false) Then
				If Me._Page.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPageIdChanging(value)
				Me.SendPropertyChanging
				Me._PageId = value
				Me.SendPropertyChanged("PageId")
				Me.OnPageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TileId", DbType:="Int NOT NULL")>  _
	Public Property TileId() As Integer
		Get
			Return Me._TileId
		End Get
		Set
			If ((Me._TileId = value)  _
						= false) Then
				If Me._chubTile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTileIdChanging(value)
				Me.SendPropertyChanging
				Me._TileId = value
				Me.SendPropertyChanged("TileId")
				Me.OnTileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionLeft", DbType:="Int NOT NULL")>  _
	Public Property PositionLeft() As Integer
		Get
			Return Me._PositionLeft
		End Get
		Set
			If ((Me._PositionLeft = value)  _
						= false) Then
				Me.OnPositionLeftChanging(value)
				Me.SendPropertyChanging
				Me._PositionLeft = value
				Me.SendPropertyChanged("PositionLeft")
				Me.OnPositionLeftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionTop", DbType:="Int NOT NULL")>  _
	Public Property PositionTop() As Integer
		Get
			Return Me._PositionTop
		End Get
		Set
			If ((Me._PositionTop = value)  _
						= false) Then
				Me.OnPositionTopChanging(value)
				Me.SendPropertyChanging
				Me._PositionTop = value
				Me.SendPropertyChanged("PositionTop")
				Me.OnPositionTopChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arbitraryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property arbitraryId() As Integer
		Get
			Return Me._arbitraryId
		End Get
		Set
			If ((Me._arbitraryId = value)  _
						= false) Then
				Me.OnarbitraryIdChanging(value)
				Me.SendPropertyChanging
				Me._arbitraryId = value
				Me.SendPropertyChanged("arbitraryId")
				Me.OnarbitraryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Page_chubPageTile", Storage:="_Page", ThisKey:="PageId", OtherKey:="PageId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Page() As Page
		Get
			Return Me._Page.Entity
		End Get
		Set
			Dim previousValue As Page = Me._Page.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Page.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Page.Entity = Nothing
					previousValue.chubPageTiles.Remove(Me)
				End If
				Me._Page.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubPageTiles.Add(Me)
					Me._PageId = value.PageId
				Else
					Me._PageId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Page")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubTile_chubPageTile", Storage:="_chubTile", ThisKey:="TileId", OtherKey:="TileId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property chubTile() As chubTile
		Get
			Return Me._chubTile.Entity
		End Get
		Set
			Dim previousValue As chubTile = Me._chubTile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._chubTile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._chubTile.Entity = Nothing
					previousValue.chubPageTiles.Remove(Me)
				End If
				Me._chubTile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubPageTiles.Add(Me)
					Me._TileId = value.TileId
				Else
					Me._TileId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("chubTile")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.chubFlyerPage")>  _
Partial Public Class chubFlyerPage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlyerId As Integer
	
	Private _PageId As Integer
	
	Private _PageNum As Integer
	
	Private _PageName As String
	
	Private _chubFlyer As EntityRef(Of chubFlyer)
	
	Private _Page As EntityRef(Of Page)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlyerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlyerIdChanged()
    End Sub
    Partial Private Sub OnPageIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageIdChanged()
    End Sub
    Partial Private Sub OnPageNumChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumChanged()
    End Sub
    Partial Private Sub OnPageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPageNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._chubFlyer = CType(Nothing, EntityRef(Of chubFlyer))
		Me._Page = CType(Nothing, EntityRef(Of Page))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlyerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FlyerId() As Integer
		Get
			Return Me._FlyerId
		End Get
		Set
			If ((Me._FlyerId = value)  _
						= false) Then
				If Me._chubFlyer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlyerIdChanging(value)
				Me.SendPropertyChanging
				Me._FlyerId = value
				Me.SendPropertyChanged("FlyerId")
				Me.OnFlyerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageId() As Integer
		Get
			Return Me._PageId
		End Get
		Set
			If ((Me._PageId = value)  _
						= false) Then
				If Me._Page.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPageIdChanging(value)
				Me.SendPropertyChanging
				Me._PageId = value
				Me.SendPropertyChanged("PageId")
				Me.OnPageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNum", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageNum() As Integer
		Get
			Return Me._PageNum
		End Get
		Set
			If ((Me._PageNum = value)  _
						= false) Then
				Me.OnPageNumChanging(value)
				Me.SendPropertyChanging
				Me._PageNum = value
				Me.SendPropertyChanged("PageNum")
				Me.OnPageNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageName", DbType:="VarChar(50)")>  _
	Public Property PageName() As String
		Get
			Return Me._PageName
		End Get
		Set
			If (String.Equals(Me._PageName, value) = false) Then
				Me.OnPageNameChanging(value)
				Me.SendPropertyChanging
				Me._PageName = value
				Me.SendPropertyChanged("PageName")
				Me.OnPageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="chubFlyer_chubFlyerPage", Storage:="_chubFlyer", ThisKey:="FlyerId", OtherKey:="FlyerId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property chubFlyer() As chubFlyer
		Get
			Return Me._chubFlyer.Entity
		End Get
		Set
			Dim previousValue As chubFlyer = Me._chubFlyer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._chubFlyer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._chubFlyer.Entity = Nothing
					previousValue.chubFlyerPages.Remove(Me)
				End If
				Me._chubFlyer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerPages.Add(Me)
					Me._FlyerId = value.FlyerId
				Else
					Me._FlyerId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("chubFlyer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Page_chubFlyerPage", Storage:="_Page", ThisKey:="PageId", OtherKey:="PageId", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Page() As Page
		Get
			Return Me._Page.Entity
		End Get
		Set
			Dim previousValue As Page = Me._Page.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Page.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Page.Entity = Nothing
					previousValue.chubFlyerPages.Remove(Me)
				End If
				Me._Page.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.chubFlyerPages.Add(Me)
					Me._PageId = value.PageId
				Else
					Me._PageId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Page")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
