'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3634
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DupCheckDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DupCheckDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablePage As PageDataTable
    
    Private tableUtility As UtilityDataTable
    
    Private tablemt_proc_GetPossibleDuplicateFSI As mt_proc_GetPossibleDuplicateFSIDataTable
    
    Private tablemt_proc_GetPossibleDuplicateNonFSIROP As mt_proc_GetPossibleDuplicateNonFSIROPDataTable
    
    Private tablemt_proc_GetPossibleDuplicateROP As mt_proc_GetPossibleDuplicateROPDataTable
    
    Private tableDupFormLog As DupFormLogDataTable
    
    Private tableDupCheckLog As DupCheckLogDataTable
    
    Private tableDupCheckResultsLog As DupCheckResultsLogDataTable
    
    Private relationFK_DupCheckLog_DupFormLog As Global.System.Data.DataRelation
    
    Private relationFK_DupCheckResultsLog_DupCheckLog As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Page")) Is Nothing) Then
                MyBase.Tables.Add(New PageDataTable(ds.Tables("Page")))
            End If
            If (Not (ds.Tables("Utility")) Is Nothing) Then
                MyBase.Tables.Add(New UtilityDataTable(ds.Tables("Utility")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateFSI")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateFSIDataTable(ds.Tables("mt_proc_GetPossibleDuplicateFSI")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateNonFSIROP")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateNonFSIROPDataTable(ds.Tables("mt_proc_GetPossibleDuplicateNonFSIROP")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateROP")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateROPDataTable(ds.Tables("mt_proc_GetPossibleDuplicateROP")))
            End If
            If (Not (ds.Tables("DupFormLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupFormLogDataTable(ds.Tables("DupFormLog")))
            End If
            If (Not (ds.Tables("DupCheckLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupCheckLogDataTable(ds.Tables("DupCheckLog")))
            End If
            If (Not (ds.Tables("DupCheckResultsLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupCheckResultsLogDataTable(ds.Tables("DupCheckResultsLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Page() As PageDataTable
        Get
            Return Me.tablePage
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Utility() As UtilityDataTable
        Get
            Return Me.tableUtility
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mt_proc_GetPossibleDuplicateFSI() As mt_proc_GetPossibleDuplicateFSIDataTable
        Get
            Return Me.tablemt_proc_GetPossibleDuplicateFSI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mt_proc_GetPossibleDuplicateNonFSIROP() As mt_proc_GetPossibleDuplicateNonFSIROPDataTable
        Get
            Return Me.tablemt_proc_GetPossibleDuplicateNonFSIROP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mt_proc_GetPossibleDuplicateROP() As mt_proc_GetPossibleDuplicateROPDataTable
        Get
            Return Me.tablemt_proc_GetPossibleDuplicateROP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DupFormLog() As DupFormLogDataTable
        Get
            Return Me.tableDupFormLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DupCheckLog() As DupCheckLogDataTable
        Get
            Return Me.tableDupCheckLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DupCheckResultsLog() As DupCheckResultsLogDataTable
        Get
            Return Me.tableDupCheckResultsLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DupCheckDataSet = CType(MyBase.Clone,DupCheckDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Page")) Is Nothing) Then
                MyBase.Tables.Add(New PageDataTable(ds.Tables("Page")))
            End If
            If (Not (ds.Tables("Utility")) Is Nothing) Then
                MyBase.Tables.Add(New UtilityDataTable(ds.Tables("Utility")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateFSI")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateFSIDataTable(ds.Tables("mt_proc_GetPossibleDuplicateFSI")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateNonFSIROP")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateNonFSIROPDataTable(ds.Tables("mt_proc_GetPossibleDuplicateNonFSIROP")))
            End If
            If (Not (ds.Tables("mt_proc_GetPossibleDuplicateROP")) Is Nothing) Then
                MyBase.Tables.Add(New mt_proc_GetPossibleDuplicateROPDataTable(ds.Tables("mt_proc_GetPossibleDuplicateROP")))
            End If
            If (Not (ds.Tables("DupFormLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupFormLogDataTable(ds.Tables("DupFormLog")))
            End If
            If (Not (ds.Tables("DupCheckLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupCheckLogDataTable(ds.Tables("DupCheckLog")))
            End If
            If (Not (ds.Tables("DupCheckResultsLog")) Is Nothing) Then
                MyBase.Tables.Add(New DupCheckResultsLogDataTable(ds.Tables("DupCheckResultsLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePage = CType(MyBase.Tables("Page"),PageDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePage) Is Nothing) Then
                Me.tablePage.InitVars
            End If
        End If
        Me.tableUtility = CType(MyBase.Tables("Utility"),UtilityDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUtility) Is Nothing) Then
                Me.tableUtility.InitVars
            End If
        End If
        Me.tablemt_proc_GetPossibleDuplicateFSI = CType(MyBase.Tables("mt_proc_GetPossibleDuplicateFSI"),mt_proc_GetPossibleDuplicateFSIDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemt_proc_GetPossibleDuplicateFSI) Is Nothing) Then
                Me.tablemt_proc_GetPossibleDuplicateFSI.InitVars
            End If
        End If
        Me.tablemt_proc_GetPossibleDuplicateNonFSIROP = CType(MyBase.Tables("mt_proc_GetPossibleDuplicateNonFSIROP"),mt_proc_GetPossibleDuplicateNonFSIROPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemt_proc_GetPossibleDuplicateNonFSIROP) Is Nothing) Then
                Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.InitVars
            End If
        End If
        Me.tablemt_proc_GetPossibleDuplicateROP = CType(MyBase.Tables("mt_proc_GetPossibleDuplicateROP"),mt_proc_GetPossibleDuplicateROPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemt_proc_GetPossibleDuplicateROP) Is Nothing) Then
                Me.tablemt_proc_GetPossibleDuplicateROP.InitVars
            End If
        End If
        Me.tableDupFormLog = CType(MyBase.Tables("DupFormLog"),DupFormLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDupFormLog) Is Nothing) Then
                Me.tableDupFormLog.InitVars
            End If
        End If
        Me.tableDupCheckLog = CType(MyBase.Tables("DupCheckLog"),DupCheckLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDupCheckLog) Is Nothing) Then
                Me.tableDupCheckLog.InitVars
            End If
        End If
        Me.tableDupCheckResultsLog = CType(MyBase.Tables("DupCheckResultsLog"),DupCheckResultsLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDupCheckResultsLog) Is Nothing) Then
                Me.tableDupCheckResultsLog.InitVars
            End If
        End If
        Me.relationFK_DupCheckLog_DupFormLog = Me.Relations("FK_DupCheckLog_DupFormLog")
        Me.relationFK_DupCheckResultsLog_DupCheckLog = Me.Relations("FK_DupCheckResultsLog_DupCheckLog")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DupCheckDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DupCheckDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePage = New PageDataTable
        MyBase.Tables.Add(Me.tablePage)
        Me.tableUtility = New UtilityDataTable
        MyBase.Tables.Add(Me.tableUtility)
        Me.tablemt_proc_GetPossibleDuplicateFSI = New mt_proc_GetPossibleDuplicateFSIDataTable
        MyBase.Tables.Add(Me.tablemt_proc_GetPossibleDuplicateFSI)
        Me.tablemt_proc_GetPossibleDuplicateNonFSIROP = New mt_proc_GetPossibleDuplicateNonFSIROPDataTable
        MyBase.Tables.Add(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP)
        Me.tablemt_proc_GetPossibleDuplicateROP = New mt_proc_GetPossibleDuplicateROPDataTable
        MyBase.Tables.Add(Me.tablemt_proc_GetPossibleDuplicateROP)
        Me.tableDupFormLog = New DupFormLogDataTable
        MyBase.Tables.Add(Me.tableDupFormLog)
        Me.tableDupCheckLog = New DupCheckLogDataTable
        MyBase.Tables.Add(Me.tableDupCheckLog)
        Me.tableDupCheckResultsLog = New DupCheckResultsLogDataTable
        MyBase.Tables.Add(Me.tableDupCheckResultsLog)
        Me.relationFK_DupCheckLog_DupFormLog = New Global.System.Data.DataRelation("FK_DupCheckLog_DupFormLog", New Global.System.Data.DataColumn() {Me.tableDupFormLog.DupFormIdColumn}, New Global.System.Data.DataColumn() {Me.tableDupCheckLog.DupFormIdColumn}, false)
        Me.Relations.Add(Me.relationFK_DupCheckLog_DupFormLog)
        Me.relationFK_DupCheckResultsLog_DupCheckLog = New Global.System.Data.DataRelation("FK_DupCheckResultsLog_DupCheckLog", New Global.System.Data.DataColumn() {Me.tableDupCheckLog.DupCheckLogIdColumn}, New Global.System.Data.DataColumn() {Me.tableDupCheckResultsLog.DupCheckLogIdColumn}, false)
        Me.Relations.Add(Me.relationFK_DupCheckResultsLog_DupCheckLog)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePage() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUtility() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemt_proc_GetPossibleDuplicateFSI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemt_proc_GetPossibleDuplicateNonFSIROP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemt_proc_GetPossibleDuplicateROP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDupFormLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDupCheckLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDupCheckResultsLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DupCheckDataSet = New DupCheckDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PageRowChangeEventHandler(ByVal sender As Object, ByVal e As PageRowChangeEvent)
    
    Public Delegate Sub UtilityRowChangeEventHandler(ByVal sender As Object, ByVal e As UtilityRowChangeEvent)
    
    Public Delegate Sub mt_proc_GetPossibleDuplicateFSIRowChangeEventHandler(ByVal sender As Object, ByVal e As mt_proc_GetPossibleDuplicateFSIRowChangeEvent)
    
    Public Delegate Sub mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEventHandler(ByVal sender As Object, ByVal e As mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent)
    
    Public Delegate Sub mt_proc_GetPossibleDuplicateROPRowChangeEventHandler(ByVal sender As Object, ByVal e As mt_proc_GetPossibleDuplicateROPRowChangeEvent)
    
    Public Delegate Sub DupFormLogRowChangeEventHandler(ByVal sender As Object, ByVal e As DupFormLogRowChangeEvent)
    
    Public Delegate Sub DupCheckLogRowChangeEventHandler(ByVal sender As Object, ByVal e As DupCheckLogRowChangeEvent)
    
    Public Delegate Sub DupCheckResultsLogRowChangeEventHandler(ByVal sender As Object, ByVal e As DupCheckResultsLogRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PageDataTable
        Inherits Global.System.Data.TypedTableBase(Of PageRow)
        
        Private columnVehicleId As Global.System.Data.DataColumn
        
        Private columnPageId As Global.System.Data.DataColumn
        
        Private columnImageName As Global.System.Data.DataColumn
        
        Private columnPageTypeId As Global.System.Data.DataColumn
        
        Private columnReceivedOrder As Global.System.Data.DataColumn
        
        Private columnPageName As Global.System.Data.DataColumn
        
        Private columnPixelHieght As Global.System.Data.DataColumn
        
        Private columnPixelWidth As Global.System.Data.DataColumn
        
        Private columnSizeId As Global.System.Data.DataColumn
        
        Private columnSize As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Page"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImageName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageTypeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageTypeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PageNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPageName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PixelHieghtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPixelHieght
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PixelWidthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPixelWidth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSizeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PageRow
            Get
                Return CType(Me.Rows(index),PageRow)
            End Get
        End Property
        
        Public Event PageRowChanging As PageRowChangeEventHandler
        
        Public Event PageRowChanged As PageRowChangeEventHandler
        
        Public Event PageRowDeleting As PageRowChangeEventHandler
        
        Public Event PageRowDeleted As PageRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPageRow(ByVal row As PageRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPageRow(ByVal VehicleId As Integer, ByVal ImageName As String, ByVal PageTypeId As String, ByVal ReceivedOrder As Integer, ByVal PageName As String, ByVal PixelHieght As Integer, ByVal PixelWidth As Integer, ByVal SizeId As Integer, ByVal Size As String) As PageRow
            Dim rowPageRow As PageRow = CType(Me.NewRow,PageRow)
            Dim columnValuesArray() As Object = New Object() {VehicleId, Nothing, ImageName, PageTypeId, ReceivedOrder, PageName, PixelHieght, PixelWidth, SizeId, Size}
            rowPageRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPageRow)
            Return rowPageRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPageId(ByVal PageId As Integer) As PageRow
            Return CType(Me.Rows.Find(New Object() {PageId}),PageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PageDataTable = CType(MyBase.Clone,PageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PageDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVehicleId = MyBase.Columns("VehicleId")
            Me.columnPageId = MyBase.Columns("PageId")
            Me.columnImageName = MyBase.Columns("ImageName")
            Me.columnPageTypeId = MyBase.Columns("PageTypeId")
            Me.columnReceivedOrder = MyBase.Columns("ReceivedOrder")
            Me.columnPageName = MyBase.Columns("PageName")
            Me.columnPixelHieght = MyBase.Columns("PixelHieght")
            Me.columnPixelWidth = MyBase.Columns("PixelWidth")
            Me.columnSizeId = MyBase.Columns("SizeId")
            Me.columnSize = MyBase.Columns("Size")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVehicleId = New Global.System.Data.DataColumn("VehicleId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleId)
            Me.columnPageId = New Global.System.Data.DataColumn("PageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageId)
            Me.columnImageName = New Global.System.Data.DataColumn("ImageName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImageName)
            Me.columnPageTypeId = New Global.System.Data.DataColumn("PageTypeId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageTypeId)
            Me.columnReceivedOrder = New Global.System.Data.DataColumn("ReceivedOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedOrder)
            Me.columnPageName = New Global.System.Data.DataColumn("PageName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPageName)
            Me.columnPixelHieght = New Global.System.Data.DataColumn("PixelHieght", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPixelHieght)
            Me.columnPixelWidth = New Global.System.Data.DataColumn("PixelWidth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPixelWidth)
            Me.columnSizeId = New Global.System.Data.DataColumn("SizeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSizeId)
            Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPageId}, true))
            Me.columnPageId.AutoIncrement = true
            Me.columnPageId.AutoIncrementSeed = -1
            Me.columnPageId.AutoIncrementStep = -1
            Me.columnPageId.AllowDBNull = false
            Me.columnPageId.ReadOnly = true
            Me.columnPageId.Unique = true
            Me.columnImageName.ReadOnly = true
            Me.columnImageName.MaxLength = 50
            Me.columnPageTypeId.MaxLength = 1
            Me.columnPageName.MaxLength = 50
            Me.columnSize.ReadOnly = true
            Me.columnSize.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPageRow() As PageRow
            Return CType(Me.NewRow,PageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PageRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PageRowChangedEvent) Is Nothing) Then
                RaiseEvent PageRowChanged(Me, New PageRowChangeEvent(CType(e.Row,PageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PageRowChangingEvent) Is Nothing) Then
                RaiseEvent PageRowChanging(Me, New PageRowChangeEvent(CType(e.Row,PageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PageRowDeletedEvent) Is Nothing) Then
                RaiseEvent PageRowDeleted(Me, New PageRowChangeEvent(CType(e.Row,PageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PageRowDeletingEvent) Is Nothing) Then
                RaiseEvent PageRowDeleting(Me, New PageRowChangeEvent(CType(e.Row,PageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePageRow(ByVal row As PageRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UtilityDataTable
        Inherits Global.System.Data.TypedTableBase(Of UtilityRow)
        
        Private columnScanDPI As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Utility"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScanDPIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScanDPI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UtilityRow
            Get
                Return CType(Me.Rows(index),UtilityRow)
            End Get
        End Property
        
        Public Event UtilityRowChanging As UtilityRowChangeEventHandler
        
        Public Event UtilityRowChanged As UtilityRowChangeEventHandler
        
        Public Event UtilityRowDeleting As UtilityRowChangeEventHandler
        
        Public Event UtilityRowDeleted As UtilityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUtilityRow(ByVal row As UtilityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUtilityRow(ByVal ScanDPI As Integer) As UtilityRow
            Dim rowUtilityRow As UtilityRow = CType(Me.NewRow,UtilityRow)
            Dim columnValuesArray() As Object = New Object() {ScanDPI}
            rowUtilityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUtilityRow)
            Return rowUtilityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UtilityDataTable = CType(MyBase.Clone,UtilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UtilityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScanDPI = MyBase.Columns("ScanDPI")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScanDPI = New Global.System.Data.DataColumn("ScanDPI", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScanDPI)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUtilityRow() As UtilityRow
            Return CType(Me.NewRow,UtilityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UtilityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UtilityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UtilityRowChangedEvent) Is Nothing) Then
                RaiseEvent UtilityRowChanged(Me, New UtilityRowChangeEvent(CType(e.Row,UtilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UtilityRowChangingEvent) Is Nothing) Then
                RaiseEvent UtilityRowChanging(Me, New UtilityRowChangeEvent(CType(e.Row,UtilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UtilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent UtilityRowDeleted(Me, New UtilityRowChangeEvent(CType(e.Row,UtilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UtilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent UtilityRowDeleting(Me, New UtilityRowChangeEvent(CType(e.Row,UtilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUtilityRow(ByVal row As UtilityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UtilityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateFSIDataTable
        Inherits Global.System.Data.TypedTableBase(Of mt_proc_GetPossibleDuplicateFSIRow)
        
        Private columnVehicleID As Global.System.Data.DataColumn
        
        Private columnRetailer As Global.System.Data.DataColumn
        
        Private columnLanguage As Global.System.Data.DataColumn
        
        Private columnBreakDt As Global.System.Data.DataColumn
        
        Private columnMedia As Global.System.Data.DataColumn
        
        Private columnEvent As Global.System.Data.DataColumn
        
        Private columnTheme As Global.System.Data.DataColumn
        
        Private columnMarket As Global.System.Data.DataColumn
        
        Private columnPublication As Global.System.Data.DataColumn
        
        Private columnStartDt As Global.System.Data.DataColumn
        
        Private columnEndDt As Global.System.Data.DataColumn
        
        Private columnActualPageCount As Global.System.Data.DataColumn
        
        Private columnSizeId As Global.System.Data.DataColumn
        
        Private columnSize As Global.System.Data.DataColumn
        
        Private columnTradeClass As Global.System.Data.DataColumn
        
        Private columnCouponInd As Global.System.Data.DataColumn
        
        Private columnCoupon As Global.System.Data.DataColumn
        
        Private columnCreateDt As Global.System.Data.DataColumn
        
        Private columnPriority As Global.System.Data.DataColumn
        
        Private columnCreatedById As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnRetId As Global.System.Data.DataColumn
        
        Private columnMediaId As Global.System.Data.DataColumn
        
        Private columnEventId As Global.System.Data.DataColumn
        
        Private columnThemeId As Global.System.Data.DataColumn
        
        Private columnMktId As Global.System.Data.DataColumn
        
        Private columnPublicationId As Global.System.Data.DataColumn
        
        Private columnTradeClassId As Global.System.Data.DataColumn
        
        Private columnLanguageId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "mt_proc_GetPossibleDuplicateFSI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetailerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetailer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BreakDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreakDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThemeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTheme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualPageCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualPageCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSizeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TradeClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CouponIndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCouponInd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CouponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedById
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediaId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThemeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThemeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MktIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMktId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublicationId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TradeClassIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeClassId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguageId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mt_proc_GetPossibleDuplicateFSIRow
            Get
                Return CType(Me.Rows(index),mt_proc_GetPossibleDuplicateFSIRow)
            End Get
        End Property
        
        Public Event mt_proc_GetPossibleDuplicateFSIRowChanging As mt_proc_GetPossibleDuplicateFSIRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateFSIRowChanged As mt_proc_GetPossibleDuplicateFSIRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateFSIRowDeleting As mt_proc_GetPossibleDuplicateFSIRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateFSIRowDeleted As mt_proc_GetPossibleDuplicateFSIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addmt_proc_GetPossibleDuplicateFSIRow(ByVal row As mt_proc_GetPossibleDuplicateFSIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addmt_proc_GetPossibleDuplicateFSIRow( _
                    ByVal Retailer As String,  _
                    ByVal Language As String,  _
                    ByVal BreakDt As Date,  _
                    ByVal Media As String,  _
                    ByVal _Event As String,  _
                    ByVal Theme As String,  _
                    ByVal Market As String,  _
                    ByVal Publication As String,  _
                    ByVal StartDt As Date,  _
                    ByVal EndDt As Date,  _
                    ByVal ActualPageCount As Integer,  _
                    ByVal SizeId As Integer,  _
                    ByVal Size As String,  _
                    ByVal TradeClass As String,  _
                    ByVal CouponInd As Byte,  _
                    ByVal Coupon As String,  _
                    ByVal CreateDt As Date,  _
                    ByVal Priority As Integer,  _
                    ByVal CreatedById As Integer,  _
                    ByVal CreatedBy As String,  _
                    ByVal RetId As Integer,  _
                    ByVal MediaId As Integer,  _
                    ByVal EventId As Integer,  _
                    ByVal ThemeId As Integer,  _
                    ByVal MktId As Integer,  _
                    ByVal PublicationId As Integer,  _
                    ByVal TradeClassId As Integer,  _
                    ByVal LanguageId As Integer) As mt_proc_GetPossibleDuplicateFSIRow
            Dim rowmt_proc_GetPossibleDuplicateFSIRow As mt_proc_GetPossibleDuplicateFSIRow = CType(Me.NewRow,mt_proc_GetPossibleDuplicateFSIRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Retailer, Language, BreakDt, Media, _Event, Theme, Market, Publication, StartDt, EndDt, ActualPageCount, SizeId, Size, TradeClass, CouponInd, Coupon, CreateDt, Priority, CreatedById, CreatedBy, RetId, MediaId, EventId, ThemeId, MktId, PublicationId, TradeClassId, LanguageId}
            rowmt_proc_GetPossibleDuplicateFSIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmt_proc_GetPossibleDuplicateFSIRow)
            Return rowmt_proc_GetPossibleDuplicateFSIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVehicleID(ByVal VehicleID As Integer) As mt_proc_GetPossibleDuplicateFSIRow
            Return CType(Me.Rows.Find(New Object() {VehicleID}),mt_proc_GetPossibleDuplicateFSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mt_proc_GetPossibleDuplicateFSIDataTable = CType(MyBase.Clone,mt_proc_GetPossibleDuplicateFSIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mt_proc_GetPossibleDuplicateFSIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVehicleID = MyBase.Columns("VehicleID")
            Me.columnRetailer = MyBase.Columns("Retailer")
            Me.columnLanguage = MyBase.Columns("Language")
            Me.columnBreakDt = MyBase.Columns("BreakDt")
            Me.columnMedia = MyBase.Columns("Media")
            Me.columnEvent = MyBase.Columns("Event")
            Me.columnTheme = MyBase.Columns("Theme")
            Me.columnMarket = MyBase.Columns("Market")
            Me.columnPublication = MyBase.Columns("Publication")
            Me.columnStartDt = MyBase.Columns("StartDt")
            Me.columnEndDt = MyBase.Columns("EndDt")
            Me.columnActualPageCount = MyBase.Columns("ActualPageCount")
            Me.columnSizeId = MyBase.Columns("SizeId")
            Me.columnSize = MyBase.Columns("Size")
            Me.columnTradeClass = MyBase.Columns("TradeClass")
            Me.columnCouponInd = MyBase.Columns("CouponInd")
            Me.columnCoupon = MyBase.Columns("Coupon")
            Me.columnCreateDt = MyBase.Columns("CreateDt")
            Me.columnPriority = MyBase.Columns("Priority")
            Me.columnCreatedById = MyBase.Columns("CreatedById")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnRetId = MyBase.Columns("RetId")
            Me.columnMediaId = MyBase.Columns("MediaId")
            Me.columnEventId = MyBase.Columns("EventId")
            Me.columnThemeId = MyBase.Columns("ThemeId")
            Me.columnMktId = MyBase.Columns("MktId")
            Me.columnPublicationId = MyBase.Columns("PublicationId")
            Me.columnTradeClassId = MyBase.Columns("TradeClassId")
            Me.columnLanguageId = MyBase.Columns("LanguageId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVehicleID = New Global.System.Data.DataColumn("VehicleID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleID)
            Me.columnRetailer = New Global.System.Data.DataColumn("Retailer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetailer)
            Me.columnLanguage = New Global.System.Data.DataColumn("Language", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguage)
            Me.columnBreakDt = New Global.System.Data.DataColumn("BreakDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreakDt)
            Me.columnMedia = New Global.System.Data.DataColumn("Media", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedia)
            Me.columnEvent = New Global.System.Data.DataColumn("Event", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EventColumn")
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEvent")
            Me.columnEvent.ExtendedProperties.Add("Generator_UserColumnName", "Event")
            MyBase.Columns.Add(Me.columnEvent)
            Me.columnTheme = New Global.System.Data.DataColumn("Theme", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTheme)
            Me.columnMarket = New Global.System.Data.DataColumn("Market", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket)
            Me.columnPublication = New Global.System.Data.DataColumn("Publication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublication)
            Me.columnStartDt = New Global.System.Data.DataColumn("StartDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDt)
            Me.columnEndDt = New Global.System.Data.DataColumn("EndDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDt)
            Me.columnActualPageCount = New Global.System.Data.DataColumn("ActualPageCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualPageCount)
            Me.columnSizeId = New Global.System.Data.DataColumn("SizeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSizeId)
            Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize)
            Me.columnTradeClass = New Global.System.Data.DataColumn("TradeClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeClass)
            Me.columnCouponInd = New Global.System.Data.DataColumn("CouponInd", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouponInd)
            Me.columnCoupon = New Global.System.Data.DataColumn("Coupon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoupon)
            Me.columnCreateDt = New Global.System.Data.DataColumn("CreateDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDt)
            Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriority)
            Me.columnCreatedById = New Global.System.Data.DataColumn("CreatedById", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedById)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnRetId = New Global.System.Data.DataColumn("RetId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetId)
            Me.columnMediaId = New Global.System.Data.DataColumn("MediaId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediaId)
            Me.columnEventId = New Global.System.Data.DataColumn("EventId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventId)
            Me.columnThemeId = New Global.System.Data.DataColumn("ThemeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThemeId)
            Me.columnMktId = New Global.System.Data.DataColumn("MktId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMktId)
            Me.columnPublicationId = New Global.System.Data.DataColumn("PublicationId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublicationId)
            Me.columnTradeClassId = New Global.System.Data.DataColumn("TradeClassId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeClassId)
            Me.columnLanguageId = New Global.System.Data.DataColumn("LanguageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguageId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVehicleID}, true))
            Me.columnVehicleID.AutoIncrement = true
            Me.columnVehicleID.AutoIncrementSeed = -1
            Me.columnVehicleID.AutoIncrementStep = -1
            Me.columnVehicleID.AllowDBNull = false
            Me.columnVehicleID.ReadOnly = true
            Me.columnVehicleID.Unique = true
            Me.columnRetailer.MaxLength = 50
            Me.columnLanguage.MaxLength = 50
            Me.columnMedia.MaxLength = 50
            Me.columnEvent.MaxLength = 100
            Me.columnTheme.MaxLength = 100
            Me.columnMarket.MaxLength = 50
            Me.columnPublication.MaxLength = 50
            Me.columnActualPageCount.ReadOnly = true
            Me.columnSize.ReadOnly = true
            Me.columnSize.MaxLength = 15
            Me.columnTradeClass.MaxLength = 50
            Me.columnCoupon.ReadOnly = true
            Me.columnCoupon.MaxLength = 3
            Me.columnCreatedBy.ReadOnly = true
            Me.columnCreatedBy.MaxLength = 101
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newmt_proc_GetPossibleDuplicateFSIRow() As mt_proc_GetPossibleDuplicateFSIRow
            Return CType(Me.NewRow,mt_proc_GetPossibleDuplicateFSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mt_proc_GetPossibleDuplicateFSIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mt_proc_GetPossibleDuplicateFSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateFSIRowChangedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateFSIRowChanged(Me, New mt_proc_GetPossibleDuplicateFSIRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateFSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateFSIRowChangingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateFSIRowChanging(Me, New mt_proc_GetPossibleDuplicateFSIRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateFSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateFSIRowDeletedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateFSIRowDeleted(Me, New mt_proc_GetPossibleDuplicateFSIRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateFSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateFSIRowDeletingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateFSIRowDeleting(Me, New mt_proc_GetPossibleDuplicateFSIRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateFSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removemt_proc_GetPossibleDuplicateFSIRow(ByVal row As mt_proc_GetPossibleDuplicateFSIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mt_proc_GetPossibleDuplicateFSIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateNonFSIROPDataTable
        Inherits Global.System.Data.TypedTableBase(Of mt_proc_GetPossibleDuplicateNonFSIROPRow)
        
        Private columnVehicleID As Global.System.Data.DataColumn
        
        Private columnRetailer As Global.System.Data.DataColumn
        
        Private columnLanguage As Global.System.Data.DataColumn
        
        Private columnBreakDt As Global.System.Data.DataColumn
        
        Private columnMedia As Global.System.Data.DataColumn
        
        Private columnEvent As Global.System.Data.DataColumn
        
        Private columnTheme As Global.System.Data.DataColumn
        
        Private columnMarket As Global.System.Data.DataColumn
        
        Private columnPublication As Global.System.Data.DataColumn
        
        Private columnStartDt As Global.System.Data.DataColumn
        
        Private columnEndDt As Global.System.Data.DataColumn
        
        Private columnActualPageCount As Global.System.Data.DataColumn
        
        Private columnSizeId As Global.System.Data.DataColumn
        
        Private columnSize As Global.System.Data.DataColumn
        
        Private columnTradeClass As Global.System.Data.DataColumn
        
        Private columnCouponInd As Global.System.Data.DataColumn
        
        Private columnCoupon As Global.System.Data.DataColumn
        
        Private columnCreateDt As Global.System.Data.DataColumn
        
        Private columnPriority As Global.System.Data.DataColumn
        
        Private columnCreatedById As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnRetId As Global.System.Data.DataColumn
        
        Private columnMediaId As Global.System.Data.DataColumn
        
        Private columnEventId As Global.System.Data.DataColumn
        
        Private columnThemeId As Global.System.Data.DataColumn
        
        Private columnMktId As Global.System.Data.DataColumn
        
        Private columnPublicationId As Global.System.Data.DataColumn
        
        Private columnTradeClassId As Global.System.Data.DataColumn
        
        Private columnLanguageId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "mt_proc_GetPossibleDuplicateNonFSIROP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetailerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetailer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BreakDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreakDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThemeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTheme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualPageCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualPageCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSizeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TradeClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CouponIndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCouponInd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CouponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedById
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediaId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThemeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThemeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MktIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMktId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublicationId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TradeClassIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTradeClassId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguageId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mt_proc_GetPossibleDuplicateNonFSIROPRow
            Get
                Return CType(Me.Rows(index),mt_proc_GetPossibleDuplicateNonFSIROPRow)
            End Get
        End Property
        
        Public Event mt_proc_GetPossibleDuplicateNonFSIROPRowChanging As mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateNonFSIROPRowChanged As mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateNonFSIROPRowDeleting As mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateNonFSIROPRowDeleted As mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addmt_proc_GetPossibleDuplicateNonFSIROPRow(ByVal row As mt_proc_GetPossibleDuplicateNonFSIROPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addmt_proc_GetPossibleDuplicateNonFSIROPRow( _
                    ByVal Retailer As String,  _
                    ByVal Language As String,  _
                    ByVal BreakDt As Date,  _
                    ByVal Media As String,  _
                    ByVal _Event As String,  _
                    ByVal Theme As String,  _
                    ByVal Market As String,  _
                    ByVal Publication As String,  _
                    ByVal StartDt As Date,  _
                    ByVal EndDt As Date,  _
                    ByVal ActualPageCount As Integer,  _
                    ByVal SizeId As Integer,  _
                    ByVal Size As String,  _
                    ByVal TradeClass As String,  _
                    ByVal CouponInd As Byte,  _
                    ByVal Coupon As String,  _
                    ByVal CreateDt As Date,  _
                    ByVal Priority As Integer,  _
                    ByVal CreatedById As Integer,  _
                    ByVal CreatedBy As String,  _
                    ByVal RetId As Integer,  _
                    ByVal MediaId As Integer,  _
                    ByVal EventId As Integer,  _
                    ByVal ThemeId As Integer,  _
                    ByVal MktId As Integer,  _
                    ByVal PublicationId As Integer,  _
                    ByVal TradeClassId As Integer,  _
                    ByVal LanguageId As Integer) As mt_proc_GetPossibleDuplicateNonFSIROPRow
            Dim rowmt_proc_GetPossibleDuplicateNonFSIROPRow As mt_proc_GetPossibleDuplicateNonFSIROPRow = CType(Me.NewRow,mt_proc_GetPossibleDuplicateNonFSIROPRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Retailer, Language, BreakDt, Media, _Event, Theme, Market, Publication, StartDt, EndDt, ActualPageCount, SizeId, Size, TradeClass, CouponInd, Coupon, CreateDt, Priority, CreatedById, CreatedBy, RetId, MediaId, EventId, ThemeId, MktId, PublicationId, TradeClassId, LanguageId}
            rowmt_proc_GetPossibleDuplicateNonFSIROPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmt_proc_GetPossibleDuplicateNonFSIROPRow)
            Return rowmt_proc_GetPossibleDuplicateNonFSIROPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVehicleID(ByVal VehicleID As Integer) As mt_proc_GetPossibleDuplicateNonFSIROPRow
            Return CType(Me.Rows.Find(New Object() {VehicleID}),mt_proc_GetPossibleDuplicateNonFSIROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mt_proc_GetPossibleDuplicateNonFSIROPDataTable = CType(MyBase.Clone,mt_proc_GetPossibleDuplicateNonFSIROPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mt_proc_GetPossibleDuplicateNonFSIROPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVehicleID = MyBase.Columns("VehicleID")
            Me.columnRetailer = MyBase.Columns("Retailer")
            Me.columnLanguage = MyBase.Columns("Language")
            Me.columnBreakDt = MyBase.Columns("BreakDt")
            Me.columnMedia = MyBase.Columns("Media")
            Me.columnEvent = MyBase.Columns("Event")
            Me.columnTheme = MyBase.Columns("Theme")
            Me.columnMarket = MyBase.Columns("Market")
            Me.columnPublication = MyBase.Columns("Publication")
            Me.columnStartDt = MyBase.Columns("StartDt")
            Me.columnEndDt = MyBase.Columns("EndDt")
            Me.columnActualPageCount = MyBase.Columns("ActualPageCount")
            Me.columnSizeId = MyBase.Columns("SizeId")
            Me.columnSize = MyBase.Columns("Size")
            Me.columnTradeClass = MyBase.Columns("TradeClass")
            Me.columnCouponInd = MyBase.Columns("CouponInd")
            Me.columnCoupon = MyBase.Columns("Coupon")
            Me.columnCreateDt = MyBase.Columns("CreateDt")
            Me.columnPriority = MyBase.Columns("Priority")
            Me.columnCreatedById = MyBase.Columns("CreatedById")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnRetId = MyBase.Columns("RetId")
            Me.columnMediaId = MyBase.Columns("MediaId")
            Me.columnEventId = MyBase.Columns("EventId")
            Me.columnThemeId = MyBase.Columns("ThemeId")
            Me.columnMktId = MyBase.Columns("MktId")
            Me.columnPublicationId = MyBase.Columns("PublicationId")
            Me.columnTradeClassId = MyBase.Columns("TradeClassId")
            Me.columnLanguageId = MyBase.Columns("LanguageId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVehicleID = New Global.System.Data.DataColumn("VehicleID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleID)
            Me.columnRetailer = New Global.System.Data.DataColumn("Retailer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetailer)
            Me.columnLanguage = New Global.System.Data.DataColumn("Language", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguage)
            Me.columnBreakDt = New Global.System.Data.DataColumn("BreakDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreakDt)
            Me.columnMedia = New Global.System.Data.DataColumn("Media", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedia)
            Me.columnEvent = New Global.System.Data.DataColumn("Event", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EventColumn")
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEvent")
            Me.columnEvent.ExtendedProperties.Add("Generator_UserColumnName", "Event")
            MyBase.Columns.Add(Me.columnEvent)
            Me.columnTheme = New Global.System.Data.DataColumn("Theme", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTheme)
            Me.columnMarket = New Global.System.Data.DataColumn("Market", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket)
            Me.columnPublication = New Global.System.Data.DataColumn("Publication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublication)
            Me.columnStartDt = New Global.System.Data.DataColumn("StartDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDt)
            Me.columnEndDt = New Global.System.Data.DataColumn("EndDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDt)
            Me.columnActualPageCount = New Global.System.Data.DataColumn("ActualPageCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualPageCount)
            Me.columnSizeId = New Global.System.Data.DataColumn("SizeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSizeId)
            Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize)
            Me.columnTradeClass = New Global.System.Data.DataColumn("TradeClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeClass)
            Me.columnCouponInd = New Global.System.Data.DataColumn("CouponInd", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouponInd)
            Me.columnCoupon = New Global.System.Data.DataColumn("Coupon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoupon)
            Me.columnCreateDt = New Global.System.Data.DataColumn("CreateDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDt)
            Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriority)
            Me.columnCreatedById = New Global.System.Data.DataColumn("CreatedById", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedById)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnRetId = New Global.System.Data.DataColumn("RetId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetId)
            Me.columnMediaId = New Global.System.Data.DataColumn("MediaId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediaId)
            Me.columnEventId = New Global.System.Data.DataColumn("EventId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventId)
            Me.columnThemeId = New Global.System.Data.DataColumn("ThemeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThemeId)
            Me.columnMktId = New Global.System.Data.DataColumn("MktId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMktId)
            Me.columnPublicationId = New Global.System.Data.DataColumn("PublicationId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublicationId)
            Me.columnTradeClassId = New Global.System.Data.DataColumn("TradeClassId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTradeClassId)
            Me.columnLanguageId = New Global.System.Data.DataColumn("LanguageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguageId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVehicleID}, true))
            Me.columnVehicleID.AutoIncrement = true
            Me.columnVehicleID.AutoIncrementSeed = -1
            Me.columnVehicleID.AutoIncrementStep = -1
            Me.columnVehicleID.AllowDBNull = false
            Me.columnVehicleID.ReadOnly = true
            Me.columnVehicleID.Unique = true
            Me.columnRetailer.MaxLength = 50
            Me.columnLanguage.MaxLength = 50
            Me.columnMedia.MaxLength = 50
            Me.columnEvent.MaxLength = 100
            Me.columnTheme.MaxLength = 100
            Me.columnMarket.MaxLength = 50
            Me.columnPublication.MaxLength = 50
            Me.columnActualPageCount.ReadOnly = true
            Me.columnSize.ReadOnly = true
            Me.columnSize.MaxLength = 15
            Me.columnTradeClass.MaxLength = 50
            Me.columnCoupon.ReadOnly = true
            Me.columnCoupon.MaxLength = 3
            Me.columnCreatedBy.ReadOnly = true
            Me.columnCreatedBy.MaxLength = 101
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newmt_proc_GetPossibleDuplicateNonFSIROPRow() As mt_proc_GetPossibleDuplicateNonFSIROPRow
            Return CType(Me.NewRow,mt_proc_GetPossibleDuplicateNonFSIROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mt_proc_GetPossibleDuplicateNonFSIROPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mt_proc_GetPossibleDuplicateNonFSIROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateNonFSIROPRowChangedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateNonFSIROPRowChanged(Me, New mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateNonFSIROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateNonFSIROPRowChangingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateNonFSIROPRowChanging(Me, New mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateNonFSIROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateNonFSIROPRowDeletedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateNonFSIROPRowDeleted(Me, New mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateNonFSIROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateNonFSIROPRowDeletingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateNonFSIROPRowDeleting(Me, New mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateNonFSIROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removemt_proc_GetPossibleDuplicateNonFSIROPRow(ByVal row As mt_proc_GetPossibleDuplicateNonFSIROPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mt_proc_GetPossibleDuplicateNonFSIROPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateROPDataTable
        Inherits Global.System.Data.TypedTableBase(Of mt_proc_GetPossibleDuplicateROPRow)
        
        Private columnVehicleID As Global.System.Data.DataColumn
        
        Private columnBreakDt As Global.System.Data.DataColumn
        
        Private columnMedia As Global.System.Data.DataColumn
        
        Private columnMarket As Global.System.Data.DataColumn
        
        Private columnPublication As Global.System.Data.DataColumn
        
        Private columnStartDt As Global.System.Data.DataColumn
        
        Private columnEndDt As Global.System.Data.DataColumn
        
        Private columnPullPageCount As Global.System.Data.DataColumn
        
        Private columnSizeId As Global.System.Data.DataColumn
        
        Private columnSize As Global.System.Data.DataColumn
        
        Private columnCreateDt As Global.System.Data.DataColumn
        
        Private columnLanguage As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnPriority As Global.System.Data.DataColumn
        
        Private columnCreatedById As Global.System.Data.DataColumn
        
        Private columnMediaId As Global.System.Data.DataColumn
        
        Private columnMktId As Global.System.Data.DataColumn
        
        Private columnPublicationId As Global.System.Data.DataColumn
        
        Private columnLanguageId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "mt_proc_GetPossibleDuplicateROP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BreakDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreakDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PullPageCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPullPageCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSizeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedById
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MediaIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediaId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MktIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMktId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicationIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublicationId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguageId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mt_proc_GetPossibleDuplicateROPRow
            Get
                Return CType(Me.Rows(index),mt_proc_GetPossibleDuplicateROPRow)
            End Get
        End Property
        
        Public Event mt_proc_GetPossibleDuplicateROPRowChanging As mt_proc_GetPossibleDuplicateROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateROPRowChanged As mt_proc_GetPossibleDuplicateROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateROPRowDeleting As mt_proc_GetPossibleDuplicateROPRowChangeEventHandler
        
        Public Event mt_proc_GetPossibleDuplicateROPRowDeleted As mt_proc_GetPossibleDuplicateROPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addmt_proc_GetPossibleDuplicateROPRow(ByVal row As mt_proc_GetPossibleDuplicateROPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addmt_proc_GetPossibleDuplicateROPRow( _
                    ByVal BreakDt As Date,  _
                    ByVal Media As String,  _
                    ByVal Market As String,  _
                    ByVal Publication As String,  _
                    ByVal StartDt As Date,  _
                    ByVal EndDt As Date,  _
                    ByVal PullPageCount As Integer,  _
                    ByVal SizeId As Integer,  _
                    ByVal Size As String,  _
                    ByVal CreateDt As Date,  _
                    ByVal Language As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Priority As Integer,  _
                    ByVal CreatedById As Integer,  _
                    ByVal MediaId As Integer,  _
                    ByVal MktId As Integer,  _
                    ByVal PublicationId As Integer,  _
                    ByVal LanguageId As Integer) As mt_proc_GetPossibleDuplicateROPRow
            Dim rowmt_proc_GetPossibleDuplicateROPRow As mt_proc_GetPossibleDuplicateROPRow = CType(Me.NewRow,mt_proc_GetPossibleDuplicateROPRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, BreakDt, Media, Market, Publication, StartDt, EndDt, PullPageCount, SizeId, Size, CreateDt, Language, CreatedBy, Priority, CreatedById, MediaId, MktId, PublicationId, LanguageId}
            rowmt_proc_GetPossibleDuplicateROPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmt_proc_GetPossibleDuplicateROPRow)
            Return rowmt_proc_GetPossibleDuplicateROPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVehicleID(ByVal VehicleID As Integer) As mt_proc_GetPossibleDuplicateROPRow
            Return CType(Me.Rows.Find(New Object() {VehicleID}),mt_proc_GetPossibleDuplicateROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mt_proc_GetPossibleDuplicateROPDataTable = CType(MyBase.Clone,mt_proc_GetPossibleDuplicateROPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mt_proc_GetPossibleDuplicateROPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVehicleID = MyBase.Columns("VehicleID")
            Me.columnBreakDt = MyBase.Columns("BreakDt")
            Me.columnMedia = MyBase.Columns("Media")
            Me.columnMarket = MyBase.Columns("Market")
            Me.columnPublication = MyBase.Columns("Publication")
            Me.columnStartDt = MyBase.Columns("StartDt")
            Me.columnEndDt = MyBase.Columns("EndDt")
            Me.columnPullPageCount = MyBase.Columns("PullPageCount")
            Me.columnSizeId = MyBase.Columns("SizeId")
            Me.columnSize = MyBase.Columns("Size")
            Me.columnCreateDt = MyBase.Columns("CreateDt")
            Me.columnLanguage = MyBase.Columns("Language")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnPriority = MyBase.Columns("Priority")
            Me.columnCreatedById = MyBase.Columns("CreatedById")
            Me.columnMediaId = MyBase.Columns("MediaId")
            Me.columnMktId = MyBase.Columns("MktId")
            Me.columnPublicationId = MyBase.Columns("PublicationId")
            Me.columnLanguageId = MyBase.Columns("LanguageId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVehicleID = New Global.System.Data.DataColumn("VehicleID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleID)
            Me.columnBreakDt = New Global.System.Data.DataColumn("BreakDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreakDt)
            Me.columnMedia = New Global.System.Data.DataColumn("Media", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedia)
            Me.columnMarket = New Global.System.Data.DataColumn("Market", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarket)
            Me.columnPublication = New Global.System.Data.DataColumn("Publication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublication)
            Me.columnStartDt = New Global.System.Data.DataColumn("StartDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDt)
            Me.columnEndDt = New Global.System.Data.DataColumn("EndDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDt)
            Me.columnPullPageCount = New Global.System.Data.DataColumn("PullPageCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPullPageCount)
            Me.columnSizeId = New Global.System.Data.DataColumn("SizeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSizeId)
            Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize)
            Me.columnCreateDt = New Global.System.Data.DataColumn("CreateDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDt)
            Me.columnLanguage = New Global.System.Data.DataColumn("Language", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguage)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriority)
            Me.columnCreatedById = New Global.System.Data.DataColumn("CreatedById", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedById)
            Me.columnMediaId = New Global.System.Data.DataColumn("MediaId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediaId)
            Me.columnMktId = New Global.System.Data.DataColumn("MktId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMktId)
            Me.columnPublicationId = New Global.System.Data.DataColumn("PublicationId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublicationId)
            Me.columnLanguageId = New Global.System.Data.DataColumn("LanguageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguageId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVehicleID}, true))
            Me.columnVehicleID.AutoIncrement = true
            Me.columnVehicleID.AutoIncrementSeed = -1
            Me.columnVehicleID.AutoIncrementStep = -1
            Me.columnVehicleID.AllowDBNull = false
            Me.columnVehicleID.ReadOnly = true
            Me.columnVehicleID.Unique = true
            Me.columnMedia.MaxLength = 50
            Me.columnMarket.MaxLength = 50
            Me.columnPublication.MaxLength = 50
            Me.columnSize.ReadOnly = true
            Me.columnSize.MaxLength = 15
            Me.columnLanguage.MaxLength = 50
            Me.columnCreatedBy.ReadOnly = true
            Me.columnCreatedBy.MaxLength = 101
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newmt_proc_GetPossibleDuplicateROPRow() As mt_proc_GetPossibleDuplicateROPRow
            Return CType(Me.NewRow,mt_proc_GetPossibleDuplicateROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mt_proc_GetPossibleDuplicateROPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mt_proc_GetPossibleDuplicateROPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateROPRowChangedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateROPRowChanged(Me, New mt_proc_GetPossibleDuplicateROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateROPRowChangingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateROPRowChanging(Me, New mt_proc_GetPossibleDuplicateROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateROPRowDeletedEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateROPRowDeleted(Me, New mt_proc_GetPossibleDuplicateROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mt_proc_GetPossibleDuplicateROPRowDeletingEvent) Is Nothing) Then
                RaiseEvent mt_proc_GetPossibleDuplicateROPRowDeleting(Me, New mt_proc_GetPossibleDuplicateROPRowChangeEvent(CType(e.Row,mt_proc_GetPossibleDuplicateROPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removemt_proc_GetPossibleDuplicateROPRow(ByVal row As mt_proc_GetPossibleDuplicateROPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mt_proc_GetPossibleDuplicateROPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DupFormLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of DupFormLogRow)
        
        Private columnDupFormId As Global.System.Data.DataColumn
        
        Private columnVehicleId As Global.System.Data.DataColumn
        
        Private columnCheckDt As Global.System.Data.DataColumn
        
        Private columnUserId As Global.System.Data.DataColumn
        
        Private columnForm As Global.System.Data.DataColumn
        
        Private columnActionTaken As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DupFormLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DupFormIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDupFormId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionTakenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionTaken
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DupFormLogRow
            Get
                Return CType(Me.Rows(index),DupFormLogRow)
            End Get
        End Property
        
        Public Event DupFormLogRowChanging As DupFormLogRowChangeEventHandler
        
        Public Event DupFormLogRowChanged As DupFormLogRowChangeEventHandler
        
        Public Event DupFormLogRowDeleting As DupFormLogRowChangeEventHandler
        
        Public Event DupFormLogRowDeleted As DupFormLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDupFormLogRow(ByVal row As DupFormLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDupFormLogRow(ByVal VehicleId As Integer, ByVal CheckDt As Date, ByVal UserId As Integer, ByVal Form As String, ByVal ActionTaken As Integer) As DupFormLogRow
            Dim rowDupFormLogRow As DupFormLogRow = CType(Me.NewRow,DupFormLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, VehicleId, CheckDt, UserId, Form, ActionTaken}
            rowDupFormLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDupFormLogRow)
            Return rowDupFormLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDupFormId(ByVal DupFormId As Integer) As DupFormLogRow
            Return CType(Me.Rows.Find(New Object() {DupFormId}),DupFormLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DupFormLogDataTable = CType(MyBase.Clone,DupFormLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DupFormLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDupFormId = MyBase.Columns("DupFormId")
            Me.columnVehicleId = MyBase.Columns("VehicleId")
            Me.columnCheckDt = MyBase.Columns("CheckDt")
            Me.columnUserId = MyBase.Columns("UserId")
            Me.columnForm = MyBase.Columns("Form")
            Me.columnActionTaken = MyBase.Columns("ActionTaken")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDupFormId = New Global.System.Data.DataColumn("DupFormId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDupFormId)
            Me.columnVehicleId = New Global.System.Data.DataColumn("VehicleId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleId)
            Me.columnCheckDt = New Global.System.Data.DataColumn("CheckDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckDt)
            Me.columnUserId = New Global.System.Data.DataColumn("UserId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserId)
            Me.columnForm = New Global.System.Data.DataColumn("Form", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForm)
            Me.columnActionTaken = New Global.System.Data.DataColumn("ActionTaken", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionTaken)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDupFormId}, true))
            Me.columnDupFormId.AutoIncrement = true
            Me.columnDupFormId.AutoIncrementSeed = -1
            Me.columnDupFormId.AutoIncrementStep = -1
            Me.columnDupFormId.AllowDBNull = false
            Me.columnDupFormId.ReadOnly = true
            Me.columnDupFormId.Unique = true
            Me.columnCheckDt.AllowDBNull = false
            Me.columnUserId.AllowDBNull = false
            Me.columnForm.AllowDBNull = false
            Me.columnForm.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDupFormLogRow() As DupFormLogRow
            Return CType(Me.NewRow,DupFormLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DupFormLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DupFormLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DupFormLogRowChangedEvent) Is Nothing) Then
                RaiseEvent DupFormLogRowChanged(Me, New DupFormLogRowChangeEvent(CType(e.Row,DupFormLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DupFormLogRowChangingEvent) Is Nothing) Then
                RaiseEvent DupFormLogRowChanging(Me, New DupFormLogRowChangeEvent(CType(e.Row,DupFormLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DupFormLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent DupFormLogRowDeleted(Me, New DupFormLogRowChangeEvent(CType(e.Row,DupFormLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DupFormLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent DupFormLogRowDeleting(Me, New DupFormLogRowChangeEvent(CType(e.Row,DupFormLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDupFormLogRow(ByVal row As DupFormLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DupFormLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DupCheckLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of DupCheckLogRow)
        
        Private columnDupCheckLogId As Global.System.Data.DataColumn
        
        Private columnDupFormId As Global.System.Data.DataColumn
        
        Private columnDateRange As Global.System.Data.DataColumn
        
        Private columnRunDt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DupCheckLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DupCheckLogIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDupCheckLogId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DupFormIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDupFormId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RunDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRunDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DupCheckLogRow
            Get
                Return CType(Me.Rows(index),DupCheckLogRow)
            End Get
        End Property
        
        Public Event DupCheckLogRowChanging As DupCheckLogRowChangeEventHandler
        
        Public Event DupCheckLogRowChanged As DupCheckLogRowChangeEventHandler
        
        Public Event DupCheckLogRowDeleting As DupCheckLogRowChangeEventHandler
        
        Public Event DupCheckLogRowDeleted As DupCheckLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDupCheckLogRow(ByVal row As DupCheckLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDupCheckLogRow(ByVal parentDupFormLogRowByFK_DupCheckLog_DupFormLog As DupFormLogRow, ByVal DateRange As Integer, ByVal RunDt As Date) As DupCheckLogRow
            Dim rowDupCheckLogRow As DupCheckLogRow = CType(Me.NewRow,DupCheckLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, DateRange, RunDt}
            If (Not (parentDupFormLogRowByFK_DupCheckLog_DupFormLog) Is Nothing) Then
                columnValuesArray(1) = parentDupFormLogRowByFK_DupCheckLog_DupFormLog(0)
            End If
            rowDupCheckLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDupCheckLogRow)
            Return rowDupCheckLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDupCheckLogId(ByVal DupCheckLogId As Integer) As DupCheckLogRow
            Return CType(Me.Rows.Find(New Object() {DupCheckLogId}),DupCheckLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DupCheckLogDataTable = CType(MyBase.Clone,DupCheckLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DupCheckLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDupCheckLogId = MyBase.Columns("DupCheckLogId")
            Me.columnDupFormId = MyBase.Columns("DupFormId")
            Me.columnDateRange = MyBase.Columns("DateRange")
            Me.columnRunDt = MyBase.Columns("RunDt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDupCheckLogId = New Global.System.Data.DataColumn("DupCheckLogId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDupCheckLogId)
            Me.columnDupFormId = New Global.System.Data.DataColumn("DupFormId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDupFormId)
            Me.columnDateRange = New Global.System.Data.DataColumn("DateRange", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRange)
            Me.columnRunDt = New Global.System.Data.DataColumn("RunDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunDt)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDupCheckLogId}, true))
            Me.columnDupCheckLogId.AutoIncrement = true
            Me.columnDupCheckLogId.AutoIncrementSeed = -1
            Me.columnDupCheckLogId.AutoIncrementStep = -1
            Me.columnDupCheckLogId.AllowDBNull = false
            Me.columnDupCheckLogId.ReadOnly = true
            Me.columnDupCheckLogId.Unique = true
            Me.columnDupFormId.AllowDBNull = false
            Me.columnRunDt.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDupCheckLogRow() As DupCheckLogRow
            Return CType(Me.NewRow,DupCheckLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DupCheckLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DupCheckLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DupCheckLogRowChangedEvent) Is Nothing) Then
                RaiseEvent DupCheckLogRowChanged(Me, New DupCheckLogRowChangeEvent(CType(e.Row,DupCheckLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DupCheckLogRowChangingEvent) Is Nothing) Then
                RaiseEvent DupCheckLogRowChanging(Me, New DupCheckLogRowChangeEvent(CType(e.Row,DupCheckLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DupCheckLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent DupCheckLogRowDeleted(Me, New DupCheckLogRowChangeEvent(CType(e.Row,DupCheckLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DupCheckLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent DupCheckLogRowDeleting(Me, New DupCheckLogRowChangeEvent(CType(e.Row,DupCheckLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDupCheckLogRow(ByVal row As DupCheckLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DupCheckLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DupCheckResultsLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of DupCheckResultsLogRow)
        
        Private columnDupCheckResultsLogId As Global.System.Data.DataColumn
        
        Private columnDupCheckLogId As Global.System.Data.DataColumn
        
        Private columnVehicleId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DupCheckResultsLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DupCheckResultsLogIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDupCheckResultsLogId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DupCheckLogIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDupCheckLogId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DupCheckResultsLogRow
            Get
                Return CType(Me.Rows(index),DupCheckResultsLogRow)
            End Get
        End Property
        
        Public Event DupCheckResultsLogRowChanging As DupCheckResultsLogRowChangeEventHandler
        
        Public Event DupCheckResultsLogRowChanged As DupCheckResultsLogRowChangeEventHandler
        
        Public Event DupCheckResultsLogRowDeleting As DupCheckResultsLogRowChangeEventHandler
        
        Public Event DupCheckResultsLogRowDeleted As DupCheckResultsLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDupCheckResultsLogRow(ByVal row As DupCheckResultsLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDupCheckResultsLogRow(ByVal parentDupCheckLogRowByFK_DupCheckResultsLog_DupCheckLog As DupCheckLogRow, ByVal VehicleId As Integer) As DupCheckResultsLogRow
            Dim rowDupCheckResultsLogRow As DupCheckResultsLogRow = CType(Me.NewRow,DupCheckResultsLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, VehicleId}
            If (Not (parentDupCheckLogRowByFK_DupCheckResultsLog_DupCheckLog) Is Nothing) Then
                columnValuesArray(1) = parentDupCheckLogRowByFK_DupCheckResultsLog_DupCheckLog(0)
            End If
            rowDupCheckResultsLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDupCheckResultsLogRow)
            Return rowDupCheckResultsLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDupCheckResultsLogId(ByVal DupCheckResultsLogId As Integer) As DupCheckResultsLogRow
            Return CType(Me.Rows.Find(New Object() {DupCheckResultsLogId}),DupCheckResultsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DupCheckResultsLogDataTable = CType(MyBase.Clone,DupCheckResultsLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DupCheckResultsLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDupCheckResultsLogId = MyBase.Columns("DupCheckResultsLogId")
            Me.columnDupCheckLogId = MyBase.Columns("DupCheckLogId")
            Me.columnVehicleId = MyBase.Columns("VehicleId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDupCheckResultsLogId = New Global.System.Data.DataColumn("DupCheckResultsLogId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDupCheckResultsLogId)
            Me.columnDupCheckLogId = New Global.System.Data.DataColumn("DupCheckLogId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDupCheckLogId)
            Me.columnVehicleId = New Global.System.Data.DataColumn("VehicleId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDupCheckResultsLogId}, true))
            Me.columnDupCheckResultsLogId.AutoIncrement = true
            Me.columnDupCheckResultsLogId.AutoIncrementSeed = -1
            Me.columnDupCheckResultsLogId.AutoIncrementStep = -1
            Me.columnDupCheckResultsLogId.AllowDBNull = false
            Me.columnDupCheckResultsLogId.ReadOnly = true
            Me.columnDupCheckResultsLogId.Unique = true
            Me.columnDupCheckLogId.AllowDBNull = false
            Me.columnVehicleId.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDupCheckResultsLogRow() As DupCheckResultsLogRow
            Return CType(Me.NewRow,DupCheckResultsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DupCheckResultsLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DupCheckResultsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DupCheckResultsLogRowChangedEvent) Is Nothing) Then
                RaiseEvent DupCheckResultsLogRowChanged(Me, New DupCheckResultsLogRowChangeEvent(CType(e.Row,DupCheckResultsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DupCheckResultsLogRowChangingEvent) Is Nothing) Then
                RaiseEvent DupCheckResultsLogRowChanging(Me, New DupCheckResultsLogRowChangeEvent(CType(e.Row,DupCheckResultsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DupCheckResultsLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent DupCheckResultsLogRowDeleted(Me, New DupCheckResultsLogRowChangeEvent(CType(e.Row,DupCheckResultsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DupCheckResultsLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent DupCheckResultsLogRowDeleting(Me, New DupCheckResultsLogRowChangeEvent(CType(e.Row,DupCheckResultsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDupCheckResultsLogRow(ByVal row As DupCheckResultsLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DupCheckDataSet = New DupCheckDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DupCheckResultsLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PageRow
        Inherits Global.System.Data.DataRow
        
        Private tablePage As PageDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePage = CType(Me.Table,PageDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePage.VehicleIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VehicleId' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.VehicleIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageId() As Integer
            Get
                Return CType(Me(Me.tablePage.PageIdColumn),Integer)
            End Get
            Set
                Me(Me.tablePage.PageIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImageName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePage.ImageNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImageName' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.ImageNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageTypeId() As String
            Get
                Try 
                    Return CType(Me(Me.tablePage.PageTypeIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageTypeId' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.PageTypeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePage.ReceivedOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedOrder' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.ReceivedOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PageName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePage.PageNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PageName' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.PageNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PixelHieght() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePage.PixelHieghtColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PixelHieght' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.PixelHieghtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PixelWidth() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePage.PixelWidthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PixelWidth' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.PixelWidthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SizeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePage.SizeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SizeId' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.SizeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size() As String
            Get
                Try 
                    Return CType(Me(Me.tablePage.SizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'Page' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePage.SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicleIdNull() As Boolean
            Return Me.IsNull(Me.tablePage.VehicleIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicleIdNull()
            Me(Me.tablePage.VehicleIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNameNull() As Boolean
            Return Me.IsNull(Me.tablePage.ImageNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNameNull()
            Me(Me.tablePage.ImageNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageTypeIdNull() As Boolean
            Return Me.IsNull(Me.tablePage.PageTypeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageTypeIdNull()
            Me(Me.tablePage.PageTypeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedOrderNull() As Boolean
            Return Me.IsNull(Me.tablePage.ReceivedOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedOrderNull()
            Me(Me.tablePage.ReceivedOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPageNameNull() As Boolean
            Return Me.IsNull(Me.tablePage.PageNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPageNameNull()
            Me(Me.tablePage.PageNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPixelHieghtNull() As Boolean
            Return Me.IsNull(Me.tablePage.PixelHieghtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPixelHieghtNull()
            Me(Me.tablePage.PixelHieghtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPixelWidthNull() As Boolean
            Return Me.IsNull(Me.tablePage.PixelWidthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPixelWidthNull()
            Me(Me.tablePage.PixelWidthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeIdNull() As Boolean
            Return Me.IsNull(Me.tablePage.SizeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeIdNull()
            Me(Me.tablePage.SizeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tablePage.SizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeNull()
            Me(Me.tablePage.SizeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UtilityRow
        Inherits Global.System.Data.DataRow
        
        Private tableUtility As UtilityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUtility = CType(Me.Table,UtilityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScanDPI() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUtility.ScanDPIColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScanDPI' in table 'Utility' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtility.ScanDPIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScanDPINull() As Boolean
            Return Me.IsNull(Me.tableUtility.ScanDPIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScanDPINull()
            Me(Me.tableUtility.ScanDPIColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateFSIRow
        Inherits Global.System.Data.DataRow
        
        Private tablemt_proc_GetPossibleDuplicateFSI As mt_proc_GetPossibleDuplicateFSIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemt_proc_GetPossibleDuplicateFSI = CType(Me.Table,mt_proc_GetPossibleDuplicateFSIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleID() As Integer
            Get
                Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.VehicleIDColumn),Integer)
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.VehicleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Retailer() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetailerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Retailer' in table 'mt_proc_GetPossibleDuplicateFSI' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetailerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Language() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Language' in table 'mt_proc_GetPossibleDuplicateFSI' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BreakDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.BreakDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BreakDt' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.BreakDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Media() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Media' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Event() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Event' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Theme() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Theme' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Market() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Publication() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Publication' in table 'mt_proc_GetPossibleDuplicateFSI' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.StartDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDt' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.StartDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EndDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDt' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EndDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualPageCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ActualPageCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualPageCount' in table 'mt_proc_GetPossibleDuplicateFSI'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ActualPageCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SizeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SizeId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TradeClass() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeClass' in table 'mt_proc_GetPossibleDuplicateFSI' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CouponInd() As Byte
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponIndColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CouponInd' in table 'mt_proc_GetPossibleDuplicateFSI' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponIndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coupon() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Coupon' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreateDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDt' in table 'mt_proc_GetPossibleDuplicateFSI' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreateDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Priority() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PriorityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Priority' in table 'mt_proc_GetPossibleDuplicateFSI' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PriorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedById() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedById' in table 'mt_proc_GetPossibleDuplicateFSI' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'mt_proc_GetPossibleDuplicateFSI' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RetId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MediaId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MediaId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EventId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ThemeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ThemeId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MktId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MktIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MktId' in table 'mt_proc_GetPossibleDuplicateFSI' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MktIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PublicationId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PublicationId' in table 'mt_proc_GetPossibleDuplicateFSI' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TradeClassId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeClassId' in table 'mt_proc_GetPossibleDuplicateFSI' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LanguageId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LanguageId' in table 'mt_proc_GetPossibleDuplicateFSI' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetailerNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.RetailerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetailerNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetailerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBreakDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.BreakDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBreakDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.BreakDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_EventNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.EventColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_EventNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThemeNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThemeNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarketNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.MarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarketNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.StartDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.StartDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.EndDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EndDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualPageCountNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.ActualPageCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualPageCountNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ActualPageCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.SizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTradeClassNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTradeClassNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCouponIndNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponIndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCouponIndNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponIndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCouponNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCouponNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CouponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.CreateDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreateDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriorityNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.PriorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriorityNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PriorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.RetIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.RetIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MediaIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEventIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.EventIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEventIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.EventIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThemeIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThemeIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.ThemeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMktIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.MktIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMktIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.MktIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.PublicationIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTradeClassIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTradeClassIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.TradeClassIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateFSI.LanguageIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateNonFSIROPRow
        Inherits Global.System.Data.DataRow
        
        Private tablemt_proc_GetPossibleDuplicateNonFSIROP As mt_proc_GetPossibleDuplicateNonFSIROPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemt_proc_GetPossibleDuplicateNonFSIROP = CType(Me.Table,mt_proc_GetPossibleDuplicateNonFSIROPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleID() As Integer
            Get
                Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.VehicleIDColumn),Integer)
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.VehicleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Retailer() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetailerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Retailer' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetailerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Language() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Language' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BreakDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.BreakDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BreakDt' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.BreakDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Media() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Media' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Event() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Event' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Theme() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Theme' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Market() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Publication() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Publication' in table 'mt_proc_GetPossibleDuplicateNonFSIRO"& _ 
                            "P' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.StartDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDt' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.StartDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EndDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDt' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EndDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualPageCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ActualPageCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualPageCount' in table 'mt_proc_GetPossibleDuplicateNonF"& _ 
                            "SIROP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ActualPageCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SizeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SizeId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TradeClass() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeClass' in table 'mt_proc_GetPossibleDuplicateNonFSIROP"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CouponInd() As Byte
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponIndColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CouponInd' in table 'mt_proc_GetPossibleDuplicateNonFSIROP'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponIndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coupon() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Coupon' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreateDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDt' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreateDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Priority() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PriorityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Priority' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PriorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedById() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedById' in table 'mt_proc_GetPossibleDuplicateNonFSIRO"& _ 
                            "P' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'mt_proc_GetPossibleDuplicateNonFSIROP'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RetId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MediaId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MediaId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EventId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ThemeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ThemeId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MktId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MktIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MktId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MktIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PublicationId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PublicationId' in table 'mt_proc_GetPossibleDuplicateNonFSI"& _ 
                            "ROP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TradeClassId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TradeClassId' in table 'mt_proc_GetPossibleDuplicateNonFSIR"& _ 
                            "OP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LanguageId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LanguageId' in table 'mt_proc_GetPossibleDuplicateNonFSIROP"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetailerNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetailerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetailerNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetailerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBreakDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.BreakDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBreakDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.BreakDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_EventNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_EventNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThemeNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThemeNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarketNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarketNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.StartDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.StartDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EndDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EndDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualPageCountNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ActualPageCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualPageCountNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ActualPageCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.SizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTradeClassNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTradeClassNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCouponIndNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponIndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCouponIndNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponIndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCouponNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCouponNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CouponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreateDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreateDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriorityNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PriorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriorityNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PriorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.RetIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MediaIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEventIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEventIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.EventIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThemeIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThemeIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.ThemeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMktIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MktIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMktIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.MktIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.PublicationIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTradeClassIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTradeClassIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.TradeClassIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateNonFSIROP.LanguageIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateROPRow
        Inherits Global.System.Data.DataRow
        
        Private tablemt_proc_GetPossibleDuplicateROP As mt_proc_GetPossibleDuplicateROPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemt_proc_GetPossibleDuplicateROP = CType(Me.Table,mt_proc_GetPossibleDuplicateROPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleID() As Integer
            Get
                Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.VehicleIDColumn),Integer)
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.VehicleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BreakDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.BreakDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BreakDt' in table 'mt_proc_GetPossibleDuplicateROP' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.BreakDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Media() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Media' in table 'mt_proc_GetPossibleDuplicateROP' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Market() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.MarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Market' in table 'mt_proc_GetPossibleDuplicateROP' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.MarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Publication() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Publication' in table 'mt_proc_GetPossibleDuplicateROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.StartDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDt' in table 'mt_proc_GetPossibleDuplicateROP' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.StartDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.EndDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDt' in table 'mt_proc_GetPossibleDuplicateROP' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.EndDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PullPageCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.PullPageCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PullPageCount' in table 'mt_proc_GetPossibleDuplicateROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.PullPageCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SizeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SizeId' in table 'mt_proc_GetPossibleDuplicateROP' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'mt_proc_GetPossibleDuplicateROP' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreateDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDt' in table 'mt_proc_GetPossibleDuplicateROP' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreateDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Language() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Language' in table 'mt_proc_GetPossibleDuplicateROP' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'mt_proc_GetPossibleDuplicateROP' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Priority() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.PriorityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Priority' in table 'mt_proc_GetPossibleDuplicateROP' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.PriorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedById() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedById' in table 'mt_proc_GetPossibleDuplicateROP' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MediaId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MediaId' in table 'mt_proc_GetPossibleDuplicateROP' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MktId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.MktIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MktId' in table 'mt_proc_GetPossibleDuplicateROP' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.MktIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PublicationId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PublicationId' in table 'mt_proc_GetPossibleDuplicateROP' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LanguageId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LanguageId' in table 'mt_proc_GetPossibleDuplicateROP' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBreakDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.BreakDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBreakDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.BreakDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.MediaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarketNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.MarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarketNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.MarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.StartDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.StartDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.EndDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.EndDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPullPageCountNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.PullPageCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPullPageCountNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.PullPageCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.SizeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.SizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSizeNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.SizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDtNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.CreateDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDtNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreateDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriorityNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.PriorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriorityNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.PriorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.CreatedByIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediaIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.MediaIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediaIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.MediaIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMktIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.MktIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMktIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.MktIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicationIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicationIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.PublicationIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageIdNull() As Boolean
            Return Me.IsNull(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageIdNull()
            Me(Me.tablemt_proc_GetPossibleDuplicateROP.LanguageIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DupFormLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableDupFormLog As DupFormLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDupFormLog = CType(Me.Table,DupFormLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupFormId() As Integer
            Get
                Return CType(Me(Me.tableDupFormLog.DupFormIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupFormLog.DupFormIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDupFormLog.VehicleIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VehicleId' in table 'DupFormLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDupFormLog.VehicleIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckDt() As Date
            Get
                Return CType(Me(Me.tableDupFormLog.CheckDtColumn),Date)
            End Get
            Set
                Me(Me.tableDupFormLog.CheckDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserId() As Integer
            Get
                Return CType(Me(Me.tableDupFormLog.UserIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupFormLog.UserIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Form() As String
            Get
                Return CType(Me(Me.tableDupFormLog.FormColumn),String)
            End Get
            Set
                Me(Me.tableDupFormLog.FormColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionTaken() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDupFormLog.ActionTakenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActionTaken' in table 'DupFormLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDupFormLog.ActionTakenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicleIdNull() As Boolean
            Return Me.IsNull(Me.tableDupFormLog.VehicleIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicleIdNull()
            Me(Me.tableDupFormLog.VehicleIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionTakenNull() As Boolean
            Return Me.IsNull(Me.tableDupFormLog.ActionTakenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionTakenNull()
            Me(Me.tableDupFormLog.ActionTakenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDupCheckLogRows() As DupCheckLogRow()
            If (Me.Table.ChildRelations("FK_DupCheckLog_DupFormLog") Is Nothing) Then
                Return New DupCheckLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DupCheckLog_DupFormLog")),DupCheckLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DupCheckLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableDupCheckLog As DupCheckLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDupCheckLog = CType(Me.Table,DupCheckLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupCheckLogId() As Integer
            Get
                Return CType(Me(Me.tableDupCheckLog.DupCheckLogIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupCheckLog.DupCheckLogIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupFormId() As Integer
            Get
                Return CType(Me(Me.tableDupCheckLog.DupFormIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupCheckLog.DupFormIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRange() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDupCheckLog.DateRangeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRange' in table 'DupCheckLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDupCheckLog.DateRangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RunDt() As Date
            Get
                Return CType(Me(Me.tableDupCheckLog.RunDtColumn),Date)
            End Get
            Set
                Me(Me.tableDupCheckLog.RunDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupFormLogRow() As DupFormLogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DupCheckLog_DupFormLog")),DupFormLogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DupCheckLog_DupFormLog"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRangeNull() As Boolean
            Return Me.IsNull(Me.tableDupCheckLog.DateRangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRangeNull()
            Me(Me.tableDupCheckLog.DateRangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDupCheckResultsLogRows() As DupCheckResultsLogRow()
            If (Me.Table.ChildRelations("FK_DupCheckResultsLog_DupCheckLog") Is Nothing) Then
                Return New DupCheckResultsLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DupCheckResultsLog_DupCheckLog")),DupCheckResultsLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DupCheckResultsLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableDupCheckResultsLog As DupCheckResultsLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDupCheckResultsLog = CType(Me.Table,DupCheckResultsLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupCheckResultsLogId() As Integer
            Get
                Return CType(Me(Me.tableDupCheckResultsLog.DupCheckResultsLogIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupCheckResultsLog.DupCheckResultsLogIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupCheckLogId() As Integer
            Get
                Return CType(Me(Me.tableDupCheckResultsLog.DupCheckLogIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupCheckResultsLog.DupCheckLogIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleId() As Integer
            Get
                Return CType(Me(Me.tableDupCheckResultsLog.VehicleIdColumn),Integer)
            End Get
            Set
                Me(Me.tableDupCheckResultsLog.VehicleIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DupCheckLogRow() As DupCheckLogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DupCheckResultsLog_DupCheckLog")),DupCheckLogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DupCheckResultsLog_DupCheckLog"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PageRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PageRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PageRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UtilityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UtilityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UtilityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UtilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class mt_proc_GetPossibleDuplicateFSIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mt_proc_GetPossibleDuplicateFSIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As mt_proc_GetPossibleDuplicateFSIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As mt_proc_GetPossibleDuplicateFSIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class mt_proc_GetPossibleDuplicateNonFSIROPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mt_proc_GetPossibleDuplicateNonFSIROPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As mt_proc_GetPossibleDuplicateNonFSIROPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As mt_proc_GetPossibleDuplicateNonFSIROPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class mt_proc_GetPossibleDuplicateROPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mt_proc_GetPossibleDuplicateROPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As mt_proc_GetPossibleDuplicateROPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As mt_proc_GetPossibleDuplicateROPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DupFormLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DupFormLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DupFormLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DupFormLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DupCheckLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DupCheckLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DupCheckLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DupCheckLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DupCheckResultsLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DupCheckResultsLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DupCheckResultsLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DupCheckResultsLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DupCheckDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PageTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Page"
            tableMapping.ColumnMappings.Add("VehicleId", "VehicleId")
            tableMapping.ColumnMappings.Add("PageId", "PageId")
            tableMapping.ColumnMappings.Add("ImageName", "ImageName")
            tableMapping.ColumnMappings.Add("PageTypeId", "PageTypeId")
            tableMapping.ColumnMappings.Add("ReceivedOrder", "ReceivedOrder")
            tableMapping.ColumnMappings.Add("PageName", "PageName")
            tableMapping.ColumnMappings.Add("PixelHieght", "PixelHieght")
            tableMapping.ColumnMappings.Add("PixelWidth", "PixelWidth")
            tableMapping.ColumnMappings.Add("SizeId", "SizeId")
            tableMapping.ColumnMappings.Add("Size", "Size")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT VehicleId, PageId, ISNULL(ImageName, REPLICATE('0', 3 - LEN(CAST(ReceivedO"& _ 
                "rder AS VARCHAR(3)))) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"+ CAST(ReceivedOrder AS VARCHAR(3))) ImageNam"& _ 
                "e"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", PageTypeId, ReceivedOrder, PageName, PixelHieght, PixelWidth, SizeId, dbo"& _ 
                ".GetSizeText(SizeID) [Size]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Page"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (VehicleId = @VehicleId)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDE"& _ 
                "R BY ReceivedOrder"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VehicleId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByVehicleId(ByVal dataTable As DupCheckDataSet.PageDataTable, ByVal VehicleId As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VehicleId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(VehicleId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UtilityTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Utility"
            tableMapping.ColumnMappings.Add("ScanDPI", "ScanDPI")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ScanDPI"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Expectation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (RetId = @RetId) AND (Mkt"& _ 
                "Id = @MktId) AND (MediaId = @MediaId)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RetId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MktId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MktId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediaId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MediaId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     CodeId, Descrip"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         vwVehicleStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Descrip = 'D"& _ 
                "uplicate Publication')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ScanDPI"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Expectation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (RetId = @RetId) AND (Mkt"& _ 
                "Id = @MktId) AND (MediaId = @MediaId)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RetId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MktId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MktId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediaId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MediaId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     FName + LEFT(LName, 1) AS ShortName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         [User]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (U"& _ 
                "serID = @UserId)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT COUNT(*) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM [UserRoles] UR "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN [Role] R ON UR.RoleId=R.RoleI"& _ 
                "d AND R.Descrip='Administrator' AND UR.UserId=@UserId"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.UtilityDataTable, ByVal RetId As Global.System.Nullable(Of Integer), ByVal MktId As Global.System.Nullable(Of Integer), ByVal MediaId As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RetId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RetId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MktId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MktId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MediaId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MediaId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDuplicatePublicationStatusId() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetScanDPI(ByVal RetId As Global.System.Nullable(Of Integer), ByVal MktId As Global.System.Nullable(Of Integer), ByVal MediaId As Global.System.Nullable(Of Integer)) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (RetId.HasValue = true) Then
                command.Parameters(0).Value = CType(RetId.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MktId.HasValue = true) Then
                command.Parameters(1).Value = CType(MktId.Value,Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MediaId.HasValue = true) Then
                command.Parameters(2).Value = CType(MediaId.Value,Integer)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetShortName(ByVal UserId As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(UserId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function IsUserAnAdministrator(ByVal UserId As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(UserId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateFSITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "mt_proc_GetPossibleDuplicateFSI"
            tableMapping.ColumnMappings.Add("VehicleID", "VehicleID")
            tableMapping.ColumnMappings.Add("Retailer", "Retailer")
            tableMapping.ColumnMappings.Add("Language", "Language")
            tableMapping.ColumnMappings.Add("BreakDt", "BreakDt")
            tableMapping.ColumnMappings.Add("Media", "Media")
            tableMapping.ColumnMappings.Add("Event", "Event")
            tableMapping.ColumnMappings.Add("Theme", "Theme")
            tableMapping.ColumnMappings.Add("Market", "Market")
            tableMapping.ColumnMappings.Add("Publication", "Publication")
            tableMapping.ColumnMappings.Add("StartDt", "StartDt")
            tableMapping.ColumnMappings.Add("EndDt", "EndDt")
            tableMapping.ColumnMappings.Add("ActualPageCount", "ActualPageCount")
            tableMapping.ColumnMappings.Add("SizeId", "SizeId")
            tableMapping.ColumnMappings.Add("Size", "Size")
            tableMapping.ColumnMappings.Add("TradeClass", "TradeClass")
            tableMapping.ColumnMappings.Add("CouponInd", "CouponInd")
            tableMapping.ColumnMappings.Add("Coupon", "Coupon")
            tableMapping.ColumnMappings.Add("CreateDt", "CreateDt")
            tableMapping.ColumnMappings.Add("Priority", "Priority")
            tableMapping.ColumnMappings.Add("CreatedById", "CreatedById")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("RetId", "RetId")
            tableMapping.ColumnMappings.Add("MediaId", "MediaId")
            tableMapping.ColumnMappings.Add("EventId", "EventId")
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId")
            tableMapping.ColumnMappings.Add("MktId", "MktId")
            tableMapping.ColumnMappings.Add("PublicationId", "PublicationId")
            tableMapping.ColumnMappings.Add("TradeClassId", "TradeClassId")
            tableMapping.ColumnMappings.Add("LanguageId", "LanguageId")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.mt_proc_GetPossibleDuplicateFSI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pRetId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMktId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pAdDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMediaList", Global.System.Data.SqlDbType.Xml, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pLanguageId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pDays", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.mt_proc_GetPossibleDuplicateFSIDataTable, ByVal pRetId As Global.System.Nullable(Of Integer), ByVal pMktId As Global.System.Nullable(Of Integer), ByVal pAdDate As Global.System.Nullable(Of Date), ByVal pMediaList As Object, ByVal pLanguageId As Global.System.Nullable(Of Integer), ByVal pDays As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pRetId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(pRetId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (pMktId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(pMktId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (pAdDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(pAdDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (pMediaList Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(pMediaList,Object)
            End If
            If (pLanguageId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(pLanguageId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (pDays.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(pDays.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateNonFSIROPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "mt_proc_GetPossibleDuplicateNonFSIROP"
            tableMapping.ColumnMappings.Add("VehicleID", "VehicleID")
            tableMapping.ColumnMappings.Add("Retailer", "Retailer")
            tableMapping.ColumnMappings.Add("Language", "Language")
            tableMapping.ColumnMappings.Add("BreakDt", "BreakDt")
            tableMapping.ColumnMappings.Add("Media", "Media")
            tableMapping.ColumnMappings.Add("Event", "Event")
            tableMapping.ColumnMappings.Add("Theme", "Theme")
            tableMapping.ColumnMappings.Add("Market", "Market")
            tableMapping.ColumnMappings.Add("Publication", "Publication")
            tableMapping.ColumnMappings.Add("StartDt", "StartDt")
            tableMapping.ColumnMappings.Add("EndDt", "EndDt")
            tableMapping.ColumnMappings.Add("ActualPageCount", "ActualPageCount")
            tableMapping.ColumnMappings.Add("SizeId", "SizeId")
            tableMapping.ColumnMappings.Add("Size", "Size")
            tableMapping.ColumnMappings.Add("TradeClass", "TradeClass")
            tableMapping.ColumnMappings.Add("CouponInd", "CouponInd")
            tableMapping.ColumnMappings.Add("Coupon", "Coupon")
            tableMapping.ColumnMappings.Add("CreateDt", "CreateDt")
            tableMapping.ColumnMappings.Add("Priority", "Priority")
            tableMapping.ColumnMappings.Add("CreatedById", "CreatedById")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("RetId", "RetId")
            tableMapping.ColumnMappings.Add("MediaId", "MediaId")
            tableMapping.ColumnMappings.Add("EventId", "EventId")
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId")
            tableMapping.ColumnMappings.Add("MktId", "MktId")
            tableMapping.ColumnMappings.Add("PublicationId", "PublicationId")
            tableMapping.ColumnMappings.Add("TradeClassId", "TradeClassId")
            tableMapping.ColumnMappings.Add("LanguageId", "LanguageId")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.mt_proc_GetPossibleDuplicateNonFSIROP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pRetId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMktId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pAdDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMediaList", Global.System.Data.SqlDbType.Xml, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pStartDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pEndDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pLanguageId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pDays", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROPDataTable, ByVal pRetId As Global.System.Nullable(Of Integer), ByVal pMktId As Global.System.Nullable(Of Integer), ByVal pAdDate As Global.System.Nullable(Of Date), ByVal pMediaList As Object, ByVal pStartDate As Global.System.Nullable(Of Date), ByVal pEndDate As Global.System.Nullable(Of Date), ByVal pLanguageId As Global.System.Nullable(Of Integer), ByVal pDays As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pRetId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(pRetId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (pMktId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(pMktId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (pAdDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(pAdDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (pMediaList Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(pMediaList,Object)
            End If
            If (pStartDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(pStartDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (pEndDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(pEndDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (pLanguageId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(pLanguageId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (pDays.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(pDays.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mt_proc_GetPossibleDuplicateROPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "mt_proc_GetPossibleDuplicateROP"
            tableMapping.ColumnMappings.Add("VehicleID", "VehicleID")
            tableMapping.ColumnMappings.Add("BreakDt", "BreakDt")
            tableMapping.ColumnMappings.Add("Media", "Media")
            tableMapping.ColumnMappings.Add("Market", "Market")
            tableMapping.ColumnMappings.Add("Publication", "Publication")
            tableMapping.ColumnMappings.Add("StartDt", "StartDt")
            tableMapping.ColumnMappings.Add("EndDt", "EndDt")
            tableMapping.ColumnMappings.Add("PullPageCount", "PullPageCount")
            tableMapping.ColumnMappings.Add("SizeId", "SizeId")
            tableMapping.ColumnMappings.Add("Size", "Size")
            tableMapping.ColumnMappings.Add("CreateDt", "CreateDt")
            tableMapping.ColumnMappings.Add("Language", "Language")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("Priority", "Priority")
            tableMapping.ColumnMappings.Add("CreatedById", "CreatedById")
            tableMapping.ColumnMappings.Add("MediaId", "MediaId")
            tableMapping.ColumnMappings.Add("MktId", "MktId")
            tableMapping.ColumnMappings.Add("PublicationId", "PublicationId")
            tableMapping.ColumnMappings.Add("LanguageId", "LanguageId")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.mt_proc_GetPossibleDuplicateROP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pRetId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMktId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pPublicationId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pAdDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pMediaList", Global.System.Data.SqlDbType.Xml, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pLanguageId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pDays", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.mt_proc_GetPossibleDuplicateROPDataTable, ByVal pRetId As Global.System.Nullable(Of Integer), ByVal pMktId As Global.System.Nullable(Of Integer), ByVal pPublicationId As Global.System.Nullable(Of Integer), ByVal pAdDate As Global.System.Nullable(Of Date), ByVal pMediaList As Object, ByVal pLanguageId As Global.System.Nullable(Of Integer), ByVal pDays As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pRetId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(pRetId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (pMktId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(pMktId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (pPublicationId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(pPublicationId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (pAdDate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(pAdDate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (pMediaList Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(pMediaList,Object)
            End If
            If (pLanguageId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(pLanguageId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (pDays.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(pDays.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DupFormLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DupFormLog"
            tableMapping.ColumnMappings.Add("DupFormId", "DupFormId")
            tableMapping.ColumnMappings.Add("VehicleId", "VehicleId")
            tableMapping.ColumnMappings.Add("CheckDt", "CheckDt")
            tableMapping.ColumnMappings.Add("UserId", "UserId")
            tableMapping.ColumnMappings.Add("Form", "Form")
            tableMapping.ColumnMappings.Add("ActionTaken", "ActionTaken")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DupFormLog] WHERE (([DupFormId] = @Original_DupFormId) AND ((@IsNull"& _ 
                "_VehicleId = 1 AND [VehicleId] IS NULL) OR ([VehicleId] = @Original_VehicleId)) "& _ 
                "AND ([CheckDt] = @Original_CheckDt) AND ([UserId] = @Original_UserId) AND ([Form"& _ 
                "] = @Original_Form) AND ((@IsNull_ActionTaken = 1 AND [ActionTaken] IS NULL) OR "& _ 
                "([ActionTaken] = @Original_ActionTaken)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DupFormId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CheckDt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckDt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Form", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Form", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DupFormLog] ([VehicleId], [CheckDt], [UserId], [Form], [ActionTaken]"& _ 
                ") VALUES (@VehicleId, @CheckDt, @UserId, @Form, @ActionTaken);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DupFormId"& _ 
                ", VehicleId, CheckDt, UserId, Form, ActionTaken FROM DupFormLog WHERE (DupFormId"& _ 
                " = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckDt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckDt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Form", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Form", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DupFormLog] SET [VehicleId] = @VehicleId, [CheckDt] = @CheckDt, [UserId] "& _ 
                "= @UserId, [Form] = @Form, [ActionTaken] = @ActionTaken WHERE (([DupFormId] = @O"& _ 
                "riginal_DupFormId) AND ((@IsNull_VehicleId = 1 AND [VehicleId] IS NULL) OR ([Veh"& _ 
                "icleId] = @Original_VehicleId)) AND ([CheckDt] = @Original_CheckDt) AND ([UserId"& _ 
                "] = @Original_UserId) AND ([Form] = @Original_Form) AND ((@IsNull_ActionTaken = "& _ 
                "1 AND [ActionTaken] IS NULL) OR ([ActionTaken] = @Original_ActionTaken)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT DupFormId, VehicleId, CheckDt, UserId, Form, ActionTaken FROM DupFormLog WHER"& _ 
                "E (DupFormId = @DupFormId)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckDt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckDt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Form", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Form", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DupFormId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CheckDt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckDt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Form", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Form", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ActionTaken", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ActionTaken", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     DupFormId, VehicleId, CheckDt, UserId, Form, ActionTaken"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                " DupFormLog"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (DupFormId = @DupFormId)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [DupFormLog] SET "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"[ActionTaken] = (SELECT CodeId FROM vwDupCheckAction W"& _ 
                "HERE Descrip=@ActionTaken)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (DupFormId = @DupFormId)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"/*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UPDATE [DupFor"& _ 
                "mLog] SET "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"[ActionTaken] = @ActionTaken "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (DupFormId = @DupFormId)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"*/"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ActionTaken", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [DupFormLog] SET "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"[VehicleId] = @VehicleId"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ([DupFormId] = @DupFor"& _ 
                "mId);"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VehicleId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.DupFormLogDataTable, ByVal DupFormId As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DupFormId,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DupCheckDataSet.DupFormLogDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DupCheckDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DupFormLog")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DupFormId As Integer, ByVal Original_VehicleId As Global.System.Nullable(Of Integer), ByVal Original_CheckDt As Date, ByVal Original_UserId As Integer, ByVal Original_Form As String, ByVal Original_ActionTaken As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DupFormId,Integer)
            If (Original_VehicleId.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VehicleId.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CheckDt,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UserId,Integer)
            If (Original_Form Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Form")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Form,String)
            End If
            If (Original_ActionTaken.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ActionTaken.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal VehicleId As Global.System.Nullable(Of Integer), ByVal CheckDt As Date, ByVal UserId As Integer, ByVal Form As String, ByVal ActionTaken As Global.System.Nullable(Of Integer)) As Integer
            If (VehicleId.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(VehicleId.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CheckDt,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(UserId,Integer)
            If (Form Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Form")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Form,String)
            End If
            If (ActionTaken.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ActionTaken.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VehicleId As Global.System.Nullable(Of Integer), ByVal CheckDt As Date, ByVal UserId As Integer, ByVal Form As String, ByVal ActionTaken As Global.System.Nullable(Of Integer), ByVal Original_DupFormId As Integer, ByVal Original_VehicleId As Global.System.Nullable(Of Integer), ByVal Original_CheckDt As Date, ByVal Original_UserId As Integer, ByVal Original_Form As String, ByVal Original_ActionTaken As Global.System.Nullable(Of Integer), ByVal DupFormId As Integer) As Integer
            If (VehicleId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(VehicleId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CheckDt,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UserId,Integer)
            If (Form Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Form")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Form,String)
            End If
            If (ActionTaken.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ActionTaken.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_DupFormId,Integer)
            If (Original_VehicleId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_VehicleId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CheckDt,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UserId,Integer)
            If (Original_Form Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Form")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Form,String)
            End If
            If (Original_ActionTaken.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ActionTaken.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DupFormId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VehicleId As Global.System.Nullable(Of Integer), ByVal CheckDt As Date, ByVal UserId As Integer, ByVal Form As String, ByVal ActionTaken As Global.System.Nullable(Of Integer), ByVal Original_DupFormId As Integer, ByVal Original_VehicleId As Global.System.Nullable(Of Integer), ByVal Original_CheckDt As Date, ByVal Original_UserId As Integer, ByVal Original_Form As String, ByVal Original_ActionTaken As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(VehicleId, CheckDt, UserId, Form, ActionTaken, Original_DupFormId, Original_VehicleId, Original_CheckDt, Original_UserId, Original_Form, Original_ActionTaken, Original_DupFormId)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateDupFormLog_ActionTaken(ByVal DupFormId As Integer, ByVal ActionTaken As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(DupFormId,Integer)
            If (ActionTaken Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ActionTaken,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateDupFormLog_VehicleId(ByVal VehicleId As Global.System.Nullable(Of Integer), ByVal DupFormId As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (VehicleId.HasValue = true) Then
                command.Parameters(0).Value = CType(VehicleId.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            command.Parameters(1).Value = CType(DupFormId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DupCheckLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DupCheckLog"
            tableMapping.ColumnMappings.Add("DupCheckLogId", "DupCheckLogId")
            tableMapping.ColumnMappings.Add("DupFormId", "DupFormId")
            tableMapping.ColumnMappings.Add("DateRange", "DateRange")
            tableMapping.ColumnMappings.Add("RunDt", "RunDt")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DupCheckLog] ([DupFormId], [DateRange], [RunDt]) VALUES (@DupFormId,"& _ 
                " @DateRange, GETDATE());"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DupCheckLogId, DupFormId, DateRange, RunDt FROM"& _ 
                " DupCheckLog WHERE (DupCheckLogId = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRange", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM DupCheckLog "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE DupFormId=@DupFormId"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupFormId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupFormId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.DupCheckLogDataTable, ByVal DupFormId As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DupFormId,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DupCheckDataSet.DupCheckLogDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DupCheckDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DupCheckLog")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DupFormId As Integer, ByVal DateRange As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DupFormId,Integer)
            If (DateRange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateRange.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DupCheckResultsLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DupCheckResultsLog"
            tableMapping.ColumnMappings.Add("DupCheckResultsLogId", "DupCheckResultsLogId")
            tableMapping.ColumnMappings.Add("DupCheckLogId", "DupCheckLogId")
            tableMapping.ColumnMappings.Add("VehicleId", "VehicleId")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DupCheckResultsLog] ([DupCheckLogId], [VehicleId]) VALUES (@DupCheck"& _ 
                "LogId, @VehicleId);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DupCheckResultsLogId, DupCheckLogId, VehicleId FROM "& _ 
                "DupCheckResultsLog WHERE (DupCheckResultsLogId = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupCheckLogId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DupCheckLogId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VehicleId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VehicleId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MCAP.My.MySettings.Default.MCAPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM DupCheckResultsLog"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE DupCheckLogId=@DupCheckLogId"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DupCheckLogId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DupCheckLogId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DupCheckDataSet.DupCheckResultsLogDataTable, ByVal DupCheckLogId As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DupCheckLogId,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DupCheckDataSet.DupCheckResultsLogDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DupCheckDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DupCheckResultsLog")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DupCheckLogId As Integer, ByVal VehicleId As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DupCheckLogId,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(VehicleId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dupFormLogTableAdapter As DupFormLogTableAdapter
        
        Private _dupCheckLogTableAdapter As DupCheckLogTableAdapter
        
        Private _dupCheckResultsLogTableAdapter As DupCheckResultsLogTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DupFormLogTableAdapter() As DupFormLogTableAdapter
            Get
                Return Me._dupFormLogTableAdapter
            End Get
            Set
                Me._dupFormLogTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DupCheckLogTableAdapter() As DupCheckLogTableAdapter
            Get
                Return Me._dupCheckLogTableAdapter
            End Get
            Set
                Me._dupCheckLogTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DupCheckResultsLogTableAdapter() As DupCheckResultsLogTableAdapter
            Get
                Return Me._dupCheckResultsLogTableAdapter
            End Get
            Set
                Me._dupCheckResultsLogTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dupFormLogTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dupFormLogTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dupFormLogTableAdapter.Connection
                End If
                If ((Not (Me._dupCheckLogTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dupCheckLogTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dupCheckLogTableAdapter.Connection
                End If
                If ((Not (Me._dupCheckResultsLogTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dupCheckResultsLogTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dupCheckResultsLogTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DupCheckDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DupFormLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dupFormLogTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DupCheckLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dupCheckLogTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DupCheckResultsLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dupCheckResultsLogTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DupCheckDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DupFormLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dupFormLogTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DupCheckLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dupCheckLogTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DupCheckResultsLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dupCheckResultsLogTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DupCheckDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DupCheckResultsLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dupCheckResultsLogTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DupCheckLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dupCheckLogTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DupFormLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dupFormLogTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DupCheckDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dupFormLogTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dupFormLogTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dupCheckLogTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dupCheckLogTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dupCheckResultsLogTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dupCheckResultsLogTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dupFormLogTableAdapter, Me._dupFormLogTableAdapter.Connection)
                    Me._dupFormLogTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dupFormLogTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dupFormLogTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dupFormLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dupFormLogTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dupCheckLogTableAdapter, Me._dupCheckLogTableAdapter.Connection)
                    Me._dupCheckLogTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dupCheckLogTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dupCheckLogTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dupCheckLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dupCheckLogTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dupCheckResultsLogTableAdapter, Me._dupCheckResultsLogTableAdapter.Connection)
                    Me._dupCheckResultsLogTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dupCheckResultsLogTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dupCheckResultsLogTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dupCheckResultsLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dupCheckResultsLogTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dupFormLogTableAdapter) Is Nothing) Then
                    Me._dupFormLogTableAdapter.Connection = CType(revertConnections(Me._dupFormLogTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dupFormLogTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dupCheckLogTableAdapter) Is Nothing) Then
                    Me._dupCheckLogTableAdapter.Connection = CType(revertConnections(Me._dupCheckLogTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dupCheckLogTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dupCheckResultsLogTableAdapter) Is Nothing) Then
                    Me._dupCheckResultsLogTableAdapter.Connection = CType(revertConnections(Me._dupCheckResultsLogTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dupCheckResultsLogTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
