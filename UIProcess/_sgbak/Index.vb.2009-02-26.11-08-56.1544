Namespace UI.Processors


  Public Class Index
    Inherits IndexBase
    Implements IBarcode



#Region " Events "


    Public Event Initializing()
    Public Event Initialized()

    Public Event PreparingAdapter()
    Public Event AdapterPrepared()

    Public Event LoadingData()
    Public Event DataLoaded()

    Public Event LoadingVehicle(ByVal vehicleId As Integer)
    Public Event VehicleLoaded(ByVal vehicleRow As QCDataSet.vwCircularRow)
    Public Event VehicleNotFound(ByVal vehicleId As Integer)
    Public Event InvalidVehicleStatus(ByVal statusText As String)

    Public Event LoadingMarkets()
    Public Event MarketsLoaded()

    Public Event LoadingPublications()
    Public Event PublicationsLoaded()

    Public Event LoadingRetailers()
    Public Event RetailersLoaded()

    Public Event ValidatingInputs()
    Public Event InputsValidated()
    Public Event InvalidInputExist()

    Public Event SynchronizingVehicleInformation()
    Public Event VehicleInformationSynchronized()


#End Region



    Protected m_vehicleAdapter As QCDataSetTableAdapters.vwCircularTableAdapter



    Sub New()

      m_vehicleAdapter = New QCDataSetTableAdapters.vwCircularTableAdapter

    End Sub



    Protected ReadOnly Property VehicleAdapter() As QCDataSetTableAdapters.vwCircularTableAdapter
      Get
        Return m_vehicleAdapter
      End Get
    End Property



    Public Overridable Sub Initialize()

      RaiseEvent Initializing()

      SetAdaptersConnectionString()

      VehicleAdapter.Connection.ConnectionString = GetConnectionStringForAppDB()

      RaiseEvent Initialized()

    End Sub



    ''' <summary>
    ''' Loads information from database.
    ''' </summary>
    ''' <remarks></remarks>
    Public Overrides Sub LoadDataSet()

      RaiseEvent LoadingData()

      MyBase.LoadDataSet()

      RaiseEvent DataLoaded()

    End Sub


    ''' <summary>
    ''' Loads market based on sender of the supplied envelope.
    ''' </summary>
    ''' <param name="envelopeId"></param>
    ''' <remarks></remarks>
    Public Sub LoadMarket(ByVal envelopeId As Integer)

      RaiseEvent LoadingMarkets()

      LoadMarkets(envelopeId)

      RaiseEvent MarketsLoaded()

    End Sub


    ''' <summary>
    ''' Loads publication based on supplied market id.
    ''' </summary>
    ''' <param name="marketId"></param>
    ''' <remarks></remarks>
    Public Sub LoadPublication(ByVal marketId As Integer)

      RaiseEvent LoadingPublications()

      LoadPublications(marketId)

      RaiseEvent PublicationsLoaded()

    End Sub


    ''' <summary>
    ''' Loads retailer based on expectation table by filtering on supplied mediaId and marketId values.
    ''' </summary>
    ''' <param name="mediaId"></param>
    ''' <param name="marketId"></param>
    ''' <remarks></remarks>
    Public Sub LoadRetailer(ByVal mediaId As Integer, ByVal marketId As Integer)

      RaiseEvent LoadingRetailers()

      LoadRetailers(mediaId, marketId)

      RaiseEvent RetailersLoaded()

    End Sub


    Public Sub CopyPageInformation(ByVal sourceVehicleId As Integer, ByVal vehicleId As Integer, ByVal formName As String)
      Dim pageAdapter As QCDataSetTableAdapters.PageTableAdapter
      Dim vehicleIdList As String


      pageAdapter = New QCDataSetTableAdapters.PageTableAdapter
      vehicleIdList = "<VehicleIdList><VehicleId>" + vehicleId.ToString() + "</VehicleId></VehicleIdList>"

      pageAdapter.CopyVehiclePageInformation(sourceVehicleId, vehicleIdList, formName)

      pageAdapter.Dispose()
      pageAdapter = Nothing
      vehicleIdList = Nothing

    End Sub

    ''' <summary>
    ''' Loads vehicle information from vwCircular based on supplied vehicle Id.
    ''' </summary>
    ''' <param name="formName">Name of the screen. This value is used to apply 
    ''' where clause while loading vehicle information from vwCircular.</param>
    ''' <remarks></remarks>
    Public Overrides Sub LoadVehicle(ByVal vehicleId As Integer, ByVal formName As String)
      Dim errorMessage As String


      RaiseEvent LoadingVehicle(vehicleId)

      VehicleAdapter.FillByVehicleId(Data.vwCircular, vehicleId, formName, errorMessage)

      If Data.vwCircular.Count = 0 AndAlso errorMessage Is Nothing Then
        RaiseEvent VehicleNotFound(vehicleId)
      ElseIf Data.vwCircular.Count = 0 AndAlso errorMessage IsNot Nothing Then
        RaiseEvent InvalidVehicleStatus(errorMessage)
      Else
        RaiseEvent VehicleLoaded(Data.vwCircular(0))
      End If

    End Sub

    ''' <summary>
    ''' Gets number of pages defined for supplied vehicleId.
    ''' </summary>
    ''' <param name="vehicleId">Gets page count for vehicle id.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetPageCount(ByVal vehicleId As Integer) As Integer
      Dim pageCount As Nullable(Of Integer)
      Dim pageAdapter As QCDataSetTableAdapters.PageTableAdapter


      pageAdapter = New QCDataSetTableAdapters.PageTableAdapter
      pageAdapter.Connection.ConnectionString = GetConnectionStringForAppDB()
      pageCount = pageAdapter.GetPageCount(vehicleId)
      pageAdapter.Dispose()
      pageAdapter = Nothing

      If (pageCount Is Nothing OrElse pageCount = 0) Then
        Return 0
      Else
        Return CType(pageCount, Integer)
      End If

    End Function

    ''' <summary>
    ''' Gets status whether vehicle is having page information defined in page table or not.
    ''' </summary>
    ''' <param name="vehicleId">Check page information for vehicle id.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsPageInformationAvailable(ByVal vehicleId As Integer) As Boolean
      'Dim pageCount As Nullable(Of Integer)
      'Dim pageAdapter As QCDataSetTableAdapters.PageTableAdapter


      'pageAdapter = New QCDataSetTableAdapters.PageTableAdapter
      'pageAdapter.Connection.ConnectionString = GetConnectionStringForAppDB()
      'pageCount = pageAdapter.GetPageCount(vehicleId)
      'pageAdapter.Dispose()
      'pageAdapter = Nothing

      'If (pageCount Is Nothing OrElse pageCount = 0) Then
      '  Return False
      'Else
      '  pageCount = Nothing
      '  Return True
      'End If

      Return (GetPageCount(vehicleId) > 0)

    End Function


#Region " Validation related methods "


#Region " Business Logic related validation methods "


    ''' <summary>
    ''' Validates all columns of supplied DataRow.
    ''' </summary>
    ''' <param name="validateRow"></param>
    ''' <returns>
    ''' True if all columns contains valid inforamtion. False otherwise.
    ''' </returns>
    ''' <remarks></remarks>
    Public Function AreDatesValid(ByVal validateRow As QCDataSet.vwCircularRow) As Boolean

      If validateRow.RetRow IsNot Nothing Then
        If validateRow.MediaRow.Descrip.ToUpper() = "ROP" _
          AndAlso validateRow.RetRow.Descrip.ToUpper() = "WALMART" _
          AndAlso validateRow.IsStartDtNull() = False _
          AndAlso validateRow.StartDt.Subtract(validateRow.BreakDt).Days > 0 _
          AndAlso validateRow.StartDt.Subtract(DateTime.Today).Days > 0 _
        Then
          AddErrorInformation(Data.Errors, "StartDt", "Start Date", "Sale Start date is greater than Ad date," _
                              + " this is not allowed for a Walmart Ad. Please review and re-index.")
          Return False
        Else
          RemoveErrorInformation(Data.Errors, "StartDt")
        End If
      End If

      'If validateRow.HasErrors = False Then
      '  ValidateRequiredRetailerInputs(validateRow)
      '  IsStartDateValid(validateRow)
      '  IsEndDateValid(validateRow)
      'End If

      If Data.Errors.Count = 0 AndAlso validateRow.IsPriorityNull() = False Then
        If validateRow.Priority >= 0 Then
          RemoveErrorInformation(Data.Errors, "Priority")
          validateRow.SetColumnError("Priority", String.Empty)
        Else
          AddErrorInformation(Data.Errors, "Priority", "Priority", "Unexpected Market-Media-Retailer combination.")
          validateRow.SetColumnError("Priority", "Unexpected Market-Media-Retailer combination.")
          validateRow.SetPriorityNull()
        End If
      End If


      Return (Not validateRow.HasErrors)

    End Function


    '''' <summary>
    '''' Validates start date for its duration from Ad date. 
    '''' </summary>
    '''' <param name="validateRow"></param>
    '''' <returns></returns>
    '''' <remarks></remarks>
    'Protected Function IsStartDateValid(ByVal validateRow As EnvelopeContentDataSet.vwCircularRow) As Boolean
    '  Dim isDateValid As Boolean
    '  Dim dateDifference As Integer


    '  If validateRow.IsStartDtNull() Then
    '    validateRow.SetColumnError("StartDt", "")
    '    Return True
    '  End If

    '  isDateValid = True
    '  dateDifference = validateRow.StartDt.Subtract(validateRow.BreakDt).Days

    '  If (validateRow.MediaRow.Descrip.ToUpper() = "MAILER" _
    '    Or validateRow.MediaRow.Descrip.ToUpper() = "CATALOG") _
    '    And (dateDifference < -7 Or dateDifference > 7) _
    '  Then
    '    isDateValid = False
    '    validateRow.SetColumnError("StartDt", "Start Date needs to be within 7 days of Ad Date.")

    '  ElseIf validateRow.RetRow.TradeClassRow.Descrip.ToUpper() = "DEPT" _
    '    And (dateDifference < -14 Or dateDifference > 14) _
    '  Then
    '    isDateValid = False
    '    validateRow.SetColumnError("StartDt", "Start Date needs to be within 14 days of Ad Date.")

    '  ElseIf dateDifference < -28 Or dateDifference > 28 Then
    '    isDateValid = False
    '    validateRow.SetColumnError("StartDt", "Start Date needs to be within 28 days of Ad Date.")

    '  ElseIf dateDifference < -3 Or dateDifference > 3 Then
    '    isDateValid = False
    '    validateRow.SetColumnError("StartDt", "Start Date is not within 3 days of Ad Date.")
    '  End If


    '  Return isDateValid

    'End Function

    '''' <summary>
    '''' Validates end date for its duration from start date and ad date.
    '''' </summary>
    '''' <param name="validateRow"></param>
    '''' <returns></returns>
    '''' <remarks></remarks>
    'Public Function IsEndDateValid(ByVal validateRow As EnvelopeContentDataSet.vwCircularRow) As Boolean
    '  Dim isDateValid As Boolean


    '  If validateRow.IsEndDtNull() Then
    '    validateRow.SetColumnError("EndDt", "")
    '    Return True
    '  End If

    '  isDateValid = True

    '  If validateRow.EndDt.Subtract(validateRow.StartDt).Days < 0 Then
    '    validateRow.SetColumnError("EndDt", "End date can not be prior to Start date.")
    '    isDateValid = False
    '  ElseIf validateRow.EndDt.Subtract(validateRow.StartDt).Days > 30 Then
    '    validateRow.SetColumnError("EndDt", "End date is not within 30 days of Start date.")
    '    isDateValid = False
    '  ElseIf validateRow.BreakDt.Subtract(validateRow.EndDt).Days > 35 Then
    '    validateRow.SetColumnError("EndDt", "End date is not within 35 days of Ad date.")
    '    isDateValid = False
    '  End If


    '  Return isDateValid

    'End Function


#End Region


    ''' <summary>
    ''' Checks whether all columns contain valid values or not. Returns false if not, true otherwise.
    ''' </summary>
    ''' <param name="validateRow"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function AreInputsValid(ByVal validateRow As QCDataSet.vwCircularRow) As Boolean
      Dim areAllValid As Boolean


      RaiseEvent ValidatingInputs()

      areAllValid = True

      'If validateRow.IsBreakDtNull() Then
      '  validateRow.SetColumnError("BreakDt", "Ad date can not be blank.")
      '  areAllValid = False
      'End If

      'If validateRow.IsNull("EnvelopeId") Then
      '  validateRow.SetColumnError("EnvelopeId", "Envelope is missing.")
      'Else
      '  validateRow.SetColumnError("EnvelopeId", "")
      'End If

      'If validateRow.IsNull("BreakDt") Then
      '  validateRow.SetColumnError("BreakDt", "Ad date is not specified.")
      'Else
      '  validateRow.SetColumnError("BreakDt", "")
      'End If

      'If validateRow.IsNull("RetId") Then
      '  validateRow.SetColumnError("RetId", "Retailer is not specified.")
      'Else
      '  validateRow.SetColumnError("RetId", "")
      'End If

      'If validateRow.IsNull("MktId") Then
      '  validateRow.SetColumnError("MktId", "Market is not specified.")
      'Else
      '  validateRow.SetColumnError("MktId", "")
      'End If

      'If validateRow.IsNull("MediaId") Then
      '  validateRow.SetColumnError("MediaId", "Media is not specified.")
      'Else
      '  validateRow.SetColumnError("MediaId", "")
      'End If


      If areAllValid Then areAllValid = AreDatesValid(validateRow)


      RaiseEvent InputsValidated()

      Return areAllValid

    End Function


#End Region


    ''' <summary>
    ''' Synchronizes changes made to vwCircular DataTable with database.
    ''' </summary>
    ''' <remarks></remarks>
    Public Overrides Sub SynchronizeVehicleInformation()

      RaiseEvent SynchronizingVehicleInformation()

      VehicleAdapter.Update(Data.vwCircular)

      RaiseEvent VehicleInformationSynchronized()

    End Sub


    ''' <summary>
    ''' Returns true if vehicle status is set to indexed, false otherwise.
    ''' </summary>
    ''' <param name="vehicleId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overloads Function IsVehicleIndexed(ByVal vehicleId As Integer) As Boolean
      Dim isIndexed As Boolean
      Dim indexedStatusId As Integer
      Dim vehicleQuery As System.Collections.Generic.IEnumerable(Of QCDataSet.vwCircularRow)


      indexedStatusId = GetStatusIdForIndexed()
      vehicleQuery = From vr In Data.vwCircular.Rows.Cast(Of QCDataSet.vwCircularRow)() _
                     Select vr _
                     Where vr.VehicleId = vehicleId

      If vehicleQuery.Count = 0 Then
        vehicleQuery = Nothing
        Throw New System.ApplicationException("Vehicle information not found.")
      Else
        isIndexed = IsVehicleIndexed(vehicleQuery(0))
      End If

      vehicleQuery = Nothing

      Return isIndexed

    End Function
    ''' <summary>
    ''' Updates vehicle status as QCed. Also updates QCDt and QCedBy columns of vehicle table.
    ''' </summary>
    ''' <param name="vehicleId"></param>
    ''' <param name="formName"></param>
    ''' <exception cref="System.ApplicationException">
    ''' Throws exception if vehicleId mismatch occurs or status id not found for QC Completed status.
    ''' </exception>
    ''' <remarks></remarks>
    Public Sub MarkVehicleAsIndexed(ByVal vehicleId As Integer, ByVal formName As String)
      Dim statusId As Nullable(Of Integer)


      If Data.vwCircular(0).VehicleId <> vehicleId Then
        Throw New System.ApplicationException("Vehicle information not found.")
      End If

      PageAdapter.mt_proc_UpdateVehiclePageImagesName(vehicleId, ImageNameGenerationField, formName)
      LoadVehiclePagesInformation(vehicleId)

      RenameVehiclePageImageFiles(vehicleId)

      statusId = VehicleStatusAdapter.GetStatusId("QC Completed")
      If statusId Is Nothing Then
        Throw New System.ApplicationException("Vehicle status value not found.")
      End If

      Data.vwCircular(0).BeginEdit()
      Data.vwCircular(0).QCDt = DateTime.Now
      Data.vwCircular(0).QCedById = UserID
      Data.vwCircular(0).StatusID = CType(statusId, Integer)
      Data.vwCircular(0).EndEdit()

      VehicleAdapter.Update(Data.vwCircular)

    End Sub

  End Class


End Namespace