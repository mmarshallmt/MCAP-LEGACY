Namespace UI


  Public Class PublicationIndexQCForm
    Implements IForm


    Private Const FORM_NAME As String = "Publication Indexing and QC"


    Private WithEvents m_publicationIndexQCProcessor As Processors.PublicationIndexQC



    Public ReadOnly Property Processor() As Processors.PublicationIndexQC
      Get
        Return m_publicationIndexQCProcessor
      End Get
    End Property



    ''' <summary>
    ''' Clears all inputs on form.
    ''' </summary>
    ''' <remarks></remarks>
    Protected Sub ClearInputs(ByVal isForSame As Boolean, ByVal clearPageImage As Boolean)

      If isForSame = False Then
        findVehicleIdTextBox.Clear()
        vehicleIdValueLabel.Text = String.Empty
        adDateTypeInDatePicker.Clear()
        mediaComboBox.SelectedValue = DBNull.Value
        marketComboBox.SelectedValue = DBNull.Value
        publicationComboBox.SelectedValue = DBNull.Value
        languageComboBox.SelectedValue = DBNull.Value
      End If

      retailerComboBox.SelectedValue = DBNull.Value
      tradeclassValueLabel.Text = String.Empty
      eventComboBox.SelectedValue = DBNull.Value
      themeComboBox.SelectedValue = DBNull.Value
      startDateTypeInDatePicker.Clear()
      endDateTypeInDatePicker.Clear()
      couponCheckBox.Checked = False

      If clearPageImage Then
        currentPageLabel.Text = "0"
        totalPagesLabel.Text = "0"
        findImageTextBox.Clear()
        ClearImage()
      End If

    End Sub

    Protected Overrides Sub ClearAllInputs()

      findVehicleIdTextBox.Clear()
      vehicleIdValueLabel.Text = String.Empty
      adDateTypeInDatePicker.Clear()
      mediaComboBox.SelectedValue = DBNull.Value
      marketComboBox.SelectedValue = DBNull.Value
      publicationComboBox.SelectedValue = DBNull.Value
      languageComboBox.SelectedValue = DBNull.Value
      retailerComboBox.SelectedValue = DBNull.Value
      tradeclassValueLabel.Text = String.Empty
      eventComboBox.SelectedValue = DBNull.Value
      themeComboBox.SelectedValue = DBNull.Value
      startDateTypeInDatePicker.Clear()
      endDateTypeInDatePicker.Clear()
      couponCheckBox.Checked = False

      currentPageLabel.Text = "0"
      totalPagesLabel.Text = "0"
      findImageTextBox.Clear()

      pageCropIdLabel.Text = String.Empty
      pageIdLabel.Text = String.Empty

      ClearImage()

    End Sub

    ''' <summary>
    ''' Removes error providers from all input controls.
    ''' </summary>
    ''' <remarks></remarks>
    Protected Overrides Sub RemoveAllErrorProviders()
      RemoveErrorProvider(adDateTypeInDatePicker)
      RemoveErrorProvider(mediaComboBox)
      RemoveErrorProvider(marketComboBox)
      RemoveErrorProvider(publicationComboBox)
      RemoveErrorProvider(languageComboBox)
      RemoveErrorProvider(retailerComboBox)
      RemoveErrorProvider(tradeclassValueLabel)
      RemoveErrorProvider(eventComboBox)
      RemoveErrorProvider(themeComboBox)
      RemoveErrorProvider(startDateTypeInDatePicker)
      RemoveErrorProvider(endDateTypeInDatePicker)
    End Sub

    'Protected Overrides Sub ShowHideControls(ByVal formStatus As FormStateEnum)

    'End Sub

    Protected Overrides Sub EnableDisableControls(ByVal formStatus As FormStateEnum)

      Select Case formStatus
        Case FormStateEnum.Insert
          adDateTypeInDatePicker.Enabled = False
          mediaComboBox.Enabled = False
          marketComboBox.Enabled = False
          publicationComboBox.Enabled = False
          languageComboBox.Enabled = False
          retailerComboBox.Enabled = True
          'tradeclassValueLabel.Enabled = True
          eventComboBox.Enabled = True
          themeComboBox.Enabled = True
          startDateTypeInDatePicker.Enabled = True
          endDateTypeInDatePicker.Enabled = True
          definePagesButton.Enabled = False
          couponCheckBox.Enabled = True

          sameButton.Enabled = True
          newButton.Enabled = True
          printButton.Enabled = False
          deleteButton.Enabled = False
          editButton.Enabled = False
          addButton.Enabled = False
          prvalButton.Enabled = True
          resetButton.Enabled = True
          saveButton.Enabled = False
          'qcCompletedButton.Enabled = False

          vehiclePageCropButton.Enabled = False
          imageNavigationGroupBox.Enabled = True
          imageSearchGroupBox.Enabled = True
          imageRotationGroupBox.Enabled = True
          zoomButton.Enabled = True
          keepRectangleButton.Enabled = True
          removeRectangleButton.Enabled = True
          saveImageButton.Enabled = True
          refreshButton.Enabled = True
          deleteImageButton.Enabled = Not Me.IsPageCropNavigation
          resequenceButton.Enabled = False

        Case FormStateEnum.Edit
          adDateTypeInDatePicker.Enabled = False
          mediaComboBox.Enabled = False
          marketComboBox.Enabled = False
          publicationComboBox.Enabled = False
          languageComboBox.Enabled = False
          retailerComboBox.Enabled = True
          'tradeclassValueLabel.Enabled = True
          eventComboBox.Enabled = True
          themeComboBox.Enabled = True
          startDateTypeInDatePicker.Enabled = True
          endDateTypeInDatePicker.Enabled = True
          definePagesButton.Enabled = True
          couponCheckBox.Enabled = True

          sameButton.Enabled = False
          newButton.Enabled = False
          printButton.Enabled = False
          deleteButton.Enabled = False
          editButton.Enabled = False
          addButton.Enabled = False
          prvalButton.Enabled = False
          resetButton.Enabled = False
          saveButton.Enabled = True
          'qcCompletedButton.Enabled = False

          vehiclePageCropButton.Enabled = False
          imageNavigationGroupBox.Enabled = False
          imageSearchGroupBox.Enabled = False
          imageRotationGroupBox.Enabled = True
          zoomButton.Enabled = True
          keepRectangleButton.Enabled = True
          removeRectangleButton.Enabled = True
          saveImageButton.Enabled = True
          refreshButton.Enabled = True
          deleteImageButton.Enabled = False
          resequenceButton.Enabled = False

        Case Else
          adDateTypeInDatePicker.Enabled = False
          mediaComboBox.Enabled = False
          marketComboBox.Enabled = False
          publicationComboBox.Enabled = False
          languageComboBox.Enabled = False
          retailerComboBox.Enabled = False
          'tradeclassValueLabel.Enabled = False
          eventComboBox.Enabled = False
          themeComboBox.Enabled = False
          startDateTypeInDatePicker.Enabled = False
          endDateTypeInDatePicker.Enabled = False
          definePagesButton.Enabled = False
          couponCheckBox.Enabled = False

          sameButton.Enabled = False
          newButton.Enabled = False
          printButton.Enabled = False
          deleteButton.Enabled = Me.IsPageCropNavigation
          editButton.Enabled = Me.IsPageCropNavigation
          addButton.Enabled = Not Me.IsPageCropNavigation
          prvalButton.Enabled = False
          resetButton.Enabled = False
          saveButton.Enabled = False
          'qcCompletedButton.Enabled = Not Me.IsPageCropNavigation

          vehiclePageCropButton.Enabled = True
          imageNavigationGroupBox.Enabled = True
          imageSearchGroupBox.Enabled = True
          imageRotationGroupBox.Enabled = False
          zoomButton.Enabled = True
          keepRectangleButton.Enabled = False
          removeRectangleButton.Enabled = False
          saveImageButton.Enabled = False
          refreshButton.Enabled = False
          deleteImageButton.Enabled = False
          resequenceButton.Enabled = False
      End Select

    End Sub

    ''' <summary>
    ''' Displays image on form based on supplied image folder path and page number.
    ''' </summary>
    ''' <param name="imageFolderPath"></param>
    ''' <param name="pageNumber"></param>
    ''' <exception cref="System.ApplicationException">
    ''' When supplied page number is not found in received order column for vehicle id, raises exception
    ''' with message - "Page information not found."
    ''' </exception>
    ''' <remarks></remarks>
    Protected Overloads Sub ShowImage(ByVal imageFolderPath As String, ByVal pageNumber As Integer)
      Dim imageName As String


      imageName = Processor.GetPageImageName(pageNumber)
      If imageName Is Nothing Then
        Throw New System.ApplicationException("Page information not found.")
        Exit Sub
      End If

      Try
        ShowImage(imageFolderPath, imageName)
      Catch ex As ApplicationException
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        My.Application.Log.WriteException(ex)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        My.Application.Log.WriteException(ex)
      End Try

      pageTypeValueLabel.Text = Processor.GetPageType(pageNumber)

      imageName = Nothing

    End Sub

    ''' <summary>
    ''' Displays image on form based on supplied vehicleId and page number.
    ''' </summary>
    ''' <param name="vehicleId"></param>
    ''' <param name="pageNumber"></param>
    ''' <exception cref="System.ApplicationException">
    ''' When supplied page number is not found in received order column for vehicle id, raises exception
    ''' with message - "Page information not found."
    ''' </exception>
    ''' <remarks></remarks>
    Protected Overloads Sub ShowImage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim imageFolderPath, imageName As String


      imageFolderPath = Processor.GetPageImageFolderPath(vehicleId)

      imageName = Processor.GetPageImageName(pageNumber)
      If imageName Is Nothing Then
        Throw New System.ApplicationException("Page information not found.")
        Exit Sub
      End If

      Try
        ShowImage(imageFolderPath, imageName)
      Catch ex As ApplicationException
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        My.Application.Log.WriteException(ex)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        My.Application.Log.WriteException(ex)
      End Try

      pageTypeValueLabel.Text = Processor.GetPageType(vehicleId, pageNumber)

      imageName = Nothing

    End Sub

    Protected Overrides Sub RefreshPageInformation()
      Dim pageNumber, totalPages As Integer


      totalPagesLabel.Text = Processor.Data.Page.Count.ToString()

      If Integer.TryParse(currentPageLabel.Text, pageNumber) = False Then
        pageNumber = -1
      End If

      If Integer.TryParse(totalPagesLabel.Text, totalPages) = False Then
        totalPages = -1
      End If

      firstImageButton.Enabled = (pageNumber > 1)
      previousImageButton.Enabled = (pageNumber > 1)
      nextImageButton.Enabled = (totalPages > pageNumber)
      lastImageButton.Enabled = (totalPages > pageNumber)

    End Sub

    Protected Overrides Sub RefreshPageCropInformation()
      Dim pageNumber, totalPages As Integer


      totalPagesLabel.Text = Processor.Data.PageCrop.Count.ToString()

      If Integer.TryParse(currentPageLabel.Text, pageNumber) = False Then
        pageNumber = -1
      End If

      If Integer.TryParse(totalPagesLabel.Text, totalPages) = False Then
        totalPages = -1
      End If

      firstImageButton.Enabled = (pageNumber > 1)
      previousImageButton.Enabled = (pageNumber > 1)
      nextImageButton.Enabled = (totalPages > pageNumber)
      lastImageButton.Enabled = (totalPages > pageNumber)

    End Sub

    Protected Overrides Function GetPageImageSize(ByVal vehicleId As Integer, ByVal pageNumber As Integer) As System.Drawing.SizeF

      Return Processor.GetPageSize(vehicleId, pageNumber)

    End Function

    Protected Overrides Function GetPageImageSize(ByVal pageId As Integer) As System.Drawing.SizeF

      Return Processor.GetPageSize(pageId)

    End Function

    ''' <summary>
    ''' Gets size information based on supplied size Id.
    ''' </summary>
    ''' <param name="pageCropId"></param>
    ''' <param name="recroppedRectangle"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Overrides Function CalculateReCroppedImageSize(ByVal pageCropId As Integer, ByVal recroppedRectangle As System.Drawing.RectangleF) As System.Drawing.SizeF
      Dim sizeId As Integer
      Dim linqQuery As System.Collections.Generic.IEnumerable(Of QCDataSet.PageCropRow)
      Dim croppedAdSize, recroppedAdSize As System.Drawing.SizeF
      Dim croppedRectangle As System.Drawing.RectangleF


      linqQuery = From p In Processor.Data.PageCrop.Rows.Cast(Of QCDataSet.PageCropRow)() _
                  Select p _
                  Where p.PageCropId = pageCropId

      If linqQuery.Count = 0 Then
        Throw New System.ApplicationException("Unable to find cropped page information.")
      ElseIf linqQuery(0).IsSizeIDNull() Then
        sizeId = linqQuery(0).SizeID
      End If

      croppedRectangle.Location = New System.Drawing.PointF(linqQuery(0).X, linqQuery(0).Y)
      croppedRectangle.Size = New System.Drawing.SizeF(linqQuery(0).X2 - linqQuery(0).X, linqQuery(0).Y2 - linqQuery(0).Y)
      croppedAdSize = Processor.GetSize(sizeId)

      If croppedAdSize = System.Drawing.SizeF.Empty Then
        Throw New System.ApplicationException("Can not get size of the cropped image.")
      End If

      recroppedAdSize.Width = recroppedAdSize.Width * croppedAdSize.Width / croppedRectangle.Width
      recroppedAdSize.Height = recroppedAdSize.Height * croppedAdSize.Height / croppedRectangle.Height

      Return recroppedAdSize

    End Function

    Protected Overrides Function HasCroppedPageImages(ByVal vehicleId As Integer) As Boolean

      If Processor.GetCroppedPageCount(vehicleId) > 0 Then
        Return True
      Else
        Return False
      End If

    End Function



#Region " IForm Implementation "


    Public Event ApplyingUserCredentials() Implements IForm.ApplyingUserCredentials
    Public Event UserCredentialsApplied() Implements IForm.UserCredentialsApplied

    Public Event InitializingForm() Implements IForm.InitializingForm
    Public Event FormInitialized() Implements IForm.FormInitialized


    Public Sub ApplyUserCredentials() Implements IForm.ApplyUserCredentials

    End Sub

    Public Sub Init(ByVal formStatus As FormStateEnum) Implements IForm.Init

      RaiseEvent InitializingForm()

      Me.SuspendLayout()

      Me.FormState = formStatus

      m_publicationIndexQCProcessor = New Processors.PublicationIndexQC()
      Processor.Initialize()
      Processor.LoadDataSet()

      Me.StatusMessage = "Information loaded. Preparing to show information on window."

      mediaComboBox.ValueMember = "MediaId"
      mediaComboBox.DisplayMember = "Descrip"
      mediaComboBox.DataSource = Processor.Data.Media

      marketComboBox.ValueMember = "MktId"
      marketComboBox.DisplayMember = "Descrip"
      marketComboBox.DataSource = Processor.Data.Mkt

      publicationComboBox.ValueMember = "PublicationId"
      publicationComboBox.DisplayMember = "Descrip"
      publicationComboBox.DataSource = Processor.Data.Publication

      languageComboBox.ValueMember = "LanguageId"
      languageComboBox.DisplayMember = "Descrip"
      languageComboBox.DataSource = Processor.Data.Language

      retailerComboBox.ValueMember = "RetId"
      retailerComboBox.DisplayMember = "Descrip"
      retailerComboBox.DataSource = Processor.Data.Ret

      eventComboBox.ValueMember = "Codeid"
      eventComboBox.DisplayMember = "Descrip"
      eventComboBox.DataSource = Processor.Data.vwEvent

      themeComboBox.ValueMember = "CodeId"
      themeComboBox.DisplayMember = "Descrip"
      themeComboBox.DataSource = Processor.Data.vwTheme

      ClearAllInputs()
      ShowHideControls(Me.FormState)
      EnableDisableControls(Me.FormState)
      addButton.Enabled = False
      vehiclePageCropButton.Enabled = False
      imageNavigationGroupBox.Enabled = False
      imageSearchGroupBox.Enabled = False
      zoomButton.Enabled = False

      Me.ResumeLayout(False)

      RaiseEvent FormInitialized()

    End Sub


#End Region



    ''' <summary>
    ''' Displays supplied row information in corresponding inputs.
    ''' </summary>
    ''' <param name="vehicleRow"></param>
    ''' <remarks></remarks>
    Private Sub ShowVehicleInformation(ByVal vehicleRow As QCDataSet.vwPublicationEditionRow)

      vehicleIdValueLabel.Text = vehicleRow.VehicleId.ToString()

      If vehicleRow.IsBreakDtNull() Then
        adDateTypeInDatePicker.Clear()
      Else
        adDateTypeInDatePicker.Text = vehicleRow.BreakDt.ToString("MM/dd/yy")
      End If

      If vehicleRow.IsMediaIdNull() Then
        mediaComboBox.SelectedValue = DBNull.Value
      Else
        mediaComboBox.SelectedValue = vehicleRow.MediaId
      End If

      Processor.LoadMarket(vehicleRow.SenderId)
      If vehicleRow.IsMktIdNull() Then
        marketComboBox.SelectedValue = DBNull.Value
      Else
        marketComboBox.SelectedValue = vehicleRow.MktId
      End If

      Processor.LoadPublication(vehicleRow.MktId)
      If vehicleRow.IsPublicationIdNull() Then
        publicationComboBox.SelectedValue = DBNull.Value
      Else
        publicationComboBox.SelectedValue = vehicleRow.PublicationId
      End If

      If vehicleRow.IsLanguageIdNull() Then
        languageComboBox.SelectedValue = DBNull.Value
      Else
        languageComboBox.SelectedValue = vehicleRow.LanguageId
      End If

      Processor.LoadRetailer(vehicleRow.MediaId, vehicleRow.MktId)
      retailerComboBox.SelectedValue = DBNull.Value
      eventComboBox.SelectedValue = DBNull.Value
      themeComboBox.SelectedValue = DBNull.Value

      If vehicleRow.IsStartDtNull() Then
        startDateTypeInDatePicker.Clear()
      Else
        startDateTypeInDatePicker.Text = vehicleRow.StartDt.ToString("MM/dd/yy")
      End If

      If vehicleRow.IsEndDtNull() Then
        endDateTypeInDatePicker.Clear()
      Else
        endDateTypeInDatePicker.Text = vehicleRow.EndDt.ToString("MM/dd/yy")
      End If

      'If vehicleRow.IsCheckInPageCountNull() Then
      '  definePagesButton.Text = "Define Pages"
      'Else
      '  definePagesButton.Text = "Define Pages (" + vehicleRow.CheckInPageCount.ToString() + ")"
      'End If

      'If vehicleRow.IsCouponIndNull() OrElse vehicleRow.CouponInd = 0 Then
      '  couponCheckBox.Checked = False
      'Else
      '  couponCheckBox.Checked = True
      'End If

    End Sub

    ''' <summary>
    ''' Displays supplied rows information in corresponding inputs.
    ''' </summary>
    ''' <param name="tempPageCropRow"></param>
    ''' <remarks></remarks>
    Private Sub ShowVehicleInformation(ByVal tempPageCropRow As QCDataSet.PageCropRow)

      vehicleIdValueLabel.Text = tempPageCropRow.PageRow.VehicleId.ToString()

      pageCropIdLabel.Text = tempPageCropRow.PageCropId.ToString()
      pageIdLabel.Text = tempPageCropRow.PageID.ToString()

      If tempPageCropRow.IsRetIdNull() Then
        retailerComboBox.SelectedValue = DBNull.Value
      Else
        retailerComboBox.SelectedValue = tempPageCropRow.RetId
        tradeclassValueLabel.Text = tempPageCropRow.RetRow.TradeClassRow.Descrip
      End If

      If tempPageCropRow.IsEventIDNull() Then
        eventComboBox.SelectedValue = DBNull.Value
      Else
        eventComboBox.SelectedValue = tempPageCropRow.EventID
      End If

      If tempPageCropRow.IsThemeIDNull() Then
        themeComboBox.SelectedValue = DBNull.Value
      Else
        themeComboBox.SelectedValue = tempPageCropRow.ThemeID
      End If

      If tempPageCropRow.IsStartDtNull() Then
        startDateTypeInDatePicker.Clear()
      Else
        startDateTypeInDatePicker.Text = tempPageCropRow.StartDt.ToString("MM/dd/yy")
      End If

      If tempPageCropRow.IsEndDtNull() Then
        endDateTypeInDatePicker.Clear()
      Else
        endDateTypeInDatePicker.Text = tempPageCropRow.EndDt.ToString("MM/dd/yy")
      End If

      If tempPageCropRow.IsCouponIndNull() OrElse tempPageCropRow.CouponInd = 0 Then
        couponCheckBox.Checked = False
      Else
        couponCheckBox.Checked = True
      End If

    End Sub

    ''' <summary>
    ''' Validates inputs as per business rules.
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function ValidateBusinessRules() As Boolean
      Dim showMsg As Boolean
      Dim dateDifference As Integer
      Dim dateMsg As DateCheckDialog


      dateMsg = New DateCheckDialog()

      If adDateTypeInDatePicker.Value.HasValue = True _
          AndAlso startDateTypeInDatePicker.Value.HasValue = True _
      Then
        showMsg = False
        dateDifference = adDateTypeInDatePicker.Value.Value.Subtract(startDateTypeInDatePicker.Value.Value).Days

        If (dateDifference < -7 OrElse dateDifference > 7) _
          AndAlso (mediaComboBox.Text.ToUpper() = "MAILER" OrElse mediaComboBox.Text.ToUpper() = "CATALOG") _
        Then
          showMsg = True
        ElseIf (dateDifference < -14 OrElse dateDifference > 14) _
          AndAlso (tradeclassValueLabel.Text.ToUpper() = "DEPT") _
        Then
          showMsg = True
        ElseIf (dateDifference < -28 OrElse dateDifference > 28) Then
          showMsg = True
        End If

        If showMsg Then
          dateMsg.MessageText = "Sale Start Date is not close enough to Ad Date to permit entry." _
                                + " Correct one of the dates, or if they are correct set aside for" _
                                + " supervisor."
          If dateMsg.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then Return False
        End If
      End If


      showMsg = False

      If endDateTypeInDatePicker.Value.HasValue Then
        showMsg = False

        If adDateTypeInDatePicker.Value.HasValue Then
          If adDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days < -40 Then _
            showMsg = True
        End If
      End If

      If showMsg = False AndAlso startDateTypeInDatePicker.Value.HasValue _
          AndAlso endDateTypeInDatePicker.Value.HasValue _
      Then
        If startDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days < -40 Then _
            showMsg = True
      End If

      If showMsg Then
        dateMsg.MessageText = "Sale End date is not close enough to Ad date or Start date to permit" _
                              + " entry. Correct one or more dates, or if they are correct set aside" _
                              + " for supervisor."
        If dateMsg.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then Return False
      End If

      dateMsg.Dispose()
      dateMsg = Nothing


      Return Not showMsg

    End Function

    ''' <summary>
    ''' Validates inputs and returns true if all inputs are valid, false otherwise.
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function AreInputsValid() As Boolean
      Dim areAllValid As Boolean
      Dim tempDate As DateTime


      areAllValid = True

      If retailerComboBox.SelectedValue Is Nothing Then
        SetErrorProvider(retailerComboBox, "Provide retailer.")
        areAllValid = False
      Else
        RemoveErrorProvider(retailerComboBox)
      End If

      If languageComboBox.SelectedValue Is Nothing Then
        SetErrorProvider(languageComboBox, "Provide language.")
        areAllValid = False
      Else
        RemoveErrorProvider(languageComboBox)
      End If

      If eventComboBox.SelectedValue Is Nothing Then
        SetErrorProvider(eventComboBox, "Provide event.")
        areAllValid = False
      Else
        RemoveErrorProvider(eventComboBox)
      End If

      If themeComboBox.SelectedValue Is Nothing Then
        SetErrorProvider(themeComboBox, "Provide theme.")
        areAllValid = False
      Else
        RemoveErrorProvider(themeComboBox)
      End If


      If startDateTypeInDatePicker.Value.HasValue = False Then
        RemoveErrorProvider(startDateTypeInDatePicker)
      ElseIf startDateTypeInDatePicker.Text <> "  /  /" _
        AndAlso DateTime.TryParse(startDateTypeInDatePicker.Text, tempDate) = False _
      Then
        SetErrorProvider(startDateTypeInDatePicker, "Provide start date.")
        areAllValid = False
      End If

      If endDateTypeInDatePicker.Value.HasValue = False Then
        RemoveErrorProvider(endDateTypeInDatePicker)
      ElseIf endDateTypeInDatePicker.Text <> "  /  /" _
        AndAlso DateTime.TryParse(endDateTypeInDatePicker.Text, tempDate) = False _
      Then
        SetErrorProvider(endDateTypeInDatePicker, "Provide end date.")
        areAllValid = False
      ElseIf adDateTypeInDatePicker.Value.HasValue _
        AndAlso adDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days > 0 _
      Then
        MessageBox.Show("Sale can not end before Ad date.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Error)
        areAllValid = False
      ElseIf startDateTypeInDatePicker.Value.HasValue _
        AndAlso startDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days > 0 _
      Then
        MessageBox.Show("Sale can not end before it start.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Error)
        areAllValid = False
      ElseIf (adDateTypeInDatePicker.Value.HasValue _
              AndAlso adDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days < -35) _
        OrElse (startDateTypeInDatePicker.Value.HasValue _
              AndAlso startDateTypeInDatePicker.Value.Value.Subtract(endDateTypeInDatePicker.Value.Value).Days < -30) _
      Then
        Dim userResponse As DialogResult
        userResponse = MessageBox.Show("Sale End Date is unusual compared to Sale Start Date or Ad Date." _
                                       + " Check all values. Is the sale end date correct?", ProductName _
                                       , MessageBoxButtons.YesNo, MessageBoxIcon.Question)
        If userResponse = Windows.Forms.DialogResult.No Then areAllValid = False
      End If


      If areAllValid Then areAllValid = ValidateBusinessRules()

      Return areAllValid

    End Function

    ''' <summary>
    ''' Sets columns value of supplied PageCroprow. Assumes that the supplied row is a new row.
    ''' </summary>
    ''' <param name="tempRow"></param>
    ''' <param name="pageId"></param>
    ''' <param name="croppedImageName"></param>
    ''' <param name="adSizeId"></param>
    ''' <param name="adSizeRectangle"></param>
    ''' <returns>Returns PageCropId once record is successfully inserted into PageCrop table.</returns>
    ''' <remarks></remarks>
    Private Function SetNewPageCropDataRow(ByVal tempRow As QCDataSet.PageCropRow, ByVal pageId As Integer, ByVal croppedImageName As String, ByVal adSizeId As Integer, ByVal adSizeRectangle As System.Drawing.RectangleF) As Integer

      tempRow.BeginEdit()
      tempRow.PageID = pageId
      tempRow.RetId = CType(retailerComboBox.SelectedValue, Integer)
      tempRow.ThemeID = CType(themeComboBox.SelectedValue, Integer)
      tempRow.EventID = CType(eventComboBox.SelectedValue, Integer)
      If startDateTypeInDatePicker.Text = "  /  /" Then
        tempRow.SetStartDtNull()
      Else
        tempRow.StartDt = CType(startDateTypeInDatePicker.Text, DateTime)
      End If
      If endDateTypeInDatePicker.Text = "  /  /" Then
        tempRow.SetEndDtNull()
      Else
        tempRow.EndDt = CType(endDateTypeInDatePicker.Text, DateTime)
      End If
      If couponCheckBox.Checked Then
        tempRow.CouponInd = 1
      Else
        tempRow.CouponInd = 0
      End If
      tempRow.CropImageName = croppedImageName
      tempRow.SizeID = adSizeId
      tempRow.X = CType(adSizeRectangle.Left, Integer)
      tempRow.Y = CType(adSizeRectangle.Top, Integer)
      tempRow.X2 = CType(adSizeRectangle.Left + adSizeRectangle.Width, Integer) 'X2 = X + Width
      tempRow.Y2 = CType(adSizeRectangle.Top + adSizeRectangle.Height, Integer) 'Y2 = Y + Height
      tempRow.FormName = FORM_NAME
      tempRow.EndEdit()

    End Function

    ''' <summary>
    ''' Updates PageCrop data row based on values specified in controls.
    ''' </summary>
    ''' <param name="tempRow"></param>
    ''' <param name="adSizeId"></param>
    ''' <param name="adSizeRectangle"></param>
    ''' <remarks></remarks>
    Private Sub UpdatePageCropDataRow(ByVal tempRow As QCDataSet.PageCropRow, ByVal adSizeId As Integer, ByVal adSizeRectangle As System.Drawing.RectangleF)
      Dim difference As Integer


      tempRow.BeginEdit()

      tempRow.RetId = CType(retailerComboBox.SelectedValue, Integer)
      tempRow.ThemeID = CType(themeComboBox.SelectedValue, Integer)
      tempRow.EventID = CType(eventComboBox.SelectedValue, Integer)
      If startDateTypeInDatePicker.Text = "  /  /" Then
        tempRow.SetStartDtNull()
      Else
        tempRow.StartDt = CType(startDateTypeInDatePicker.Text, DateTime)
      End If
      If endDateTypeInDatePicker.Text = "  /  /" Then
        tempRow.SetEndDtNull()
      Else
        tempRow.EndDt = CType(endDateTypeInDatePicker.Text, DateTime)
      End If
      If couponCheckBox.Checked Then
        tempRow.CouponInd = 1
      Else
        tempRow.CouponInd = 0
      End If

      If adSizeId > 0 Then tempRow.SizeID = adSizeId

      If adSizeRectangle <> System.Drawing.RectangleF.Empty Then
        'Reset cropped image co-ordinates. 
        difference = CType(adSizeRectangle.Left, Integer) - tempRow.X
        tempRow.X += difference
        difference = CType(adSizeRectangle.Top, Integer) - tempRow.Y
        tempRow.Y += difference
        difference = tempRow.X2 - CType(adSizeRectangle.Left + adSizeRectangle.Width, Integer)
        tempRow.X2 -= difference 'X2 = oldX2 - (oldX2 - newX2)
        difference = tempRow.Y2 - CType(adSizeRectangle.Top + adSizeRectangle.Height, Integer)
        tempRow.Y2 -= difference 'Y2 = oldY2 - (oldY2 - newY2)
      End If

      tempRow.FormName = FORM_NAME

      tempRow.EndEdit()

    End Sub

    ''' <summary>
    ''' Prepares path for cropped page image based on supplied arguments and loads cropped page image.
    ''' </summary>
    ''' <param name="vehicleId"></param>
    ''' <param name="pageCropId"></param>
    ''' <param name="pageNumber"></param>
    ''' <exception cref="System.ApplicationException">
    ''' If image file not found at prepared path, throws ApplicationException with message "Cropped page image not found."
    ''' </exception>
    ''' <remarks></remarks>
    Private Sub ShowCroppedImage(ByVal vehicleId As Integer, ByVal pageCropId As Integer, ByVal pageNumber As Integer)
      Dim croppedImagePath As String


      croppedImagePath = Processor.GetCroppedPageImagePath(vehicleId, pageCropId)

      If System.IO.File.Exists(croppedImagePath) = False Then
        ClearImage()
        Throw New System.ApplicationException("Cropped ad image not found: " + Environment.NewLine + croppedImagePath)
      End If

      ShowImage(croppedImagePath)

      croppedImagePath = Nothing

    End Sub


#Region " Functionalitis for buttons on left panel below vehicle information "


    Protected Overrides Sub OnExitClicked()

      Me.Close()

    End Sub


    Protected Overrides Sub OnFindVehicle(ByVal vehicleId As Integer)

      ClearAllInputs()
      RemoveAllErrorProviders()
      Me.IsPageCropNavigation = False
      vehiclePageCropButton.Text = "Vehicle"

      Processor.LoadVehicle(vehicleId, FORM_NAME)

    End Sub


    Protected Overrides Sub OnAdDateValidating(ByVal adDate As Date?, ByRef Cancel As Boolean)
      Dim dateDifference As Integer
      Dim userResponse As DialogResult


      If adDate Is Nothing Then
        RemoveErrorProvider(adDateTypeInDatePicker)
        Cancel = False
        Exit Sub
      End If

      dateDifference = adDate.Value.Subtract(System.DateTime.Today).Days

      If dateDifference < -365 OrElse dateDifference > 365 Then
        userResponse = MessageBox.Show("Is Ad date correct?", ProductName, MessageBoxButtons.YesNo _
                                       , MessageBoxIcon.Question)
        Cancel = (userResponse = Windows.Forms.DialogResult.No)
      End If

    End Sub


    Protected Overrides Sub OnStartDateValidating(ByVal adDate As Date?, ByVal startDate As Date?, ByRef Cancel As Boolean)
      Dim dateDifference As Integer


      If adDate.HasValue = False OrElse startDate.HasValue = False Then
        RemoveErrorProvider(startDateTypeInDatePicker)
        Cancel = False
        Exit Sub
      End If

      dateDifference = startDate.Value.Subtract(adDate.Value).Days

      If (dateDifference < -7 Or dateDifference > 7) _
        AndAlso (mediaComboBox.Text.ToUpper() = "MAILER" OrElse mediaComboBox.Text.ToUpper() = "CATALOG") _
      Then
        SetErrorProvider(startDateTypeInDatePicker, "Start Date needs to be within 7 days of Ad Date.")

      ElseIf tradeclassValueLabel.Text.ToUpper() = "DEPT" _
        AndAlso (dateDifference < -14 Or dateDifference > 14) _
      Then
        SetErrorProvider(startDateTypeInDatePicker, "Start Date needs to be within 14 days of Ad Date.")

      ElseIf dateDifference < -28 Or dateDifference > 28 Then
        SetErrorProvider(startDateTypeInDatePicker, "Start Date needs to be within 28 days of Ad Date.")

      Else
        RemoveErrorProvider(startDateTypeInDatePicker)

        If (dateDifference < -3 OrElse dateDifference > 3) Then
          Dim userResponse As DialogResult
          userResponse = MessageBox.Show("Difference between Sale Start Date and Ad Date is unusually large." _
                                         + " Check these values. Is sale start date correct?", ProductName _
                                         , MessageBoxButtons.YesNo, MessageBoxIcon.Question _
                                         , MessageBoxDefaultButton.Button2)
          If userResponse = Windows.Forms.DialogResult.No Then
            startDateTypeInDatePicker.Focus()
            Exit Sub
          End If
        End If
      End If

    End Sub


    Protected Overrides Sub OnEndDateValidating(ByVal adDate As Date?, ByVal startDate As Date?, ByVal endDate As Date?, ByRef Cancel As Boolean)
      'Dim dateDifference As Integer


      If endDate.HasValue = False Then
        RemoveErrorProvider(endDateTypeInDatePicker)
        Exit Sub
      End If

      If adDate.HasValue Then
        'dateDifference = adDate.Value.Subtract(endDate.Value).Days
        If adDate.Value.Subtract(endDate.Value).Days > 0 Then
          SetErrorProvider(endDateTypeInDatePicker, "End date can not be prior to Ad date.")
        ElseIf adDate.Value.Subtract(endDate.Value).Days < -35 Then 'i.e. adDt - endDt
          SetErrorProvider(endDateTypeInDatePicker, "End date is not within 35 days of Ad date.")
        Else
          RemoveErrorProvider(endDateTypeInDatePicker)
        End If
      End If

      If startDate.HasValue AndAlso m_ErrorProvider.GetError(endDateTypeInDatePicker) = String.Empty Then
        'dateDifference = startDate.Value.Subtract(endDate.Value).Days
        If startDate.Value.Subtract(endDate.Value).Days > 0 Then 'i.e. StartDt - endDt
          SetErrorProvider(endDateTypeInDatePicker, "End date can not be prior to Start date.")
        ElseIf startDate.Value.Subtract(endDate.Value).Days < -30 Then  'i.e. StartDt - endDt
          SetErrorProvider(endDateTypeInDatePicker, "End date is not within 30 days of Start date.")
        Else
          RemoveErrorProvider(endDateTypeInDatePicker)
        End If
      End If

      'If dateDifference < -30 OrElse dateDifference > 30 Then
      '  Dim userResponse As DialogResult
      '  userResponse = MessageBox.Show("Sale End Date is unusual compared to Sale Start Date or Ad Date." _
      '                                 + " Check these values. Is sale end date correct?", ProductName _
      '                                 , MessageBoxButtons.YesNo, MessageBoxIcon.Question _
      '                                 , MessageBoxDefaultButton.Button2)
      '  If userResponse = Windows.Forms.DialogResult.No Then
      '    Cancel = True
      '    Exit Sub
      '  End If
      'End If

    End Sub


    Protected Overrides Sub OnDefinePages(ByVal vehicleId As Integer)
      Dim definePgs As PageDefinitionsForm


      definePgs = New PageDefinitionsForm

      definePgs.Init(FormStateEnum.Edit)
      definePgs.ApplyUserCredentials()
      definePgs.VehicleID = vehicleId
      definePgs.ShowDialog(Me)

      definePgs.Dispose()
      definePgs = Nothing

      RefreshPageInformation()

    End Sub


    Protected Overrides Sub OnSame(ByVal vehicleId As Integer, ByVal pageNumber As Integer, ByVal adSize As System.Drawing.SizeF, ByVal adRectangle As System.Drawing.RectangleF)
      Dim pageId, adSizeId, retId As Integer
      Dim pageName, croppedPageImageFolder As String
      Dim tempRow As QCDataSet.PageCropRow


      If AreInputsValid() = False Then Exit Sub

      pageId = Processor.GetPageId(vehicleId, pageNumber)
      adSizeId = Processor.GetSizeId(adSize.Width, adSize.Height)
      pageName = Processor.GetNewImageName()
      tempRow = Processor.Data.PageCrop.NewPageCropRow()

      SetNewPageCropDataRow(tempRow, pageId, pageName, adSizeId, adRectangle)

      If Processor.AreInputsValid(Processor.Data.vwPublicationEdition(0), tempRow) = False Then
        If Processor.Data.Errors.Count > 0 Then
          ShowErrors(Processor.Data.Errors)
          Processor.Data.Errors.Clear()
          Exit Sub
        ElseIf Processor.Data.Warnings.Count > 0 Then
          If ShowWarnings(Processor.Data.Warnings) = Windows.Forms.DialogResult.Cancel Then
            Processor.Data.Warnings.Clear()
            Exit Sub
          End If
        End If
      End If

      pageId = -1
      Processor.AddPageCropInformation(tempRow)
      Processor.SynchronizePageCropData()
      pageId = tempRow.PageCropId
      tempRow = Nothing

      If pageId < 1 Then
        MessageBox.Show("Unable to record information for cropped page image. Aborting current task." _
                        , ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        Exit Sub
      End If

      pageName += ImageFileExtension
      croppedPageImageFolder = Processor.GetCroppedPageImageFolderPath(vehicleId, pageId)
      System.IO.Directory.CreateDirectory(croppedPageImageFolder)
      pageName = croppedPageImageFolder + "\" + pageName
      SaveImage(mainAxLEAD, pageName, ImageFileFormat, BITsPerPixel, ImageCompression, 1)

      retId = CType(retailerComboBox.SelectedValue, Integer)

      'Prepare for for next page image crop.
      OnAdd()

      retailerComboBox.SelectedValue = retId

      Dim userResponse As System.Windows.Forms.DialogResult
      userResponse = MessageBox.Show("Do you want to work with same page image?", ProductName _
                                     , MessageBoxButtons.YesNo, MessageBoxIcon.Question)
      If userResponse = Windows.Forms.DialogResult.Yes Then
        ShowImage(vehicleId, pageNumber)
      ElseIf userResponse = Windows.Forms.DialogResult.No Then
        If nextImageButton.Enabled Then
          nextImageButton.PerformClick()  'Move to next page.
        ElseIf previousImageButton.Enabled Then
          previousImageButton.PerformClick()  'Move to previous page.
        Else  'Vehicle has only one page image.
          ShowImage(vehicleId, pageNumber)
        End If
      End If

    End Sub


    Protected Overrides Sub OnNew(ByVal vehicleId As Integer, ByVal pageNumber As Integer, ByVal adSize As System.Drawing.SizeF, ByVal adRectangle As System.Drawing.RectangleF)
      Dim pageId, adSizeId As Integer
      Dim pageName, croppedPageImageFolder As String
      Dim tempRow As QCDataSet.PageCropRow


      If AreInputsValid() = False Then Exit Sub

      pageId = Processor.GetPageId(vehicleId, pageNumber)
      adSizeId = Processor.GetSizeId(adSize.Width, adSize.Height)
      pageName = Processor.GetNewImageName()
      tempRow = Processor.Data.PageCrop.NewPageCropRow()

      SetNewPageCropDataRow(tempRow, pageId, pageName, adSizeId, adRectangle)

      If Processor.AreInputsValid(Processor.Data.vwPublicationEdition(0), tempRow) = False Then
        If Processor.Data.Errors.Count > 0 Then
          ShowErrors(Processor.Data.Errors)
          Processor.Data.Errors.Clear()
          Exit Sub
        ElseIf Processor.Data.Warnings.Count > 0 Then
          If ShowWarnings(Processor.Data.Warnings) = Windows.Forms.DialogResult.Cancel Then
            Processor.Data.Warnings.Clear()
            Exit Sub
          End If
        End If
      End If

      pageId = -1
      Processor.AddPageCropInformation(tempRow)
      Processor.SynchronizePageCropData()
      pageId = tempRow.PageCropId
      tempRow = Nothing

      If pageId < 1 Then
        MessageBox.Show("Unable to record information for cropped page image. Aborting current task." _
                        , ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        Exit Sub
      End If

      pageName += ImageFileExtension
      croppedPageImageFolder = Processor.GetCroppedPageImageFolderPath(vehicleId, pageId)
      System.IO.Directory.CreateDirectory(croppedPageImageFolder)
      pageName = croppedPageImageFolder + "\" + pageName
      SaveImage(mainAxLEAD, pageName, ImageFileFormat, BITsPerPixel, ImageCompression, 1)

      OnAdd() 'Prepare for for next page image crop.

      Dim userResponse As System.Windows.Forms.DialogResult
      userResponse = MessageBox.Show("Do you want to work with same page image?", ProductName _
                                     , MessageBoxButtons.YesNo, MessageBoxIcon.Question)
      If userResponse = Windows.Forms.DialogResult.Yes Then
        ShowImage(vehicleId, pageNumber)
      ElseIf userResponse = Windows.Forms.DialogResult.No Then
        If nextImageButton.Enabled Then
          nextImageButton.PerformClick()  'Move to next page.
        ElseIf previousImageButton.Enabled Then
          previousImageButton.PerformClick()  'Move to previous page.
        Else  'Vehicle has only one page image.
          ShowImage(vehicleId, pageNumber)
        End If
      End If

    End Sub


    Protected Overrides Sub OnDeletePageCrop(ByVal vehicleId As Integer, ByVal pageCropId As Integer)
      Dim q As System.Collections.Generic.IEnumerable(Of QCDataSet.PageCropRow)
      Dim croppedImagePath As String


      'Get path before removing record.
      croppedImagePath = Processor.GetCroppedPageImagePath(vehicleId, pageCropId)

      q = From r In Processor.Data.PageCrop.Rows.Cast(Of QCDataSet.PageCropRow)() _
          Select r _
          Where r.PageCropId = pageCropId

      If q.Count > 0 Then q(0).Delete()

      Processor.SynchronizePageCropData()

      q = Nothing

      System.IO.File.Delete(croppedImagePath)

      Me.FormState = FormStateEnum.View
      ClearAllInputs()
      Me.ShowHideControls(Me.FormState)
      Me.EnableDisableControls(Me.FormState)

    End Sub


    Protected Overrides Sub OnEdit(ByVal vehicleId As Integer)

      'User can not edit vehicle record on this screen.
      If Me.IsPageCropNavigation Then Me.FormState = FormStateEnum.Edit

    End Sub


    Protected Overrides Sub OnAdd()

      Me.FormState = FormStateEnum.Insert

      ClearInputs(True, False)
      RemoveAllErrorProviders()

      'Dim bmb As BindingManagerBase
      'Dim tempRow As QCDataSet.PublicationRow

      'bmb = Me.BindingContext(Me.publicationComboBox.DataSource)
      'tempRow = CType(CType(bmb.Current, Data.DataRowView).Row, QCDataSet.PublicationRow)
      'If tempRow.IsLanguageIDNull() = False Then languageComboBox.SelectedValue = tempRow.LanguageID

      'tempRow = Nothing
      'bmb = Nothing

      ShowHideControls(Me.FormState)
      EnableDisableControls(FormStateEnum.Insert)

      retailerComboBox.Focus()

    End Sub


    Protected Overrides Sub OnShowPreviousPageCrop(ByVal vehicleId As Integer)

      Processor.LoadLatestPageCropInformation(vehicleId)

      ShowVehicleInformation(Processor.Data.PageCrop(0))

      'If Me.IsPageCropNavigation = False Then
      '  Me.IsPageCropNavigation = True
      'End If

    End Sub


    Protected Overrides Sub OnClear()

      Me.FormState = FormStateEnum.View

      ClearAllInputs()
      ShowHideControls(Me.FormState)
      EnableDisableControls(Me.FormState)

      addButton.Enabled = False
      vehiclePageCropButton.Text = "Vehicle / Page Crop"
      vehiclePageCropButton.Enabled = False
      imageNavigationGroupBox.Enabled = False
      imageSearchGroupBox.Enabled = False
      zoomButton.Enabled = False

      findVehicleIdTextBox.Focus()
      findVehicleIdTextBox.SelectAll()

    End Sub


    Protected Overrides Sub OnSavePageCrop(ByVal vehicleId As Integer, ByVal pageNumber As Integer, ByVal adSize As System.Drawing.SizeF, ByVal adRectangle As System.Drawing.RectangleF)
      Dim pageCropId, adSizeId As Integer
      Dim croppedPageImagePath As String
      Dim tempRow As QCDataSet.PageCropRow


      If AreInputsValid() = False Then Exit Sub

      pageCropId = CType(pageCropIdLabel.Text, Integer)
      If adSize = System.Drawing.SizeF.Empty Then
        adSizeId = 0
      Else
        adSizeId = Processor.GetSizeId(adSize.Width, adSize.Height)
      End If

      tempRow = Processor.Data.PageCrop.FindByPageCropId(pageCropId)

      UpdatePageCropDataRow(tempRow, adSizeId, adRectangle)

      If Processor.AreInputsValid(Processor.Data.vwPublicationEdition(0), tempRow) = False Then
        If Processor.Data.Errors.Count > 0 Then
          ShowErrors(Processor.Data.Errors)
          Processor.Data.Errors.Clear()
          Exit Sub
        ElseIf Processor.Data.Warnings.Count > 0 Then
          If ShowWarnings(Processor.Data.Warnings) = Windows.Forms.DialogResult.Cancel Then
            Processor.Data.Warnings.Clear()
            Exit Sub
          End If
        End If
      End If

      Processor.SynchronizePageCropData()

      croppedPageImagePath = Processor.GetCroppedPageImagePath(vehicleId, pageCropId)
      SaveImage(mainAxLEAD, croppedPageImagePath, ImageFileFormat, BITsPerPixel, ImageCompression, 1)

      Me.FormState = FormStateEnum.View
      ShowHideControls(Me.FormState)
      EnableDisableControls(Me.FormState)

    End Sub


#End Region


#Region " Page image navigation related methods "

    Protected Overrides Sub OnNavigateToFirstImage(ByVal vehicleId As Integer)
      Dim imageFolder As String


      imageFolder = Processor.GetPageImageFolderPath(vehicleId)
      ShowImage(imageFolder, 1)

      currentPageLabel.Text = "1"

      imageFolder = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToLastImage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim imageFolder As String


      imageFolder = Processor.GetPageImageFolderPath(vehicleId)
      ShowImage(imageFolder, pageNumber)

      currentPageLabel.Text = pageNumber.ToString()

      imageFolder = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToNextImage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim imageFolder As String


      imageFolder = Processor.GetPageImageFolderPath(vehicleId)
      ShowImage(imageFolder, pageNumber)

      currentPageLabel.Text = pageNumber.ToString()

      imageFolder = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToPreviousImage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim imageFolder As String


      imageFolder = Processor.GetPageImageFolderPath(vehicleId)
      ShowImage(imageFolder, pageNumber)

      currentPageLabel.Text = pageNumber.ToString()

      imageFolder = Nothing

    End Sub

    Protected Overrides Sub OnFindPage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim imageFolder As String


      imageFolder = Processor.GetPageImageFolderPath(vehicleId)
      ShowImage(imageFolder, pageNumber)

      currentPageLabel.Text = pageNumber.ToString()
      findImageTextBox.Text = String.Empty

      imageFolder = Nothing

    End Sub

#End Region


#Region " Image rotation related events "

    Protected Overrides Sub OnRotateAt90()
      Dim rotationAngle As Integer


      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      rotationAngle = 9000

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = False

    End Sub

    Protected Overrides Sub OnRotatePagesAt180()
      Dim rotationAngle As Integer


      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      rotationAngle = 18000

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = False

    End Sub

    Protected Overrides Sub OnRotatePagesAt270()
      Dim rotationAngle As Integer


      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      rotationAngle = 27000

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = False

    End Sub

    Protected Overrides Sub OnRotatePageAnticlockWise(ByVal rotationCounter As Integer)
      Dim rotationAngle As Integer


      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      rotationAngle = -1 * ImageRotationAngle * rotationCounter

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      'SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      'ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = True

    End Sub

    Protected Overrides Sub OnRotatePageClockWise(ByVal rotationCounter As Integer)
      Dim rotationAngle As Integer


      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      rotationAngle = ImageRotationAngle * rotationCounter

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      'SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      'ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = True

    End Sub

    Protected Overrides Sub OnRotateAllPages(ByVal rotationAngle As Integer)
      Dim imageCounter, vehicleId As Integer
      Dim userResponse As Windows.Forms.DialogResult
      Dim currentImageFilePath As String
      Dim imageFilePath As String


      If Me.AskToSaveImage Then
        userResponse = MessageBox.Show("Do you want to save changes made to image file?" _
                                       , ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question)
        If userResponse = DialogResult.Yes Then
          SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
        End If
        Me.AskToSaveImage = False
      End If

      currentImageFilePath = mainAxLEAD.Tag.ToString()
      vehicleId = CType(vehicleIdValueLabel.Text, Integer)
      mainAxLEAD.SuspendLayout()

      For imageCounter = 1 To Processor.Data.Page.Count
        imageFilePath = Processor.GetPageImageFilePath(vehicleId, imageCounter _
                                                     , Processors.VehicleImageSizeEnum.Unsized)
        ShowImage(imageFilePath)

        RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)
        SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)

        imageFilePath = Nothing
      Next

      ShowImage(currentImageFilePath)
      mainAxLEAD.ResumeLayout(False)
      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = False

    End Sub

    Protected Overrides Sub OnRotatePageBy(ByVal rotationAngle As Integer)
      Dim userResponse As Windows.Forms.DialogResult


      If Me.AskToSaveImage Then
        userResponse = MessageBox.Show("Do you want to save changes made to image file?" _
                                       , ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question)
        If userResponse = DialogResult.Yes Then
          SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
        End If
        Me.AskToSaveImage = False
      End If

      If mainAxLEAD.Bitmap = 0 Then
        MessageBox.Show(Me, "There is no image displayed at present.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Me.IsZoomedIn Then
        MessageBox.Show(Me, "Please zoom out before rotating image.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      RotatePageImage(mainAxLEAD, rotationAngle, True, ImageBackgroundColor, ImageFileFormat)

      'SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      'ShowImage(mainAxLEAD.Tag.ToString())

      mainAxLEAD.AutoScroll = IsZoomedIn
      Me.AskToSaveImage = True

    End Sub

#End Region


#Region " Functionalities for buttons on right panel below image rotation "


    ''' <summary>
    ''' Loads rows from PageCrop table based on supplied vehicleId.
    ''' </summary>
    ''' <param name="vehicleId">PageCrop records for supplied vehicleId will be loaded.</param>
    ''' <remarks></remarks>
    Protected Overrides Sub OnPageCropInformation(ByVal vehicleId As Integer)

      ClearAllInputs()
      Me.FormState = FormStateEnum.View

      Processor.LoadVehiclePageCropInformation(vehicleId)
      ShowVehicleInformation(Processor.Data.vwPublicationEdition(0))
      ShowVehicleInformation(Processor.Data.PageCrop(0))

      Try
        ShowCroppedImage(vehicleId, Processor.Data.PageCrop(0).PageCropId, Nothing)
      Catch ex As ApplicationException
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      currentPageLabel.Text = "1"

    End Sub

    Protected Overrides Sub OnNavigateToFirstPageCrop(ByVal vehicleId As Integer)
      Dim tempRow As QCDataSet.PageCropRow


      If Processor.Data.PageCrop.Count = 0 Then
        MessageBox.Show("There is no cropped image information available for vehicle " _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      tempRow = Processor.Data.PageCrop(0)
      ShowVehicleInformation(tempRow)

      Try
        ShowCroppedImage(vehicleId, tempRow.PageCropId, tempRow.PageRow.ReceivedOrder)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      mainAxLEAD.RubberBandVisible = False
      currentPageLabel.Text = "1"

      tempRow = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToPreviousPageCrop(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim tempRow As QCDataSet.PageCropRow


      If Processor.Data.PageCrop.Count = 0 Then
        MessageBox.Show("There is no cropped image information available for vehicle " _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      tempRow = Processor.Data.PageCrop(pageNumber - 1)
      ShowVehicleInformation(tempRow)

      Try
        ShowCroppedImage(vehicleId, tempRow.PageCropId, tempRow.PageRow.ReceivedOrder)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      mainAxLEAD.RubberBandVisible = False
      currentPageLabel.Text = pageNumber.ToString()

      tempRow = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToNextPageCrop(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim tempRow As QCDataSet.PageCropRow


      If Processor.Data.PageCrop.Count = 0 Then
        MessageBox.Show("There is no cropped image information available for vehicle " _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Processor.Data.PageCrop.Count < pageNumber Then
        MessageBox.Show("This is the last cropped page image information for vehicle." _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      tempRow = Processor.Data.PageCrop(pageNumber - 1)
      ShowVehicleInformation(tempRow)

      Try
        ShowCroppedImage(vehicleId, tempRow.PageCropId, tempRow.PageRow.ReceivedOrder)
      Catch ex As ApplicationException
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      mainAxLEAD.RubberBandVisible = False
      currentPageLabel.Text = pageNumber.ToString()

      tempRow = Nothing

    End Sub

    Protected Overrides Sub OnNavigateToLastPageCrop(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim tempRow As QCDataSet.PageCropRow


      If Processor.Data.PageCrop.Count = 0 Then
        MessageBox.Show("There is no cropped image information available for vehicle " _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      ElseIf Processor.Data.PageCrop.Count < pageNumber Then
        MessageBox.Show("This is the last cropped page image information for vehicle." _
                        + vehicleId.ToString() + ".", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Information)
        Exit Sub
      End If

      tempRow = Processor.Data.PageCrop(pageNumber - 1)
      ShowVehicleInformation(tempRow)

      Try
        ShowCroppedImage(vehicleId, tempRow.PageCropId, tempRow.PageRow.ReceivedOrder)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      mainAxLEAD.RubberBandVisible = False
      currentPageLabel.Text = pageNumber.ToString()

      tempRow = Nothing

    End Sub

    Protected Overrides Sub OnFindCroppedPage(ByVal vehicleId As Integer, ByVal pageNumber As Integer)
      Dim tempRow As QCDataSet.PageCropRow


      tempRow = Processor.Data.PageCrop(pageNumber - 1)
      ShowVehicleInformation(tempRow)

      Try
        ShowCroppedImage(vehicleId, tempRow.PageCropId, tempRow.PageRow.ReceivedOrder)
      Catch ex As Exception
        MessageBox.Show(ex.Message, ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
      End Try

      currentPageLabel.Text = pageNumber.ToString()
      findImageTextBox.Text = String.Empty

      tempRow = Nothing

    End Sub


    Protected Overrides Sub OnPageImageCrop(ByVal vehicleId As Integer, ByVal pageNumber As Integer, ByVal cropRectangle As System.Drawing.RectangleF, ByVal adSizeRectangle As System.Drawing.RectangleF, ByVal adSize As System.Drawing.SizeF)

      If Me.IsPageCropNavigation = False And Me.FormState = FormStateEnum.Edit Then
        'Dim backupFilePath As String

        'backupFilePath = Processor.GetVehiclePageImageBackupFilePath(vehicleId, pageNumber)
        'If backupFilePath <> String.Empty Then
        '  SaveImage(mainAxLEAD, backupFilePath, ImageFileFormat, BITsPerPixel, ImageCompression, 1)
        'End If
        'backupFilePath = Nothing
      End If

      '
      'While setting DstLeft or DstTop AutoScroll must be set to false.
      'These two properties are set within SetDstRec method.
      'AutoScroll is reset after cropped image is shown on main control.
      '
      mainAxLEAD.AutoScroll = False
      If Me.IsZoomedIn _
        Or (mainAxLEAD.Height > cropRectangle.Height And mainAxLEAD.Width > cropRectangle.Width) _
      Then
        mainAxLEAD.SetDstRect(0, 0, cropRectangle.Width, cropRectangle.Height)
        mainAxLEAD.SetDstClipRect(0, 0, cropRectangle.Width, cropRectangle.Height)
      Else
        mainAxLEAD.SetDstRect(0, 0, mainAxLEAD.Width, mainAxLEAD.Height)
        mainAxLEAD.SetDstClipRect(0, 0, mainAxLEAD.Width, mainAxLEAD.Height)
      End If
      mainAxLEAD.Trim(cropRectangle.Left, cropRectangle.Top, cropRectangle.Width, cropRectangle.Height)
      mainAxLEAD.ForceRepaint()
      mainAxLEAD.AutoScroll = Me.IsZoomedIn

      Me.AskToSaveImage = True

    End Sub

    Protected Overrides Sub OnPageImageClearSelection(ByVal cropRectangle As System.Drawing.RectangleF)

      '
      'Following set of lines will set area to be cropped with white color, 
      'before saving for backup.
      'Remove following set of lines, to take backup of image in its 
      'original form.
      '
      mainAxLEAD.SetRgnRect(cropRectangle.Left, cropRectangle.Top, cropRectangle.Width, cropRectangle.Height, 1)
      mainAxLEAD.Fill(ImageDeleteColor)
      mainAxLEAD.RgnFrameType = 0 'LEADLib.RgnFrameTypeConstants.RGNFRAME_NONE
      mainAxLEAD.ForceRepaint()
      mainAxLEAD.FreeRgn()

      Me.AskToSaveImage = True

    End Sub

    Protected Overrides Sub OnPageImageSave()

      SaveImage(mainAxLEAD, mainAxLEAD.Tag.ToString(), ImageFileFormat, BITsPerPixel, ImageCompression, 1)
      Me.AskToSaveImage = False

    End Sub

    ''' <summary>
    ''' Reloads vehicle information and Page image. Useed mainly to reload main image and vehicle information
    ''' to undo last image manipulation.
    ''' </summary>
    ''' <param name="vehicleId"></param>
    ''' <remarks></remarks>
    Protected Overrides Sub OnRefreshVehicleInformation(ByVal vehicleId As Integer)
      Dim clearForPageCrop As Boolean
      Dim pageNumber As Integer


      If Integer.TryParse(currentPageLabel.Text, pageNumber) = False Then
        pageNumber = -1
      End If

      'User can create page crop record only when its FSI.
      If Me.FormState = FormStateEnum.Insert Then clearForPageCrop = True

      'Me.FormState = FormStateEnum.View
      OnFindVehicle(vehicleId)
      RefreshPageInformation()

      If pageNumber > 0 Then
        OnFindPage(vehicleId, pageNumber)
        RefreshPageInformation()
      End If

      If clearForPageCrop Then
        Me.FormState = FormStateEnum.Insert
        ClearInputs(True, False)
        EnableDisableControls(Me.FormState)
      End If

    End Sub

    Protected Overrides Sub OnPageImageDelete(ByVal currentPage As Integer, ByVal totalPages As Integer)
      Dim filePath As String


      filePath = mainAxLEAD.Tag.ToString()

      If System.IO.File.Exists(filePath) = False Then
        MessageBox.Show("Unable to find image file.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Error)
        Exit Sub
      End If

      mainAxLEAD.Bitmap = 0
      System.IO.File.Delete(filePath)

    End Sub

    Protected Overrides Sub OnResequencePageImages(ByVal vehicleId As Integer)
      Dim userResponse As DialogResult
      Dim resequencedImages() As String
      Dim resequenceScr As ResequenceForm


      resequenceScr = New ResequenceForm

      resequenceScr.Init(FormStateEnum.View)
      resequenceScr.ApplyUserCredentials()
      resequenceScr.LoadPageInformation(vehicleId)
      userResponse = resequenceScr.ShowDialog(Me)

      If userResponse = Windows.Forms.DialogResult.OK Then
        Processor.LoadVehiclePagesInformation(vehicleId)
      End If

      resequenceScr.Dispose()
      resequenceScr = Nothing
      resequencedImages = Nothing

    End Sub

#End Region


    Private Sub PublicationIndexQCForm_FormInitialized() Handles Me.FormInitialized

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub PublicationIndexQCForm_InitializingForm() Handles Me.InitializingForm

      Me.StatusMessage = "Loading information. This may take some time. Please wait..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_InvalidVehicleStatus(ByVal vehicleId As Integer, ByVal statusText As String) Handles m_publicationIndexQCProcessor.InvalidVehicleStatus

      Me.StatusMessage = String.Empty

      MessageBox.Show("Vehicle cannot be load because it has the Status of: " + statusText _
                      , ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information)

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingMarkets() Handles m_publicationIndexQCProcessor.LoadingMarkets

      Me.StatusMessage = "Loading markets..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingPublications() Handles m_publicationIndexQCProcessor.LoadingPublications

      Me.StatusMessage = "Loading publications..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingRetailers() Handles m_publicationIndexQCProcessor.LoadingRetailers

      Me.StatusMessage = "Loading retailers..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingVehicle() Handles m_publicationIndexQCProcessor.LoadingVehicle

      Me.StatusMessage = "Searching for vehicle information..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingVehiclePageCropInformation() Handles m_publicationIndexQCProcessor.LoadingVehiclePageCropInformation

      Me.StatusMessage = "Loading cropped pages information..."

    End Sub

    Private Sub m_publicationIndexQCProcessor_LoadingVehiclePagesInformation() Handles m_publicationIndexQCProcessor.LoadingVehiclePagesInformation

      Me.StatusMessage = "Loading vehicle pages' information."

    End Sub

    Private Sub m_publicationIndexQCProcessor_MarketsLoaded() Handles m_publicationIndexQCProcessor.MarketsLoaded

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub m_publicationIndexQCProcessor_PublicationsLoaded() Handles m_publicationIndexQCProcessor.PublicationsLoaded

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub m_publicationIndexQCProcessor_RetailersLoaded() Handles m_publicationIndexQCProcessor.RetailersLoaded

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub m_publicationIndexQCProcessor_VehicleLoaded(ByVal vehicleRow As QCDataSet.vwPublicationEditionRow) Handles m_publicationIndexQCProcessor.VehicleLoaded
      Dim vehicleId As Integer
      Dim imageFolder As String


      If vehicleRow.IsScanDtNull() Or vehicleRow.IsScannedByIdNull() Then
        MessageBox.Show("Scanned images are not available, for vehicle.", ProductName _
                        , MessageBoxButtons.OK, MessageBoxIcon.Warning)
      End If

      ShowVehicleInformation(vehicleRow)

      vehicleId = vehicleRow.VehicleId
      Processor.LoadVehiclePagesInformation(vehicleId)
      If Processor.Data.Page.Count > 0 Then
        imageFolder = Processor.GetPageImageFolderPath(vehicleId)
        ShowImage(imageFolder, 1)
        currentPageLabel.Text = "1"
      End If

      RefreshPageInformation()

      Me.FormState = FormStateEnum.View
      ShowHideControls(Me.FormState)
      EnableDisableControls(Me.FormState)
      Me.AskToSaveImage = False

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub m_publicationIndexQCProcessor_VehicleNotFound() Handles m_publicationIndexQCProcessor.VehicleNotFound

      Me.StatusMessage = String.Empty

      MessageBox.Show("Vehicle not found.", ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information)

    End Sub

    Private Sub m_publicationIndexQCProcessor_VehiclePageCropInformationLoaded() Handles m_publicationIndexQCProcessor.VehiclePageCropInformationLoaded

      Me.StatusMessage = String.Empty

    End Sub

    Private Sub m_publicationIndexQCProcessor_VehiclePagesInformationLoaded() Handles m_publicationIndexQCProcessor.VehiclePagesInformationLoaded

      Me.StatusMessage = String.Empty

    End Sub


  End Class


End Namespace