Namespace UI

  Public Class DupCheckForm
    Implements IForm


#Region " Events "

    Public Event RefreshingPossibleDuplicateRecords()
    Public Event PossibleDuplicateRecordsRefreshed()
    Public Event OnError(ByVal sender As Object, ByVal e As System.Exception)

#End Region


    Private m_isPossibleDuplicateRecordsFound As Boolean
    Private m_isOverride As Boolean
    Private m_isReview As Boolean
    Private m_isClearDuplicate As Boolean

    Private m_removeVehicleId As Integer
    Private m_retId As Integer
    Private m_mktId As Integer
    Private m_pubId As Integer
    Private m_adDate As DateTime
    Private m_mediaText As String
    Private m_startDate As DateTime
    Private m_endDate As DateTime
    Private m_languageId As Nullable(Of Integer)
    Private m_allowThumbnails As Boolean = False
    Private m_selectedIndex As Integer
    Private m_thumbnailList As System.Collections.Generic.List(Of String)

    ''' <summary>
    ''' Processor
    ''' </summary>
    ''' <remarks></remarks>
    Private WithEvents m_dupCheckProcessor As UI.Processors.DupCheck



    ''' <summary>
    ''' 
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private ReadOnly Property DupCheckProcessor() As UI.Processors.DupCheck
      Get
        Return m_dupCheckProcessor
      End Get
    End Property

    ''' <summary>
    ''' Returns true, if user has clicked Override button.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property IsOverride() As Boolean
      Get
        Return m_isOverride
      End Get
    End Property

    ''' <summary>
    ''' Returns true, if user has clicked Review button.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property IsReview() As Boolean
      Get
        Return m_isReview
      End Get
    End Property

    ''' <summary>
    ''' Returns true, if user has selected to clear duplicate vehicle information.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property IsClearDuplicate() As Boolean
      Get
        Return m_isClearDuplicate
      End Get
    End Property

    ''' <summary>
    ''' Return true, if no possible duplicate records found in database.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property IsPossibleDuplicateRecordsFound() As Boolean
      Get
        Return m_isPossibleDuplicateRecordsFound
      End Get
    End Property

    ''' <summary>
    ''' Removes supplied vehicle id from DataTable.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property RemoveVehicle() As Integer
      Get
        Return m_removeVehicleId
      End Get
      Set(ByVal value As Integer)
        m_removeVehicleId = value
      End Set
    End Property

    '''' <summary>
    '''' Gets or sets flag indicating whether to load thumbnails for selected vehicle or not.
    '''' </summary>
    '''' <value></value>
    '''' <returns></returns>
    '''' <remarks></remarks>
    'Public Property AllowThumbnails() As Boolean
    '  Get
    '    Return m_allowThumbnails
    '  End Get
    '  Set(ByVal value As Boolean)
    '    m_allowThumbnails = value
    '  End Set
    'End Property

    ''' <summary>
    ''' List of image paths displayed in list of thumbnails.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private ReadOnly Property ThumbnailList() As System.Collections.Generic.List(Of String)
      Get
        Return m_thumbnailList
      End Get
    End Property

    ''' <summary>
    ''' Stores index of selected image list item. When user double clicks the 
    ''' image list item, property is used to show large sized image.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Property SelectedIndex() As Integer
      Get
        Return m_selectedIndex
      End Get
      Set(ByVal value As Integer)
        m_selectedIndex = value
      End Set
    End Property



#Region " Constructors "

    ''' <summary>
    ''' Overloaded constructor for FSI.
    ''' </summary>
    ''' <remarks></remarks>
    Sub New(ByVal retId As Integer, ByVal mktId As Integer, ByVal adDate As DateTime, ByVal mediaList As System.Collections.Generic.List(Of String), ByVal languageId As Nullable(Of Integer))

      InitializeComponent()

      m_retId = retId
      m_mktId = mktId
      m_pubId = -1
      m_adDate = adDate
      m_mediaText = GetMediaText(mediaList)
      m_startDate = Nothing
      m_endDate = Nothing
      m_languageId = languageId
      m_selectedIndex = -1
      m_thumbnailList = New System.Collections.Generic.List(Of String)

      dupcheckConditionLabel.Text = "Start date: NA, End date: NA."

    End Sub

    ''' <summary>
    ''' Overloaded constructor for ROP.
    ''' </summary>
    ''' <remarks></remarks>
    Sub New(ByVal retId As Integer, ByVal mktId As Integer, ByVal publicationId As Integer, ByVal adDate As DateTime, ByVal mediaList As System.Collections.Generic.List(Of String), ByVal languageId As Nullable(Of Integer))

      InitializeComponent()

      m_retId = retId
      m_mktId = mktId
      m_pubId = publicationId
      m_adDate = adDate
      m_mediaText = GetMediaText(mediaList)
      m_startDate = Nothing
      m_endDate = Nothing
      m_languageId = languageId
      m_selectedIndex = -1
      m_thumbnailList = New System.Collections.Generic.List(Of String)

      dupcheckConditionLabel.Text = "Start date: NA, End date: NA."

    End Sub

    ''' <summary>
    ''' Overloaded constructor for Non FSI and ROP.
    ''' </summary>
    ''' <remarks></remarks>
    Sub New(ByVal retId As Integer, ByVal mktId As Integer, ByVal adDate As DateTime, ByVal mediaList As System.Collections.Generic.List(Of String), ByVal startDate As DateTime, ByVal endDate As DateTime, ByVal languageId As Nullable(Of Integer))

      InitializeComponent()

      m_retId = retId
      m_mktId = mktId
      m_adDate = adDate
      m_mediaText = GetMediaText(mediaList)
      m_startDate = startDate
      m_endDate = endDate
      m_languageId = languageId
      m_selectedIndex = -1
      m_thumbnailList = New System.Collections.Generic.List(Of String)

      If m_startDate = Nothing Then
        dupcheckConditionLabel.Text = "Start date: NA"
      Else
        dupcheckConditionLabel.Text = "Start date: " + m_startDate.ToString("MM/dd/yyyy")
      End If

      If m_endDate = Nothing Then
        dupcheckConditionLabel.Text += ", End date: NA."
      Else
        dupcheckConditionLabel.Text += ", End date: " + m_endDate.ToString("MM/dd/yyyy")
      End If

    End Sub

#End Region



    ''' <summary>
    ''' Loads image files in thumbnail image list.
    ''' </summary>
    ''' <param name="directoryPath"></param>
    ''' <param name="filterString"></param>
    ''' <remarks></remarks>
    Private Sub ShowThumbnails(ByVal directoryPath As String, ByVal filterString As String)
      Dim filesArray() As String


      filesArray = System.IO.Directory.GetFiles(directoryPath, filterString)

      For i As Integer = 0 To filesArray.Length - 1
        dupCheckThumbnailBrowser.LoadFromFile(filesArray(i), BITsPerPixel, 0, 1)
        With dupCheckThumbnailBrowser.Item(dupCheckThumbnailBrowser.Count - 1)
          .Text = System.IO.Path.GetFileName(filesArray(i))
          .ExtraText = filesArray(i)
        End With

        ThumbnailList.Add(filesArray(i))
      Next

      filesArray = Nothing

    End Sub


    ''' <summary>
    ''' Loads image files in thumbnail image list.
    ''' </summary>
    ''' <param name="filesArray"></param>
    ''' <remarks></remarks>
    Private Sub ShowThumbnails(ByVal filesArray() As String)

      For i As Integer = 0 To filesArray.Length - 1
        If System.IO.File.Exists(filesArray(i)) = False Then Continue For

        dupCheckThumbnailBrowser.LoadFromFile(filesArray(i), BITsPerPixel, 0, 1)
        With dupCheckThumbnailBrowser.Item(dupCheckThumbnailBrowser.Count - 1)
          .Text = System.IO.Path.GetFileName(filesArray(i))
          .ExtraText = filesArray(i)
        End With

        ThumbnailList.Add(filesArray(i))
      Next

      filesArray = Nothing

    End Sub


    ''' <summary>
    ''' Returns string in XML format based on supplied collection of string.
    ''' </summary>
    ''' <param name="mediaList">Collection of media types</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetMediaText(ByVal mediaList As System.Collections.Generic.List(Of String)) As String
      Dim mediaText As System.Text.StringBuilder


      mediaText = New System.Text.StringBuilder()

      mediaText.Append("<MediaList>")
      For i As Integer = 0 To mediaList.Count - 1
        mediaText.Append("<Media>")
        mediaText.Append(mediaList(i))
        mediaText.Append("</Media>")
      Next
      mediaText.Append("</MediaList>")

      Return mediaText.ToString()

    End Function


#Region " IForm Implementation "


    Public Event InitializingForm() Implements IForm.InitializingForm
    Public Event FormInitialized() Implements IForm.FormInitialized

    Public Event ApplyingUserCredentials() Implements IForm.ApplyingUserCredentials
    Public Event UserCredentialsApplied() Implements IForm.UserCredentialsApplied


    Public Sub ApplyUserCredentials() Implements IForm.ApplyUserCredentials

    End Sub

    Public Sub Init(ByVal formStatus As FormStateEnum) Implements IForm.Init

      RaiseEvent InitializingForm()

      Me.SuspendLayout()

      Me.StatusMessage = "Loading information. This may take some time. Please wait..."

      Me.FormState = formStatus
      m_isClearDuplicate = False
      m_isOverride = False
      m_isOverride = False

      m_dupCheckProcessor = New UI.Processors.DupCheck
      DupCheckProcessor.Initialize()

      LoadAndBindDataGridView(m_mediaText)

      Me.StatusMessage = "Information loaded. Preparing to show information on window."

      SetDataGridView()

      'Me.StatusMessage = "Loading vehicle page images."

      'LoadThumbnailsForDataGridViewRow(0)

      Me.StatusMessage = ""

      Me.ResumeLayout(False)

      RaiseEvent FormInitialized()

    End Sub


#End Region


    Private Sub LoadAndBindDataGridView(ByVal mediaText As String)

      dupCheckDataGridView.DataSource = Nothing

      If mediaText.ToUpper().IndexOf("FSI") > 0 Then
        DupCheckProcessor.LoadPossibleDuplicateFSI(m_retId, m_mktId, m_adDate, m_mediaText, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        dupCheckDataGridView.DataSource = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateFSI
        If Me.RemoveVehicle > 0 Then
          Dim tempRow As DupCheckDataSet.mt_proc_GetPossibleDuplicateFSIRow
          tempRow = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateFSI.FindByVehicleID(Me.RemoveVehicle)
          If tempRow IsNot Nothing Then tempRow.Delete()
          DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateFSI.AcceptChanges()
        End If
        m_isPossibleDuplicateRecordsFound = (DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateFSI.Count > 0)

      ElseIf mediaText.ToUpper().IndexOf("ROP") > 0 Then
        DupCheckProcessor.LoadPossibleDuplicateROP(m_retId, m_mktId, m_pubId, m_adDate, m_mediaText, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        dupCheckDataGridView.DataSource = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateROP
        If Me.RemoveVehicle > 0 Then
          Dim tempRow As DupCheckDataSet.mt_proc_GetPossibleDuplicateROPRow
          tempRow = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateROP.FindByVehicleID(Me.RemoveVehicle)
          If tempRow IsNot Nothing Then tempRow.Delete()
          DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateROP.AcceptChanges()
        End If
        m_isPossibleDuplicateRecordsFound = (DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateROP.Count > 0)

      Else
        If m_startDate = Nothing And m_endDate = Nothing Then
          DupCheckProcessor.LoadPossibleDuplicateNonFSIROP(m_retId, m_mktId, m_adDate, m_mediaText, Nothing, Nothing, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        ElseIf m_startDate = Nothing Then
          DupCheckProcessor.LoadPossibleDuplicateNonFSIROP(m_retId, m_mktId, m_adDate, m_mediaText, Nothing, m_endDate, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        ElseIf m_endDate = Nothing Then
          DupCheckProcessor.LoadPossibleDuplicateNonFSIROP(m_retId, m_mktId, m_adDate, m_mediaText, m_startDate, Nothing, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        Else
          DupCheckProcessor.LoadPossibleDuplicateNonFSIROP(m_retId, m_mktId, m_adDate, m_mediaText, m_startDate, m_endDate, m_languageId, CType(dateRangeNumericUpDown.Value, Integer))
        End If
        dupCheckDataGridView.DataSource = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROP
        If Me.RemoveVehicle > 0 Then
          Dim tempRow As DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROPRow
          tempRow = DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROP.FindByVehicleID(Me.RemoveVehicle)
          If tempRow IsNot Nothing Then tempRow.Delete()
          tempRow = Nothing
          DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROP.AcceptChanges()
        End If
        m_isPossibleDuplicateRecordsFound = (DupCheckProcessor.DupCheckDataSet.mt_proc_GetPossibleDuplicateNonFSIROP.Count > 0)

      End If

    End Sub

    Private Sub SetDataGridView()
      Dim columnCounter, columnWidth As Integer


      dupCheckDataGridView.Columns("CouponInd").Visible = False
      dupCheckDataGridView.Columns("CreatedById").Visible = False

      dupCheckDataGridView.Columns("VehicleID").HeaderText = "Vehicle ID"
      dupCheckDataGridView.Columns("BreakDt").HeaderText = "Ad Date"
      dupCheckDataGridView.Columns("StartDt").HeaderText = "Start Date"
      dupCheckDataGridView.Columns("EndDt").HeaderText = "End Date"
      dupCheckDataGridView.Columns("CreateDt").HeaderText = "Create Date"
      dupCheckDataGridView.Columns("CreatedBy").HeaderText = "Created By"
      If dupCheckDataGridView.Columns.Contains("ActualPageCount") Then
        dupCheckDataGridView.Columns("ActualPageCount").HeaderText = "Pages"
      Else  'For ROP/Magazine only.
        dupCheckDataGridView.Columns("CheckInPageCount").HeaderText = "Pages"
      End If

      columnWidth = dupCheckDataGridView.ClientSize.Width - dupCheckDataGridView.RowHeadersWidth
      columnCounter = dupCheckDataGridView.Columns("CreatedBy").Index 'Hide all columns after this column.
      columnWidth \= columnCounter 'To avoid Id columns count.
      If columnWidth < 100 Then columnWidth = 100

      For columnCounter = 0 To columnCounter  'Hiding columns after CreatedBy
        dupCheckDataGridView.Columns(columnCounter).Width = columnWidth
      Next

      For columnCounter = columnCounter To dupCheckDataGridView.ColumnCount - 1
        dupCheckDataGridView.Columns(columnCounter).Visible = False
      Next

    End Sub

    Private Sub LoadVehiclePagesThumbnails(ByVal vehicleId As Integer, ByVal createDt As DateTime)
      Dim pageImageFolderPath As String


      dupCheckThumbnailBrowser.Clear()
      ThumbnailList.Clear()

      pageImageFolderPath = VehicleImageFolderPath + "\" + createDt.ToString("yyyyMM") _
                            + "\" + vehicleId.ToString() + "\" + ThumbSizedPageImageFolderName
      If System.IO.Directory.Exists(pageImageFolderPath) = False Then
        imageNotAvailableLabel.Show()
        pageImageFolderPath = Nothing
        Exit Sub
      End If

      If imageNotAvailableLabel.Visible Then imageNotAvailableLabel.Hide()

      'ShowThumbnails(pageImageFolderPath, "*.jpg")
      Dim thumbnailQuery As System.Collections.Generic.IEnumerable(Of String)
      thumbnailQuery = From pageRow In DupCheckProcessor.DupCheckDataSet.Page _
                       Select pageImageFolderPath + "\" + pageRow.ImageName + ".jpg"
      ShowThumbnails(thumbnailQuery.ToArray())
      thumbnailQuery = Nothing

      pageImageFolderPath = Nothing

    End Sub

    Private Sub LoadThumbnailsForDataGridViewRow(ByVal rowIndex As Integer)
      Dim vehicleId As Integer, createDt As DateTime


      If Me.dupCheckDataGridView.Rows.Count < 1 OrElse rowIndex < 0 Then Exit Sub

      vehicleId = Me.dupCheckDataGridView.Columns("CreateDt").Index
      createDt = CType(Me.dupCheckDataGridView.Rows(rowIndex).Cells(vehicleId).Value, DateTime)
      vehicleId = Me.dupCheckDataGridView.Columns("VehicleId").Index
      vehicleId = CType(Me.dupCheckDataGridView.Rows(rowIndex).Cells(vehicleId).Value, Integer)

      DupCheckProcessor.LoadPageImageInformation(vehicleId)
      LoadVehiclePagesThumbnails(vehicleId, createDt)

    End Sub

    'Public Function NavigateToVehicle(ByVal vehicleId As Integer) As Boolean
    '  Dim DomainName As String
    '  Dim URL As System.Text.StringBuilder


    '  DomainName = WebDomainName.Replace("http://", "")

    '  URL = New System.Text.StringBuilder
    '  URL.Append("http://")
    '  URL.Append(WebDomainUser)
    '  URL.Append(":")
    '  URL.Append(WebDomainPassword)
    '  URL.Append("@")
    '  URL.Append(DomainName)
    '  URL.Append("/page21DEAdjacent.asp?Flyer=")
    '  URL.Append(vehicleId)
    '  URL.Append("&Page=1")

    '  Try
    '    Me.Cursor = Cursors.WaitCursor
    '    Application.DoEvents()
    '    dupCheckThumbnailBrowser.Navigate(URL.ToString())
    '    Application.DoEvents()
    '    NavigateToVehicle = True

    '  Catch ex As System.Exception
    '    NavigateToVehicle = False
    '    RaiseEvent OnError(Me, ex)

    '  Finally
    '    URL = Nothing
    '    Me.Cursor = Cursors.Default

    '  End Try

    'End Function

    Private Function PrepareURL(ByVal possibleDupRow As System.Data.DataRowView) As String
      Dim tempDate As DateTime
      Dim urlText As System.Text.StringBuilder


      urlText = New System.Text.StringBuilder()

      'urlText.Append("http://")
      'urlText.Append(WebDomainUser)
      'urlText.Append(":")
      'urlText.Append(WebDomainPassword)
      'urlText.Append("@")
      'If WebDomainName.IndexOf("http:") > 0 Then
      '  urlText.Append(WebDomainName.Replace("http://", ""))
      'Else
      '  urlText.Append(WebDomainName)
      'End If
      'urlText.Append("/adresultsDE.asp?Call=Dup")

      urlText.Append("adresultsDE.asp?Call=Dup")
      urlText.Append("&date1=")
      urlText.Append(System.Web.HttpUtility.UrlEncode(tempDate.ToString("MM/dd/yy")))
      urlText.Append("&Advertiser=")
      urlText.Append(System.Web.HttpUtility.UrlEncode(possibleDupRow("Retailer").ToString()))
      urlText.Append("&Market=")
      urlText.Append(System.Web.HttpUtility.UrlEncode(possibleDupRow("Market").ToString()))
      urlText.Append("&SDate=")
      If possibleDupRow("StartDt").ToString().Length = 0 Then
        urlText.Append(System.Web.HttpUtility.UrlEncode("__/__/__"))
      Else
        urlText.Append(System.Web.HttpUtility.UrlEncode(possibleDupRow("StartDt").ToString()))
      End If
      urlText.Append("&EDate=")
      If possibleDupRow("EndDt").ToString().Length = 0 Then
        urlText.Append(System.Web.HttpUtility.UrlEncode("__/__/__"))
      Else
        urlText.Append(System.Web.HttpUtility.UrlEncode(possibleDupRow("EndDt").ToString()))
      End If

      Return urlText.ToString()

    End Function



    Private Sub refreshButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles refreshButton.Click

      RaiseEvent RefreshingPossibleDuplicateRecords()

      'DupCheckProcessor.LoadPossibleDuplicateFSI(m_retId, m_mktId, m_adDate, m_mediaText, CType(dateRangeNumericUpDown.Value, Integer))
      LoadAndBindDataGridView(m_mediaText)
      SetDataGridView()

      RaiseEvent PossibleDuplicateRecordsRefreshed()

    End Sub

    Private Sub overrideButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles overrideButton.Click
      Dim UserResponse As System.Windows.Forms.DialogResult


      UserResponse = MessageBox.Show(Me, "I am sure this vehicle is not a duplicate record with these other" _
                                     + " records.", ProductName, MessageBoxButtons.OKCancel, _
                                     MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2)

      If UserResponse = DialogResult.OK Then
        m_isOverride = True
        Me.DialogResult = DialogResult.OK
        Me.Close()
      End If

    End Sub

    Private Sub reviewButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles reviewButton.Click
      Dim userResponse As System.Windows.Forms.DialogResult


      userResponse = MessageBox.Show(Me, "Are you sure you want to move current vehicle information" _
                                     + " to review?", ProductName, MessageBoxButtons.YesNo, _
                                     MessageBoxIcon.Question, MessageBoxDefaultButton.Button2)

      If userResponse = DialogResult.Yes Then
        m_isReview = True
        Me.DialogResult = DialogResult.OK
        Me.Close()
      End If

    End Sub

    Private Sub clearDuplicateButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles clearDuplicateButton.Click
      Dim UserResponse As System.Windows.Forms.DialogResult


      UserResponse = MessageBox.Show(Me, "Are you sure you want to clear the vehicle information?", _
                                     ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
                                     MessageBoxDefaultButton.Button2)

      If UserResponse = DialogResult.Yes Then
        m_isClearDuplicate = True
        Me.DialogResult = DialogResult.OK
        Me.Close()
      End If

    End Sub

    Private Sub showAdButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles showAdButton.Click
      Dim targetURL As String
      Dim selectedVehicle As Data.DataRowView
      Dim bmb As BindingManagerBase
      Dim showWebsite As WebBrowserForm


      Try
        Me.Cursor = Cursors.WaitCursor
        bmb = Me.BindingContext(Me.dupCheckDataGridView.DataSource)
        selectedVehicle = CType(bmb.Current, System.Data.DataRowView)
        bmb = Nothing
        targetURL = PrepareURL(selectedVehicle)
        selectedVehicle = Nothing

        showWebsite = New WebBrowserForm
        showWebsite.Navigate(targetURL)
        Application.DoEvents()
        showWebsite.ShowDialog(Me)
        Application.DoEvents()
        showWebsite.Dispose()

      Catch ex As System.Exception
        MessageBox.Show(Me, "Unknown error has occured while loading ad page. Unable to load the ad page.", _
            ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)

      Finally
        showWebsite = Nothing
        targetURL = Nothing
        Me.Cursor = Cursors.Default

      End Try

    End Sub

    Private Sub printButton_Click _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles printButton.Click
      Dim barcodeText As String
      Dim descriptionText As System.Text.StringBuilder
      Dim selectedVehicle As Data.DataRowView
      Dim bmb As BindingManagerBase


      bmb = Me.BindingContext(Me.dupCheckDataGridView.DataSource)
      selectedVehicle = CType(bmb.Current, System.Data.DataRowView)
      bmb = Nothing

      barcodeText = selectedVehicle("VehicleId").ToString()

      descriptionText = New System.Text.StringBuilder()
      descriptionText.Append(selectedVehicle("VehicleId").ToString())
      descriptionText.Append(", ")
      descriptionText.Append(selectedVehicle("Priority").ToString())
      descriptionText.Append(", ")
      descriptionText.Append(CType(selectedVehicle("BreakDt").ToString(), DateTime).ToString("MM/dd/yy"))
      descriptionText.Append(", ")
      descriptionText.Append(selectedVehicle("Retailer").ToString())
      descriptionText.Append(", ")
      descriptionText.Append(selectedVehicle("Market").ToString())
      selectedVehicle = Nothing

      DupCheckProcessor.PrintBarcode(barcodeText, descriptionText.ToString())

      barcodeText = Nothing
      selectedVehicle = Nothing
      descriptionText = Nothing

    End Sub

    Private Sub dupCheckDataGridView_RowEnter _
        (ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) _
        Handles dupCheckDataGridView.RowEnter

      LoadThumbnailsForDataGridViewRow(e.RowIndex)

    End Sub

    Private Sub dupCheckThumbnailBrowser_DblClick _
        (ByVal sender As Object, ByVal e As System.EventArgs) _
        Handles dupCheckThumbnailBrowser.DblClick

      If Me.SelectedIndex < 0 Then Exit Sub

      Dim imagePath As String = ThumbnailList(Me.SelectedIndex)
      Dim imgViewer As UI.Controls.ImageViewerForm = New UI.Controls.ImageViewerForm()

      imgViewer.LoadImage(imagePath)
      imgViewer.Show(Me)

      imagePath = Nothing
      imgViewer = Nothing

    End Sub

    Private Sub dupCheckThumbnailBrowser_ItemSelected _
        (ByVal sender As Object, ByVal e As AxLEADImgListLib._LEADImgListEvents_ItemSelectedEvent) _
        Handles dupCheckThumbnailBrowser.ItemSelected

      Me.SelectedIndex = e.nIndex

    End Sub


  End Class

End Namespace